<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="util__exception_8h" kind="file" language="C++">
    <compoundname>util_exception.h</compoundname>
    <includes refid="key__exception_8h" local="yes">key_exception.h</includes>
    <includedby refid="os__utils_8cpp" local="yes">src/os_utils.cpp</includedby>
    <includedby refid="util__exception_8cpp" local="yes">src/util_exception.cpp</includedby>
    <incdepgraph>
      <node id="2">
        <label>key_exception.h</label>
        <link refid="key__exception_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>inc/util_exception.h</label>
        <link refid="util__exception_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>stdexcept</label>
      </node>
      <node id="3">
        <label>string</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>inc/util_exception.h</label>
        <link refid="util__exception_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>src/os_utils.cpp</label>
        <link refid="os__utils_8cpp"/>
      </node>
      <node id="3">
        <label>src/util_exception.cpp</label>
        <link refid="util__exception_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classUtilException" prot="public">UtilException</innerclass>
    <sectiondef kind="define">
      <memberdef kind="define" id="util__exception_8h_a361e7567f78e4a1f8b85cde320b32705_1a361e7567f78e4a1f8b85cde320b32705" prot="public" static="no">
        <name>THROW_UTIL_EXCEPTION</name>
        <param><defname>msg</defname></param>
        <initializer>	__debugbreak();\
	throw <ref refid="classUtilException" kindref="compound">UtilException</ref>( __LINE__, __FILE__, __FUNCTION__, msg );</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/util_exception.h" line="17" column="9" bodyfile="inc/util_exception.h" bodystart="17" bodyend="18"/>
        <referencedby refid="namespaceutil_a08c4e4a29b0a0e5157b152b140bc094e_1a08c4e4a29b0a0e5157b152b140bc094e" compoundref="os__utils_8cpp" startline="104" endline="116">util::getKnownFolderPath</referencedby>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="key__exception_8h" kindref="compound">key_exception.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6" refid="classUtilException" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classUtilException" kindref="compound">UtilException</ref><sp/>final</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classKeyException" kindref="compound">KeyException</ref></highlight></codeline>
<codeline lineno="8"><highlight class="normal">{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classUtilException_a6aab5d0114e7eea39c9e668bea66ab37_1a6aab5d0114e7eea39c9e668bea66ab37" kindref="member">UtilException</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*file,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*function,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;msg<sp/>)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="classUtilException_a2752efa8887758cb0d3ed094cbc45738_1a2752efa8887758cb0d3ed094cbc45738" kindref="member">getType</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">final</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="classUtilException_ae0e75ef62cc274b85e19d850ac0dbc5a_1ae0e75ef62cc274b85e19d850ac0dbc5a" kindref="member">what</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">final</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="14"><highlight class="normal">};</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17" refid="util__exception_8h_a361e7567f78e4a1f8b85cde320b32705_1a361e7567f78e4a1f8b85cde320b32705" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>THROW_UTIL_EXCEPTION(<sp/>msg<sp/>)<sp/>__debugbreak();\</highlight></codeline>
<codeline lineno="18"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>throw<sp/>UtilException(<sp/>__LINE__,<sp/>__FILE__,<sp/>__FUNCTION__,<sp/>msg<sp/>);</highlight></codeline>
    </programlisting>
    <location file="inc/util_exception.h"/>
  </compounddef>
</doxygen>
