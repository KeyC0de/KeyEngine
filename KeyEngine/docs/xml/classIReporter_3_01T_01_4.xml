<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="classIReporter_3_01T_01_4" kind="class" language="C++" prot="public">
    <compoundname>IReporter&lt; T &gt;</compoundname>
    <includes refid="reporter__listener_8h" local="no">reporter_listener.h</includes>
    <briefdescription>
<para>Templated Observer design pattern (Class Template 2 of 2) </para>
    </briefdescription>
    <detaileddescription>
<para>=============================================================</para>
<para><simplesect kind="author"><para>KeyC0de </para>
</simplesect>
<simplesect kind="date"><para>2024/05/07 22:49</para>
</simplesect>
To become an <ref refid="classIReporter" kindref="compound">IReporter</ref> of an event T, U, V a class (&quot;MyClass&quot;) must do the following:</para>
<para><orderedlist>
<listitem><para>Inherit from <ref refid="classIReporter" kindref="compound">IReporter</ref>:</para>
</listitem></orderedlist>
</para>
<para>class MyClass</para>
<para>: ...</para>
<para>public <ref refid="classIReporter_3_01T_01_4" kindref="compound">IReporter&lt;T&gt;</ref> // eg. T = StartedTemperatureMeasurements</para>
<para><orderedlist>
<listitem><para>make sure all inheriting concrete classes implement a destructor which calls <computeroutput>removeThisFromListenersList()</computeroutput> as the last instruction, for all the <ref refid="classIReporter" kindref="compound">IReporter</ref>&apos;s it inherited from.</para>
</listitem></orderedlist>
</para>
<para><computeroutput>removeThisFromListenersList()</computeroutput></para>
<para><computeroutput><ref refid="classIReporter" kindref="compound">IReporter</ref>&lt;T&gt;::removeThisFromListenersList()</computeroutput></para>
<para>If a derived class doesn&apos;t implement a destructor it will be an abstract class.</para>
<para><orderedlist>
<listitem><para>at some point MyClass will want to report on the event T, which will trigger the <computeroutput>notify( const T&amp; )</computeroutput> method of all of its IListenes&lt;T&gt;.</para>
</listitem></orderedlist>
</para>
<para>To do that you must get a hold of a <ref refid="classReportingNexus" kindref="compound">ReportingNexus</ref> object, cast it to the proper <ref refid="classIReporter" kindref="compound">IReporter</ref> sub-class and finally:</para>
<para>static_cast&lt;<ref refid="classIReporter_3_01T_01_4" kindref="compound">IReporter&lt;T&gt;</ref>&amp;&gt;( reportingNexus ).notifyListeners( T( /*ctor arguments for event T*<zwj/>/ ) ); // the cast is necessary only if MyClass derives from multiple IReporter&lt;&gt;s.</para>
<para>eg.</para>
<para>static_cast&lt;IReporter&lt;StartedTemperatureMeasurements&gt;&amp;&gt;( *this ).notifyListeners( StartedTemperatureMeasurements( m_measrements ) );</para>
<para>IReporter&lt;ObjectDestroyed&lt;MyClass&gt;&gt;::notifyListeners( ObjectDestroyed&lt;MyClass&gt;( *this ) ); <heading level="1">IReporter&lt;ObjectDestroyed&lt;Instrumentation&gt;&gt;::notifyListeners( ObjectDestroyed&lt;Instrumentation&gt;( *m_thermometer ) ); </heading>
</para>
    </detaileddescription>
    <location file="inc/reporter_listener.h" line="98" column="1"/>
    <listofallmembers>
    </listofallmembers>
  </compounddef>
</doxygen>
