<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="dynamic__constant__buffer_8cpp" kind="file" language="C++">
    <compoundname>dynamic_constant_buffer.cpp</compoundname>
    <includes refid="dynamic__constant__buffer_8h" local="yes">dynamic_constant_buffer.h</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">cctype</includes>
    <incdepgraph>
      <node id="10">
        <label>assertions_console.h</label>
        <link refid="assertions__console_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>dynamic_constant_buffer.h</label>
        <link refid="dynamic__constant__buffer_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>key_type_traits.h</label>
        <link refid="key__type__traits_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>utils.h</label>
        <link refid="utils_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>utils_global.h</label>
        <link refid="utils__global_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/dynamic_constant_buffer.cpp</label>
        <link refid="dynamic__constant__buffer_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>DirectXMath.h</label>
      </node>
      <node id="19">
        <label>algorithm</label>
      </node>
      <node id="15">
        <label>bitset</label>
      </node>
      <node id="3">
        <label>cassert</label>
      </node>
      <node id="27">
        <label>cctype</label>
      </node>
      <node id="17">
        <label>cinttypes</label>
      </node>
      <node id="16">
        <label>cstddef</label>
      </node>
      <node id="23">
        <label>execution</label>
      </node>
      <node id="18">
        <label>future</label>
      </node>
      <node id="11">
        <label>iostream</label>
      </node>
      <node id="21">
        <label>iterator</label>
      </node>
      <node id="6">
        <label>memory</label>
      </node>
      <node id="20">
        <label>numeric</label>
      </node>
      <node id="7">
        <label>optional</label>
      </node>
      <node id="22">
        <label>regex</label>
      </node>
      <node id="14">
        <label>set</label>
      </node>
      <node id="13">
        <label>sstream</label>
      </node>
      <node id="8">
        <label>string</label>
      </node>
      <node id="25">
        <label>type_traits</label>
      </node>
      <node id="9">
        <label>unordered_map</label>
      </node>
      <node id="5">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innerclass refid="structcon_1_1ExtraData" prot="public">con::ExtraData</innerclass>
    <innerclass refid="structcon_1_1ExtraData_1_1Struct" prot="public">con::ExtraData::Struct</innerclass>
    <innerclass refid="structcon_1_1ExtraData_1_1Array" prot="public">con::ExtraData::Array</innerclass>
    <innernamespace refid="namespacecon">con</innernamespace>
    <sectiondef kind="define">
      <memberdef kind="define" id="dynamic__constant__buffer_8cpp_abded13e89fb148f56b327029ac1b3042_1abded13e89fb148f56b327029ac1b3042" prot="public" static="no">
        <name>X</name>
        <param><defname>el</defname></param>
        <initializer>case el: return ElementProperties&lt;el&gt;::tag;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dynamic_constant_buffer.cpp" line="32" column="9"/>
      </memberdef>
      <memberdef kind="define" id="dynamic__constant__buffer_8cpp_abded13e89fb148f56b327029ac1b3042_1abded13e89fb148f56b327029ac1b3042" prot="public" static="no">
        <name>X</name>
        <param><defname>el</defname></param>
        <initializer>		case el: \
		return *m_offset + ElementProperties&lt;el&gt;::hlslSize;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dynamic_constant_buffer.cpp" line="97" column="9"/>
      </memberdef>
      <memberdef kind="define" id="dynamic__constant__buffer_8cpp_abded13e89fb148f56b327029ac1b3042_1abded13e89fb148f56b327029ac1b3042" prot="public" static="no">
        <name>X</name>
        <param><defname>el</defname></param>
        <initializer>		case el: \
		m_offset = advanceIfCrossesBoundary( offsetIn, \
			ElementProperties&lt;el&gt;::hlslSize ); \
			return *m_offset + ElementProperties&lt;el&gt;::hlslSize;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/dynamic_constant_buffer.cpp" line="170" column="9"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="dynamic__constant__buffer_8h" kindref="compound">dynamic_constant_buffer.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cctype&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacecon" kindref="compound">con</ref></highlight></codeline>
<codeline lineno="7"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9" refid="structcon_1_1ExtraData" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcon_1_1ExtraData" kindref="compound">ExtraData</ref><sp/>final</highlight></codeline>
<codeline lineno="10"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11" refid="structcon_1_1ExtraData_1_1Struct" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcon_1_1ExtraData_1_1Struct" kindref="compound">Struct</ref><sp/>final</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structcon_1_1CBElement_1_1IExtraData" kindref="compound">CBElement::IExtraData</ref></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="14" refid="structcon_1_1ExtraData_1_1Struct_a68097dc05fa936af9fa1fd52e208c22f_1a68097dc05fa936af9fa1fd52e208c22f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::pair&lt;std::string,<sp/>CBElement&gt;&gt;<sp/><ref refid="structcon_1_1ExtraData_1_1Struct_a68097dc05fa936af9fa1fd52e208c22f_1a68097dc05fa936af9fa1fd52e208c22f" kindref="member">m_layoutElements</ref>;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17" refid="structcon_1_1ExtraData_1_1Array" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcon_1_1ExtraData_1_1Array" kindref="compound">Array</ref><sp/>final</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structcon_1_1CBElement_1_1IExtraData" kindref="compound">CBElement::IExtraData</ref></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="20" refid="structcon_1_1ExtraData_1_1Array_a3164eb088b343aeed0ad113b48d8789f_1a3164eb088b343aeed0ad113b48d8789f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::optional&lt;CBElement&gt;<sp/><ref refid="structcon_1_1ExtraData_1_1Array_a3164eb088b343aeed0ad113b48d8789f_1a3164eb088b343aeed0ad113b48d8789f" kindref="member">m_layoutElement</ref>;</highlight></codeline>
<codeline lineno="21" refid="structcon_1_1ExtraData_1_1Array_a63b8c02472a78a764036256603bdbf95_1a63b8c02472a78a764036256603bdbf95" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structcon_1_1ExtraData_1_1Array_a63b8c02472a78a764036256603bdbf95_1a63b8c02472a78a764036256603bdbf95" kindref="member">m_elementSize</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="22" refid="structcon_1_1ExtraData_1_1Array_a915d7fc22e1a7bf76e566fcf1dcec01c_1a915d7fc22e1a7bf76e566fcf1dcec01c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structcon_1_1ExtraData_1_1Array_a915d7fc22e1a7bf76e566fcf1dcec01c_1a915d7fc22e1a7bf76e566fcf1dcec01c" kindref="member">m_size</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="24"><highlight class="normal">};</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="comment">//<sp/>CBElement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="classcon_1_1CBElement_a63af17d93b614366c28d6369e4300649_1a63af17d93b614366c28d6369e4300649" refkind="member"><highlight class="normal">std::string<sp/><ref refid="classcon_1_1CBElement_a63af17d93b614366c28d6369e4300649_1a63af17d93b614366c28d6369e4300649" kindref="member">CBElement::calcSignature</ref>()<sp/>const<sp/>cond_noex</highlight></codeline>
<codeline lineno="29"><highlight class="normal">{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(<sp/><ref refid="classcon_1_1CBElement_a89f52c943b9001e904a3b46d2ff159e0_1a89f52c943b9001e904a3b46d2ff159e0" kindref="member">m_type</ref><sp/>)</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>X(<sp/>el<sp/>)<sp/>case<sp/>el:<sp/>return<sp/>ElementProperties&lt;el&gt;::tag;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dynamic__constant__buffer_8h_a36024b6e30a67d227f4a2c898167f20b_1a36024b6e30a67d227f4a2c898167f20b" kindref="member">CB_LEAF_TYPES</ref></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>X</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacecon_a715a53e528376e9d85ea035a2db279a5_1a715a53e528376e9d85ea035a2db279a5aa75d3cc2c3da26872d3e1377c2c3f45f" kindref="member">Struct</ref>:</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classcon_1_1CBElement_a8aaf2878bfbd36368d13f7d4bf6e4805_1a8aaf2878bfbd36368d13f7d4bf6e4805" kindref="member">getSignatureForStruct</ref>();</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacecon_a715a53e528376e9d85ea035a2db279a5_1a715a53e528376e9d85ea035a2db279a5a70f1151d1a31fb6a465cde6b89721e0d" kindref="member">Array</ref>:</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classcon_1_1CBElement_aec507d5cedb307bae9264071d6637060_1aec507d5cedb307bae9264071d6637060" kindref="member">calcSignatureForArray</ref>();</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions__console_8h_af3e11288cb5021b91949be5058816137_1af3e11288cb5021b91949be5058816137" kindref="member">ASSERT</ref>(<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Bad<sp/>type<sp/>in<sp/>signature<sp/>generation&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;???&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45" refid="classcon_1_1CBElement_a3c31c032036577e4ff120b9df5363877_1a3c31c032036577e4ff120b9df5363877" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classcon_1_1CBElement_a3c31c032036577e4ff120b9df5363877_1a3c31c032036577e4ff120b9df5363877" kindref="member">CBElement::isValid</ref>()<sp/>const<sp/>noexcept</highlight></codeline>
<codeline lineno="46"><highlight class="normal">{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classcon_1_1CBElement_a89f52c943b9001e904a3b46d2ff159e0_1a89f52c943b9001e904a3b46d2ff159e0" kindref="member">m_type</ref><sp/>!=<sp/><ref refid="namespacecon_a715a53e528376e9d85ea035a2db279a5_1a715a53e528376e9d85ea035a2db279a5aa0f2a80cc2e22505f9ff4d7920dd6ec6" kindref="member">Empty</ref>;</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="classcon_1_1CBElement_a8a90f9c56e1847ff5aa05c8a61005192_1a8a90f9c56e1847ff5aa05c8a61005192" refkind="member"><highlight class="normal">std::pair&lt;size_t,<sp/>const<sp/>CBElement*&gt;<sp/><ref refid="classcon_1_1CBElement_a8a90f9c56e1847ff5aa05c8a61005192_1a8a90f9c56e1847ff5aa05c8a61005192" kindref="member">CBElement::calculateArrayIndexingOffset</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>offset,</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cond_noex</highlight></codeline>
<codeline lineno="52"><highlight class="normal">{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assertions__console_8h_af3e11288cb5021b91949be5058816137_1af3e11288cb5021b91949be5058816137" kindref="member">ASSERT</ref>(<sp/>m_type<sp/>==<sp/><ref refid="namespacecon_a715a53e528376e9d85ea035a2db279a5_1a715a53e528376e9d85ea035a2db279a5a70f1151d1a31fb6a465cde6b89721e0d" kindref="member">Array</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Attempted<sp/>to<sp/>index<sp/>into<sp/>a<sp/>non-array<sp/>type&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;data<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="structcon_1_1ExtraData_1_1Array" kindref="compound">ExtraData::Array</ref>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>*m_pExtraData<sp/>);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assertions__console_8h_af3e11288cb5021b91949be5058816137_1af3e11288cb5021b91949be5058816137" kindref="member">ASSERT</ref>(<sp/>index<sp/>&lt;<sp/>data.m_size,<sp/></highlight><highlight class="stringliteral">&quot;Indexing<sp/>arithmetic!&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{offset<sp/>+<sp/>data.m_elementSize<sp/>*<sp/>index,<sp/>&amp;*data.m_layoutElement};</highlight></codeline>
<codeline lineno="57"><highlight class="normal">}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59" refid="classcon_1_1CBElement_a6d3aa5a18126043ef7e3851d6a4b7cc6_1a6d3aa5a18126043ef7e3851d6a4b7cc6" refkind="member"><highlight class="normal"><ref refid="classcon_1_1CBElement" kindref="compound">CBElement</ref>&amp;<sp/><ref refid="classcon_1_1CBElement_a6d3aa5a18126043ef7e3851d6a4b7cc6_1a6d3aa5a18126043ef7e3851d6a4b7cc6" kindref="member">CBElement::operator[]</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;key<sp/>)<sp/>cond_noex</highlight></codeline>
<codeline lineno="60"><highlight class="normal">{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assertions__console_8h_af3e11288cb5021b91949be5058816137_1af3e11288cb5021b91949be5058816137" kindref="member">ASSERT</ref>(<sp/>m_type<sp/>==<sp/><ref refid="namespacecon_a715a53e528376e9d85ea035a2db279a5_1a715a53e528376e9d85ea035a2db279a5aa75d3cc2c3da26872d3e1377c2c3f45f" kindref="member">Struct</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Attempted<sp/>to<sp/>key<sp/>into<sp/>a<sp/>non-struct<sp/>type&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;layEl<sp/>:<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="structcon_1_1ExtraData_1_1Struct" kindref="compound">ExtraData::Struct</ref>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>*m_pExtraData<sp/>).<ref refid="structcon_1_1ExtraData_1_1Struct_a68097dc05fa936af9fa1fd52e208c22f_1a68097dc05fa936af9fa1fd52e208c22f" kindref="member">m_layoutElements</ref><sp/>)</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>layEl.first<sp/>==<sp/>key<sp/>)</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>layEl.second;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>getEmptyElement();</highlight></codeline>
<codeline lineno="70"><highlight class="normal">}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72" refid="classcon_1_1CBElement_a110609bbe02e3794d1f45b46c63877fd_1a110609bbe02e3794d1f45b46c63877fd" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classcon_1_1CBElement" kindref="compound">CBElement</ref>&amp;<sp/><ref refid="classcon_1_1CBElement_a6d3aa5a18126043ef7e3851d6a4b7cc6_1a6d3aa5a18126043ef7e3851d6a4b7cc6" kindref="member">CBElement::operator[]</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;key<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cond_noex</highlight></codeline>
<codeline lineno="73"><highlight class="normal">{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><ref refid="classcon_1_1CBElement" kindref="compound">CBElement</ref>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>*this<sp/>)[key];</highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77" refid="classcon_1_1CBElement_a3dc600a60c844b48c3d4a24ff7783e78_1a3dc600a60c844b48c3d4a24ff7783e78" refkind="member"><highlight class="normal"><ref refid="classcon_1_1CBElement" kindref="compound">CBElement</ref>&amp;<sp/><ref refid="classcon_1_1CBElement_a3dc600a60c844b48c3d4a24ff7783e78_1a3dc600a60c844b48c3d4a24ff7783e78" kindref="member">CBElement::T</ref>()<sp/>cond_noex</highlight></codeline>
<codeline lineno="78"><highlight class="normal">{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assertions__console_8h_af3e11288cb5021b91949be5058816137_1af3e11288cb5021b91949be5058816137" kindref="member">ASSERT</ref>(<sp/><ref refid="classcon_1_1CBElement_a89f52c943b9001e904a3b46d2ff159e0_1a89f52c943b9001e904a3b46d2ff159e0" kindref="member">m_type</ref><sp/>==<sp/><ref refid="namespacecon_a715a53e528376e9d85ea035a2db279a5_1a715a53e528376e9d85ea035a2db279a5a70f1151d1a31fb6a465cde6b89721e0d" kindref="member">Array</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Attempted<sp/>to<sp/>access<sp/>inner<sp/>CBElement<sp/>type<sp/>T<sp/>of<sp/>non-array<sp/>type.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="structcon_1_1ExtraData_1_1Array" kindref="compound">ExtraData::Array</ref>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>*m_pExtraData<sp/>).<ref refid="structcon_1_1ExtraData_1_1Array_a3164eb088b343aeed0ad113b48d8789f_1a3164eb088b343aeed0ad113b48d8789f" kindref="member">m_layoutElement</ref>;</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83" refid="classcon_1_1CBElement_ad229412309e3fdcee3400b35c6eba18a_1ad229412309e3fdcee3400b35c6eba18a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classcon_1_1CBElement" kindref="compound">CBElement</ref>&amp;<sp/><ref refid="classcon_1_1CBElement_a3dc600a60c844b48c3d4a24ff7783e78_1a3dc600a60c844b48c3d4a24ff7783e78" kindref="member">CBElement::T</ref>()<sp/>const<sp/>cond_noex</highlight></codeline>
<codeline lineno="84"><highlight class="normal">{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><ref refid="classcon_1_1CBElement" kindref="compound">CBElement</ref>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>*this<sp/>).<ref refid="classcon_1_1CBElement_a3dc600a60c844b48c3d4a24ff7783e78_1a3dc600a60c844b48c3d4a24ff7783e78" kindref="member">T</ref>();</highlight></codeline>
<codeline lineno="86"><highlight class="normal">}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88" refid="classcon_1_1CBElement_abfcc38e1bcdc516d45c7b56c19b7a032_1abfcc38e1bcdc516d45c7b56c19b7a032" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classcon_1_1CBElement_abfcc38e1bcdc516d45c7b56c19b7a032_1abfcc38e1bcdc516d45c7b56c19b7a032" kindref="member">CBElement::getOffsetBegin</ref>()<sp/>const<sp/>cond_noex</highlight></codeline>
<codeline lineno="89"><highlight class="normal">{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*<ref refid="classcon_1_1CBElement_a4331e8b8e88042cc3f31d6c211905cf6_1a4331e8b8e88042cc3f31d6c211905cf6" kindref="member">m_offset</ref>;</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93" refid="classcon_1_1CBElement_a5f530e1452487417567ea1bbdb28c07e_1a5f530e1452487417567ea1bbdb28c07e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classcon_1_1CBElement_a5f530e1452487417567ea1bbdb28c07e_1a5f530e1452487417567ea1bbdb28c07e" kindref="member">CBElement::getOffsetEnd</ref>()<sp/>const<sp/>cond_noex</highlight></codeline>
<codeline lineno="94"><highlight class="normal">{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(<sp/><ref refid="classcon_1_1CBElement_a89f52c943b9001e904a3b46d2ff159e0_1a89f52c943b9001e904a3b46d2ff159e0" kindref="member">m_type</ref><sp/>)</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>X(<sp/>el<sp/>)<sp/>case<sp/>el:<sp/>\</highlight></codeline>
<codeline lineno="98"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>*m_offset<sp/>+<sp/>ElementProperties&lt;el&gt;::hlslSize;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dynamic__constant__buffer_8h_a36024b6e30a67d227f4a2c898167f20b_1a36024b6e30a67d227f4a2c898167f20b" kindref="member">CB_LEAF_TYPES</ref></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>X</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacecon_a715a53e528376e9d85ea035a2db279a5_1a715a53e528376e9d85ea035a2db279a5aa75d3cc2c3da26872d3e1377c2c3f45f" kindref="member">Struct</ref>:</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;data<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="structcon_1_1ExtraData_1_1Struct" kindref="compound">ExtraData::Struct</ref>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>*m_pExtraData<sp/>);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classcon_1_1CBElement_a660664a976c007e801542806637b36d5_1a660664a976c007e801542806637b36d5" kindref="member">advanceToBoundary</ref>(<sp/>data.m_layoutElements.back().second.getOffsetEnd()<sp/>);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacecon_a715a53e528376e9d85ea035a2db279a5_1a715a53e528376e9d85ea035a2db279a5a70f1151d1a31fb6a465cde6b89721e0d" kindref="member">Array</ref>:</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;data<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="structcon_1_1ExtraData_1_1Array" kindref="compound">ExtraData::Array</ref>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>*m_pExtraData<sp/>);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*<ref refid="classcon_1_1CBElement_a4331e8b8e88042cc3f31d6c211905cf6_1a4331e8b8e88042cc3f31d6c211905cf6" kindref="member">m_offset</ref><sp/>+<sp/><ref refid="classcon_1_1CBElement_a660664a976c007e801542806637b36d5_1a660664a976c007e801542806637b36d5" kindref="member">advanceToBoundary</ref>(<sp/>data.m_layoutElement-&gt;getSizeInBytes()<sp/>)</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>data.<ref refid="structcon_1_1ExtraData_1_1Array_a915d7fc22e1a7bf76e566fcf1dcec01c_1a915d7fc22e1a7bf76e566fcf1dcec01c" kindref="member">m_size</ref>;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions__console_8h_af3e11288cb5021b91949be5058816137_1af3e11288cb5021b91949be5058816137" kindref="member">ASSERT</ref>(<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Tried<sp/>to<sp/>get<sp/>offset<sp/>of<sp/>invalid<sp/>element<sp/>or<sp/>at<sp/>the<sp/>wrong<sp/>time!&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0u;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal">}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118" refid="classcon_1_1CBElement_a39ea03a517d27ee0ed154b9f167ca104_1a39ea03a517d27ee0ed154b9f167ca104" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classcon_1_1CBElement_a39ea03a517d27ee0ed154b9f167ca104_1a39ea03a517d27ee0ed154b9f167ca104" kindref="member">CBElement::getSizeInBytes</ref>()<sp/>const<sp/>cond_noex</highlight></codeline>
<codeline lineno="119"><highlight class="normal">{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classcon_1_1CBElement_a5f530e1452487417567ea1bbdb28c07e_1a5f530e1452487417567ea1bbdb28c07e" kindref="member">getOffsetEnd</ref>()<sp/>-<sp/><ref refid="classcon_1_1CBElement_abfcc38e1bcdc516d45c7b56c19b7a032_1abfcc38e1bcdc516d45c7b56c19b7a032" kindref="member">getOffsetBegin</ref>();</highlight></codeline>
<codeline lineno="121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123" refid="classcon_1_1CBElement_a87ecde2b649ee3a518a5f99d94d488fb_1a87ecde2b649ee3a518a5f99d94d488fb" refkind="member"><highlight class="normal"><ref refid="classcon_1_1CBElement" kindref="compound">CBElement</ref>&amp;<sp/><ref refid="classcon_1_1CBElement_a87ecde2b649ee3a518a5f99d94d488fb_1a87ecde2b649ee3a518a5f99d94d488fb" kindref="member">CBElement::add</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacecon_a715a53e528376e9d85ea035a2db279a5_1a715a53e528376e9d85ea035a2db279a5" kindref="member">ElementType</ref><sp/>addedType,</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name<sp/>)<sp/>cond_noex</highlight></codeline>
<codeline lineno="125"><highlight class="normal">{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assertions__console_8h_af3e11288cb5021b91949be5058816137_1af3e11288cb5021b91949be5058816137" kindref="member">ASSERT</ref>(<sp/>m_type<sp/>==<sp/><ref refid="namespacecon_a715a53e528376e9d85ea035a2db279a5_1a715a53e528376e9d85ea035a2db279a5aa75d3cc2c3da26872d3e1377c2c3f45f" kindref="member">Struct</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Attempted<sp/>to<sp/>add<sp/>sub<sp/>Element<sp/>to<sp/>non-Struct<sp/>type&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assertions__console_8h_af3e11288cb5021b91949be5058816137_1af3e11288cb5021b91949be5058816137" kindref="member">ASSERT</ref>(<sp/>validateMemberName(<sp/>name<sp/>),<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>name<sp/>for<sp/>Struct<sp/>inner<sp/>Element<sp/>type.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;structData<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="structcon_1_1ExtraData_1_1Struct" kindref="compound">ExtraData::Struct</ref>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>*m_pExtraData<sp/>);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;layEl<sp/>:<sp/>structData.m_layoutElements<sp/>)</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>layEl.first<sp/>==<sp/>name<sp/>)</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions__console_8h_af3e11288cb5021b91949be5058816137_1af3e11288cb5021b91949be5058816137" kindref="member">ASSERT</ref>(<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Attempted<sp/>to<sp/>add<sp/>element<sp/>with<sp/>duplicate<sp/>name<sp/>in<sp/>Struct<sp/>type.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>structData.<ref refid="structcon_1_1ExtraData_1_1Struct_a68097dc05fa936af9fa1fd52e208c22f_1a68097dc05fa936af9fa1fd52e208c22f" kindref="member">m_layoutElements</ref>.emplace_back(<sp/>name,<sp/><ref refid="classcon_1_1CBElement" kindref="compound">CBElement</ref>{addedType}<sp/>);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="138"><highlight class="normal">}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140" refid="classcon_1_1CBElement_a9706f2df6cef0aa0efccd615ef002334_1a9706f2df6cef0aa0efccd615ef002334" refkind="member"><highlight class="normal"><ref refid="classcon_1_1CBElement" kindref="compound">CBElement</ref>&amp;<sp/><ref refid="classcon_1_1CBElement_a9706f2df6cef0aa0efccd615ef002334_1a9706f2df6cef0aa0efccd615ef002334" kindref="member">CBElement::set</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacecon_a715a53e528376e9d85ea035a2db279a5_1a715a53e528376e9d85ea035a2db279a5" kindref="member">ElementType</ref><sp/>addedType,</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>)<sp/>cond_noex</highlight></codeline>
<codeline lineno="142"><highlight class="normal">{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assertions__console_8h_af3e11288cb5021b91949be5058816137_1af3e11288cb5021b91949be5058816137" kindref="member">ASSERT</ref>(<sp/>m_type<sp/>==<sp/><ref refid="namespacecon_a715a53e528376e9d85ea035a2db279a5_1a715a53e528376e9d85ea035a2db279a5a70f1151d1a31fb6a465cde6b89721e0d" kindref="member">Array</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Set<sp/>on<sp/>non-array<sp/>in<sp/>layout&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assertions__console_8h_af3e11288cb5021b91949be5058816137_1af3e11288cb5021b91949be5058816137" kindref="member">ASSERT</ref>(<sp/>size<sp/>!=<sp/>0u,<sp/></highlight><highlight class="stringliteral">&quot;Element<sp/>size<sp/>is<sp/>empty!<sp/>Maybe<sp/>it<sp/>has<sp/>not<sp/>been<sp/>committed<sp/>yet.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;arrayData<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="structcon_1_1ExtraData_1_1Array" kindref="compound">ExtraData::Array</ref>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>*m_pExtraData<sp/>);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>arrayData.<ref refid="structcon_1_1ExtraData_1_1Array_a3164eb088b343aeed0ad113b48d8789f_1a3164eb088b343aeed0ad113b48d8789f" kindref="member">m_layoutElement</ref><sp/>=<sp/>{addedType};</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>arrayData.m_size<sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151" refid="classcon_1_1CBElement_a0b0f8f36f25e8269c6792a6990d76740_1a0b0f8f36f25e8269c6792a6990d76740" refkind="member"><highlight class="normal"><ref refid="classcon_1_1CBElement_a15d8885bf5657b191a9ea1bba92522c8_1a15d8885bf5657b191a9ea1bba92522c8" kindref="member">CBElement::CBElement</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacecon_a715a53e528376e9d85ea035a2db279a5_1a715a53e528376e9d85ea035a2db279a5" kindref="member">ElementType</ref><sp/>typeIn<sp/>)<sp/>cond_noex</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>:</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>m_type{typeIn}</highlight></codeline>
<codeline lineno="154"><highlight class="normal">{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assertions__console_8h_af3e11288cb5021b91949be5058816137_1af3e11288cb5021b91949be5058816137" kindref="member">ASSERT</ref>(<sp/>typeIn<sp/>!=<sp/><ref refid="namespacecon_a715a53e528376e9d85ea035a2db279a5_1a715a53e528376e9d85ea035a2db279a5aa0f2a80cc2e22505f9ff4d7920dd6ec6" kindref="member">Empty</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Element<sp/>type<sp/>is<sp/>already<sp/>filled!&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>typeIn<sp/>==<sp/><ref refid="namespacecon_a715a53e528376e9d85ea035a2db279a5_1a715a53e528376e9d85ea035a2db279a5aa75d3cc2c3da26872d3e1377c2c3f45f" kindref="member">Struct</ref><sp/>)</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_pExtraData<sp/>=<sp/>std::make_unique&lt;ExtraData::Struct&gt;();</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>typeIn<sp/>==<sp/><ref refid="namespacecon_a715a53e528376e9d85ea035a2db279a5_1a715a53e528376e9d85ea035a2db279a5a70f1151d1a31fb6a465cde6b89721e0d" kindref="member">Array</ref><sp/>)</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_pExtraData<sp/>=<sp/>std::make_unique&lt;ExtraData::Array&gt;();</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="164"><highlight class="normal">}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166" refid="classcon_1_1CBElement_ad1c5e26a1f0424cc00b81c4a0860f61b_1ad1c5e26a1f0424cc00b81c4a0860f61b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classcon_1_1CBElement_ad1c5e26a1f0424cc00b81c4a0860f61b_1ad1c5e26a1f0424cc00b81c4a0860f61b" kindref="member">CBElement::commit</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>offsetIn<sp/>)<sp/>cond_noex</highlight></codeline>
<codeline lineno="167"><highlight class="normal">{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(<sp/>m_type<sp/>)</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>X(<sp/>el<sp/>)<sp/>case<sp/>el:<sp/>\</highlight></codeline>
<codeline lineno="171"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_offset<sp/>=<sp/>advanceIfCrossesBoundary(<sp/>offsetIn,<sp/>\</highlight></codeline>
<codeline lineno="172"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ElementProperties&lt;el&gt;::hlslSize<sp/>);<sp/>\</highlight></codeline>
<codeline lineno="173"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>*m_offset<sp/>+<sp/>ElementProperties&lt;el&gt;::hlslSize;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="dynamic__constant__buffer_8h_a36024b6e30a67d227f4a2c898167f20b_1a36024b6e30a67d227f4a2c898167f20b" kindref="member">CB_LEAF_TYPES</ref></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>X</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacecon_a715a53e528376e9d85ea035a2db279a5_1a715a53e528376e9d85ea035a2db279a5aa75d3cc2c3da26872d3e1377c2c3f45f" kindref="member">Struct</ref>:</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>commitStruct(<sp/>offsetIn<sp/>);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacecon_a715a53e528376e9d85ea035a2db279a5_1a715a53e528376e9d85ea035a2db279a5a70f1151d1a31fb6a465cde6b89721e0d" kindref="member">Array</ref>:</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>commitArray(<sp/>offsetIn<sp/>);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions__console_8h_af3e11288cb5021b91949be5058816137_1af3e11288cb5021b91949be5058816137" kindref="member">ASSERT</ref>(<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Committing<sp/>CBElement<sp/>error.<sp/>Bad<sp/>layout.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0u;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal">}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186" refid="classcon_1_1CBElement_a8aaf2878bfbd36368d13f7d4bf6e4805_1a8aaf2878bfbd36368d13f7d4bf6e4805" refkind="member"><highlight class="normal">std::string<sp/><ref refid="classcon_1_1CBElement_a8aaf2878bfbd36368d13f7d4bf6e4805_1a8aaf2878bfbd36368d13f7d4bf6e4805" kindref="member">CBElement::getSignatureForStruct</ref>()<sp/>const<sp/>cond_noex</highlight></codeline>
<codeline lineno="187"><highlight class="normal">{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std::string_literals;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sig<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;St{&quot;</highlight><highlight class="normal">s;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;el<sp/>:<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="structcon_1_1ExtraData_1_1Struct" kindref="compound">ExtraData::Struct</ref>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>*m_pExtraData<sp/>).<ref refid="structcon_1_1ExtraData_1_1Struct_a68097dc05fa936af9fa1fd52e208c22f_1a68097dc05fa936af9fa1fd52e208c22f" kindref="member">m_layoutElements</ref><sp/>)</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sig<sp/>+=<sp/>el.first<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal">s<sp/>+<sp/>el.second.calcSignature()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;;&quot;</highlight><highlight class="normal">s;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>sig<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;}&quot;</highlight><highlight class="normal">s;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sig;</highlight></codeline>
<codeline lineno="196"><highlight class="normal">}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198" refid="classcon_1_1CBElement_aec507d5cedb307bae9264071d6637060_1aec507d5cedb307bae9264071d6637060" refkind="member"><highlight class="normal">std::string<sp/><ref refid="classcon_1_1CBElement_aec507d5cedb307bae9264071d6637060_1aec507d5cedb307bae9264071d6637060" kindref="member">CBElement::calcSignatureForArray</ref>()<sp/>const<sp/>cond_noex</highlight></codeline>
<codeline lineno="199"><highlight class="normal">{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std::string_literals;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;data<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="structcon_1_1ExtraData_1_1Array" kindref="compound">ExtraData::Array</ref>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>*m_pExtraData<sp/>);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Ar:&quot;</highlight><highlight class="normal">s</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>std::to_string(<sp/>data.m_size<sp/>)</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;{&quot;</highlight><highlight class="normal">s</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>data.<ref refid="structcon_1_1ExtraData_1_1Array_a3164eb088b343aeed0ad113b48d8789f_1a3164eb088b343aeed0ad113b48d8789f" kindref="member">m_layoutElement</ref>-&gt;calcSignature()</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/></highlight><highlight class="stringliteral">&quot;}&quot;</highlight><highlight class="normal">s;</highlight></codeline>
<codeline lineno="207"><highlight class="normal">}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209" refid="classcon_1_1CBElement_afe4c1a6fc881c66a02892246305f579d_1afe4c1a6fc881c66a02892246305f579d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classcon_1_1CBElement_afe4c1a6fc881c66a02892246305f579d_1afe4c1a6fc881c66a02892246305f579d" kindref="member">CBElement::commitStruct</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>offsetIn<sp/>)</highlight></codeline>
<codeline lineno="210"><highlight class="normal">{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;data<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="structcon_1_1ExtraData_1_1Struct" kindref="compound">ExtraData::Struct</ref>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>*m_pExtraData<sp/>);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assertions__console_8h_af3e11288cb5021b91949be5058816137_1af3e11288cb5021b91949be5058816137" kindref="member">ASSERT</ref>(<sp/>data.m_layoutElements.size()<sp/>!=<sp/>0u,<sp/></highlight><highlight class="stringliteral">&quot;Struct<sp/>inner<sp/>elements<sp/>have<sp/>not<sp/>been<sp/>committed<sp/>yet!&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcon_1_1CBElement_a4331e8b8e88042cc3f31d6c211905cf6_1a4331e8b8e88042cc3f31d6c211905cf6" kindref="member">m_offset</ref><sp/>=<sp/><ref refid="classcon_1_1CBElement_a660664a976c007e801542806637b36d5_1a660664a976c007e801542806637b36d5" kindref="member">advanceToBoundary</ref>(<sp/>offsetIn<sp/>);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>offsetNext<sp/>=<sp/>*<ref refid="classcon_1_1CBElement_a4331e8b8e88042cc3f31d6c211905cf6_1a4331e8b8e88042cc3f31d6c211905cf6" kindref="member">m_offset</ref>;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;el<sp/>:<sp/>data.m_layoutElements<sp/>)</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offsetNext<sp/>=<sp/>el.second.commit(<sp/>offsetNext<sp/>);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>offsetNext;</highlight></codeline>
<codeline lineno="220"><highlight class="normal">}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222" refid="classcon_1_1CBElement_aa0637d334183629490387108aa049da6_1aa0637d334183629490387108aa049da6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classcon_1_1CBElement_aa0637d334183629490387108aa049da6_1aa0637d334183629490387108aa049da6" kindref="member">CBElement::commitArray</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>offsetIn<sp/>)</highlight></codeline>
<codeline lineno="223"><highlight class="normal">{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;data<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="structcon_1_1ExtraData_1_1Array" kindref="compound">ExtraData::Array</ref>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>*m_pExtraData<sp/>);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assertions__console_8h_af3e11288cb5021b91949be5058816137_1af3e11288cb5021b91949be5058816137" kindref="member">ASSERT</ref>(<sp/>data.m_size<sp/>!=<sp/>0u,<sp/></highlight><highlight class="stringliteral">&quot;Array<sp/>size<sp/>is<sp/>0?<sp/>WTF<sp/>error!&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcon_1_1CBElement_a4331e8b8e88042cc3f31d6c211905cf6_1a4331e8b8e88042cc3f31d6c211905cf6" kindref="member">m_offset</ref><sp/>=<sp/><ref refid="classcon_1_1CBElement_a660664a976c007e801542806637b36d5_1a660664a976c007e801542806637b36d5" kindref="member">advanceToBoundary</ref>(<sp/>offsetIn<sp/>);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>data.m_layoutElement-&gt;commit(<sp/>*<ref refid="classcon_1_1CBElement_a4331e8b8e88042cc3f31d6c211905cf6_1a4331e8b8e88042cc3f31d6c211905cf6" kindref="member">m_offset</ref><sp/>);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>data.m_elementSize<sp/>=<sp/><ref refid="classcon_1_1CBElement_a660664a976c007e801542806637b36d5_1a660664a976c007e801542806637b36d5" kindref="member">CBElement::advanceToBoundary</ref>(<sp/>data.m_layoutElement-&gt;getSizeInBytes()<sp/>);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classcon_1_1CBElement_a5f530e1452487417567ea1bbdb28c07e_1a5f530e1452487417567ea1bbdb28c07e" kindref="member">getOffsetEnd</ref>();</highlight></codeline>
<codeline lineno="230"><highlight class="normal">}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232" refid="classcon_1_1CBElement_aa660d68d6a37b667305ad93931e21dc8_1aa660d68d6a37b667305ad93931e21dc8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classcon_1_1CBElement_aa660d68d6a37b667305ad93931e21dc8_1aa660d68d6a37b667305ad93931e21dc8" kindref="member">CBElement::doesCrossBoundary</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>offset,</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal">{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>end<sp/>=<sp/>offset<sp/>+<sp/>size;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pageStart<sp/>=<sp/>offset<sp/>/<sp/>16u;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pageEnd<sp/>=<sp/>end<sp/>/<sp/>16u;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assertions__console_8h_af3e11288cb5021b91949be5058816137_1af3e11288cb5021b91949be5058816137" kindref="member">ASSERT</ref>(<sp/>pageEnd<sp/>&gt;=<sp/>pageStart,<sp/></highlight><highlight class="stringliteral">&quot;Wrong<sp/>sizes!&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>pageStart<sp/>!=<sp/>pageEnd<sp/>&amp;&amp;<sp/>end<sp/>%<sp/>16<sp/>!=<sp/>0u<sp/>)<sp/>||<sp/>size<sp/>&gt;<sp/>16u;</highlight></codeline>
<codeline lineno="240"><highlight class="normal">}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242" refid="classcon_1_1CBElement_abeb8a1332b29412bb8020bf4d1e3aba6_1abeb8a1332b29412bb8020bf4d1e3aba6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classcon_1_1CBElement_abeb8a1332b29412bb8020bf4d1e3aba6_1abeb8a1332b29412bb8020bf4d1e3aba6" kindref="member">CBElement::advanceIfCrossesBoundary</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>offset,</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal">{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>doesCrossBoundary(<sp/>offset,<sp/>size<sp/>)<sp/>?</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>advanceToBoundary(<sp/>offset<sp/>)<sp/>:</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset;</highlight></codeline>
<codeline lineno="248"><highlight class="normal">}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250" refid="classcon_1_1CBElement_a660664a976c007e801542806637b36d5_1a660664a976c007e801542806637b36d5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classcon_1_1CBElement_a660664a976c007e801542806637b36d5_1a660664a976c007e801542806637b36d5" kindref="member">CBElement::advanceToBoundary</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>offset<sp/>)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal">{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>offset<sp/>+<sp/>(<sp/>16u<sp/>-<sp/>offset<sp/>%<sp/>16u<sp/>)<sp/>%<sp/>16u;</highlight></codeline>
<codeline lineno="253"><highlight class="normal">}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255" refid="classcon_1_1CBElement_ab9061a1808f74ab485346d776425a9ac_1ab9061a1808f74ab485346d776425a9ac" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classcon_1_1CBElement_ab9061a1808f74ab485346d776425a9ac_1ab9061a1808f74ab485346d776425a9ac" kindref="member">CBElement::validateMemberName</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;name<sp/>)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal">{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>symbols<sp/>can<sp/>contain<sp/>alphanumeric<sp/>and<sp/>underscore,<sp/>must<sp/>not<sp/>start<sp/>with<sp/>digit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!name.empty()</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>!std::isdigit(<sp/>name.front()<sp/>)</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>std::all_of(<sp/>name.begin(),<sp/>name.end(),</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c<sp/>)</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>std::isalnum(<sp/>c<sp/>)<sp/>||<sp/>c<sp/>==<sp/></highlight><highlight class="stringliteral">&apos;_&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>);</highlight></codeline>
<codeline lineno="265"><highlight class="normal">}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="comment">//<sp/>CBLayout</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269" refid="classcon_1_1CBLayout_a9b04357032146c78e74cce1e9843a788_1a9b04357032146c78e74cce1e9843a788" refkind="member"><highlight class="normal"><ref refid="classcon_1_1CBLayout_a9b04357032146c78e74cce1e9843a788_1a9b04357032146c78e74cce1e9843a788" kindref="member">CBLayout::CBLayout</ref>(<sp/>std::shared_ptr&lt;CBElement&gt;<sp/>pRoot<sp/>)<sp/>noexcept</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>:</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>m_pLayoutRoot{std::move(<sp/>pRoot<sp/>)}</highlight></codeline>
<codeline lineno="272"><highlight class="normal">{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal">}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276" refid="classcon_1_1CBLayout_a38fe5d51ff565b2f6089861086125341_1a38fe5d51ff565b2f6089861086125341" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classcon_1_1CBLayout_a38fe5d51ff565b2f6089861086125341_1a38fe5d51ff565b2f6089861086125341" kindref="member">CBLayout::getSizeInBytes</ref>()<sp/>const<sp/>noexcept</highlight></codeline>
<codeline lineno="277"><highlight class="normal">{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classcon_1_1CBLayout_a0b1d411cd40cd4aed65e330a385a03f2_1a0b1d411cd40cd4aed65e330a385a03f2" kindref="member">m_pLayoutRoot</ref>-&gt;getSizeInBytes();</highlight></codeline>
<codeline lineno="279"><highlight class="normal">}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281" refid="classcon_1_1CBLayout_ad0f25a176e697cb4a7c8a2bc938ea909_1ad0f25a176e697cb4a7c8a2bc938ea909" refkind="member"><highlight class="normal">std::string<sp/><ref refid="classcon_1_1CBLayout_ad0f25a176e697cb4a7c8a2bc938ea909_1ad0f25a176e697cb4a7c8a2bc938ea909" kindref="member">CBLayout::calcSignature</ref>()<sp/>const<sp/>cond_noex</highlight></codeline>
<codeline lineno="282"><highlight class="normal">{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classcon_1_1CBLayout_a0b1d411cd40cd4aed65e330a385a03f2_1a0b1d411cd40cd4aed65e330a385a03f2" kindref="member">m_pLayoutRoot</ref>-&gt;calcSignature();</highlight></codeline>
<codeline lineno="284"><highlight class="normal">}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="comment">//<sp/>RawLayout</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288" refid="classcon_1_1RawLayout_a34bf6b8f99c3d029c6af8c81cd50d454_1a34bf6b8f99c3d029c6af8c81cd50d454" refkind="member"><highlight class="normal"><ref refid="classcon_1_1RawLayout_a34bf6b8f99c3d029c6af8c81cd50d454_1a34bf6b8f99c3d029c6af8c81cd50d454" kindref="member">RawLayout::RawLayout</ref>()<sp/>noexcept</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>:</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcon_1_1CBLayout" kindref="compound">CBLayout</ref>{std::shared_ptr&lt;CBElement&gt;{</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classcon_1_1CBElement" kindref="compound">CBElement</ref>(<sp/><ref refid="namespacecon_a715a53e528376e9d85ea035a2db279a5_1a715a53e528376e9d85ea035a2db279a5aa75d3cc2c3da26872d3e1377c2c3f45f" kindref="member">Struct</ref><sp/>)}}</highlight></codeline>
<codeline lineno="291"><highlight class="normal">{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal">}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295" refid="classcon_1_1RawLayout_af98b51f5c4279ced1927a1953430be8b_1af98b51f5c4279ced1927a1953430be8b" refkind="member"><highlight class="normal"><ref refid="classcon_1_1CBElement" kindref="compound">CBElement</ref>&amp;<sp/><ref refid="classcon_1_1RawLayout_af98b51f5c4279ced1927a1953430be8b_1af98b51f5c4279ced1927a1953430be8b" kindref="member">RawLayout::operator[]</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;key<sp/>)<sp/>cond_noex</highlight></codeline>
<codeline lineno="296"><highlight class="normal">{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>*m_pLayoutRoot<sp/>)[key];</highlight></codeline>
<codeline lineno="298"><highlight class="normal">}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300" refid="classcon_1_1RawLayout_aa73c4eddf4e7b53a1bf873bc89f0044e_1aa73c4eddf4e7b53a1bf873bc89f0044e" refkind="member"><highlight class="normal">std::shared_ptr&lt;CBElement&gt;<sp/><ref refid="classcon_1_1RawLayout_aa73c4eddf4e7b53a1bf873bc89f0044e_1aa73c4eddf4e7b53a1bf873bc89f0044e" kindref="member">RawLayout::cookLayout</ref>()<sp/>noexcept</highlight></codeline>
<codeline lineno="301"><highlight class="normal">{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>temp<sp/>=<sp/>std::move(<sp/><ref refid="classcon_1_1CBLayout_a0b1d411cd40cd4aed65e330a385a03f2_1a0b1d411cd40cd4aed65e330a385a03f2" kindref="member">m_pLayoutRoot</ref><sp/>);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>temp-&gt;commit(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/><ref refid="classcon_1_1RawLayout_a34bf6b8f99c3d029c6af8c81cd50d454_1a34bf6b8f99c3d029c6af8c81cd50d454" kindref="member">RawLayout</ref>();</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::move(<sp/>temp<sp/>);</highlight></codeline>
<codeline lineno="306"><highlight class="normal">}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308" refid="classcon_1_1RawLayout_acc57850a3374dae3395727d4ef902d7c_1acc57850a3374dae3395727d4ef902d7c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcon_1_1RawLayout_acc57850a3374dae3395727d4ef902d7c_1acc57850a3374dae3395727d4ef902d7c" kindref="member">RawLayout::clear</ref>()<sp/>noexcept</highlight></codeline>
<codeline lineno="309"><highlight class="normal">{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/><ref refid="classcon_1_1RawLayout_a34bf6b8f99c3d029c6af8c81cd50d454_1a34bf6b8f99c3d029c6af8c81cd50d454" kindref="member">RawLayout</ref>();</highlight></codeline>
<codeline lineno="311"><highlight class="normal">}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="comment">//<sp/>CookedLayout</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315" refid="classcon_1_1CookedLayout_a9f8a9a44e6b46194f1d2f2f82183a40e_1a9f8a9a44e6b46194f1d2f2f82183a40e" refkind="member"><highlight class="normal"><ref refid="classcon_1_1CookedLayout_a9f8a9a44e6b46194f1d2f2f82183a40e_1a9f8a9a44e6b46194f1d2f2f82183a40e" kindref="member">CookedLayout::CookedLayout</ref>(<sp/>std::shared_ptr&lt;CBElement&gt;<sp/>pRoot<sp/>)<sp/>noexcept</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>:</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcon_1_1CBLayout" kindref="compound">CBLayout</ref>(std::move(<sp/>pRoot<sp/>))</highlight></codeline>
<codeline lineno="318"><highlight class="normal">{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal">}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322" refid="classcon_1_1CookedLayout_a2098dd9315a3d69a99cec5ff847f382c_1a2098dd9315a3d69a99cec5ff847f382c" refkind="member"><highlight class="normal">std::shared_ptr&lt;CBElement&gt;<sp/><ref refid="classcon_1_1CookedLayout_a2098dd9315a3d69a99cec5ff847f382c_1a2098dd9315a3d69a99cec5ff847f382c" kindref="member">CookedLayout::relinquishRoot</ref>()<sp/>noexcept</highlight></codeline>
<codeline lineno="323"><highlight class="normal">{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::move(<sp/><ref refid="classcon_1_1CBLayout_a0b1d411cd40cd4aed65e330a385a03f2_1a0b1d411cd40cd4aed65e330a385a03f2" kindref="member">m_pLayoutRoot</ref><sp/>);</highlight></codeline>
<codeline lineno="325"><highlight class="normal">}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327" refid="classcon_1_1CookedLayout_a63181de6561e0352754e70caa846a317_1a63181de6561e0352754e70caa846a317" refkind="member"><highlight class="normal">std::shared_ptr&lt;CBElement&gt;<sp/><ref refid="classcon_1_1CookedLayout_a63181de6561e0352754e70caa846a317_1a63181de6561e0352754e70caa846a317" kindref="member">CookedLayout::shareRootElement</ref>()<sp/>const<sp/>noexcept</highlight></codeline>
<codeline lineno="328"><highlight class="normal">{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classcon_1_1CBLayout_a0b1d411cd40cd4aed65e330a385a03f2_1a0b1d411cd40cd4aed65e330a385a03f2" kindref="member">m_pLayoutRoot</ref>;</highlight></codeline>
<codeline lineno="330"><highlight class="normal">}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332" refid="classcon_1_1CookedLayout_a90482e087f47f63b9192b95aa65708aa_1a90482e087f47f63b9192b95aa65708aa" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classcon_1_1CBElement" kindref="compound">CBElement</ref>&amp;<sp/><ref refid="classcon_1_1CookedLayout_a90482e087f47f63b9192b95aa65708aa_1a90482e087f47f63b9192b95aa65708aa" kindref="member">CookedLayout::operator[]</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;key<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cond_noex</highlight></codeline>
<codeline lineno="333"><highlight class="normal">{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*m_pLayoutRoot)[key];</highlight></codeline>
<codeline lineno="335"><highlight class="normal">}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="comment">//<sp/>CBElementConstView</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339" refid="classcon_1_1CBElementConstView_a6ec6cf0ae7f6da181f4ccf2a58d0357a_1a6ec6cf0ae7f6da181f4ccf2a58d0357a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classcon_1_1CBElementConstView_a6ec6cf0ae7f6da181f4ccf2a58d0357a_1a6ec6cf0ae7f6da181f4ccf2a58d0357a" kindref="member">CBElementConstView::isValid</ref>()<sp/>const<sp/>noexcept</highlight></codeline>
<codeline lineno="340"><highlight class="normal">{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classcon_1_1CBElementConstView_a6da4bed7fd7719d277e8bad9b8951268_1a6da4bed7fd7719d277e8bad9b8951268" kindref="member">pLayout</ref>-&gt;<ref refid="classcon_1_1CBElement_a3c31c032036577e4ff120b9df5363877_1a3c31c032036577e4ff120b9df5363877" kindref="member">isValid</ref>();</highlight></codeline>
<codeline lineno="342"><highlight class="normal">}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344" refid="classcon_1_1CBElementConstView_a844290d59280911760030eaa2cfec0e1_1a844290d59280911760030eaa2cfec0e1" refkind="member"><highlight class="normal"><ref refid="classcon_1_1CBElementConstView" kindref="compound">CBElementConstView</ref><sp/><ref refid="classcon_1_1CBElementConstView_a844290d59280911760030eaa2cfec0e1_1a844290d59280911760030eaa2cfec0e1" kindref="member">CBElementConstView::operator[]</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;key<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cond_noex</highlight></codeline>
<codeline lineno="345"><highlight class="normal">{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{&amp;(*pLayout)[key],<sp/>m_p,<sp/>m_arrayOffset};</highlight></codeline>
<codeline lineno="347"><highlight class="normal">}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349" refid="classcon_1_1CBElementConstView_a912de1ed3762cb7953a0e8e8a89efd4d_1a912de1ed3762cb7953a0e8e8a89efd4d" refkind="member"><highlight class="normal"><ref refid="classcon_1_1CBElementConstView" kindref="compound">CBElementConstView</ref><sp/><ref refid="classcon_1_1CBElementConstView_a844290d59280911760030eaa2cfec0e1_1a844290d59280911760030eaa2cfec0e1" kindref="member">CBElementConstView::operator[]</ref>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cond_noex</highlight></codeline>
<codeline lineno="350"><highlight class="normal">{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>indexingData<sp/>=<sp/>pLayout-&gt;calculateArrayIndexingOffset(<sp/>m_arrayOffset,<sp/>index<sp/>);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{indexingData.second,<sp/>m_p,<sp/>indexingData.first};</highlight></codeline>
<codeline lineno="353"><highlight class="normal">}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355" refid="classcon_1_1CBElementConstView_aab1438cf73e4b125b7102b84ffad2655_1aab1438cf73e4b125b7102b84ffad2655" refkind="member"><highlight class="normal"><ref refid="classcon_1_1CBElementConstView_1_1Ptr" kindref="compound">CBElementConstView::Ptr</ref><sp/><ref refid="classcon_1_1CBElementConstView_aab1438cf73e4b125b7102b84ffad2655_1aab1438cf73e4b125b7102b84ffad2655" kindref="member">CBElementConstView::operator&amp;</ref>()<sp/>const<sp/>cond_noex</highlight></codeline>
<codeline lineno="356"><highlight class="normal">{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classcon_1_1CBElementConstView_1_1Ptr" kindref="compound">Ptr</ref>{</highlight><highlight class="keyword">this</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="358"><highlight class="normal">}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360" refid="classcon_1_1CBElementConstView_a16746e814709c72b7f9c1038f912dc2c_1a16746e814709c72b7f9c1038f912dc2c" refkind="member"><highlight class="normal"><ref refid="classcon_1_1CBElementConstView_a16746e814709c72b7f9c1038f912dc2c_1a16746e814709c72b7f9c1038f912dc2c" kindref="member">CBElementConstView::CBElementConstView</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classcon_1_1CBElement" kindref="compound">CBElement</ref><sp/>*pLayout,</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pBytes,</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>offset<sp/>)<sp/>noexcept</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>:</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>m_arrayOffset(offset),</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>pLayout(pLayout),</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>m_p(pBytes)</highlight></codeline>
<codeline lineno="367"><highlight class="normal">{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal">}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371" refid="classcon_1_1CBElementConstView_1_1Ptr_ab3ddfb4814234faed58b0e2dc28a6492_1ab3ddfb4814234faed58b0e2dc28a6492" refkind="member"><highlight class="normal"><ref refid="classcon_1_1CBElementConstView_1_1Ptr_ab3ddfb4814234faed58b0e2dc28a6492_1ab3ddfb4814234faed58b0e2dc28a6492" kindref="member">CBElementConstView::Ptr::Ptr</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classcon_1_1CBElementConstView" kindref="compound">CBElementConstView</ref><sp/>*ref<sp/>)<sp/>noexcept</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>:</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>p(ref)</highlight></codeline>
<codeline lineno="374"><highlight class="normal">{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal">}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="comment">//<sp/>CBElementView</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380" refid="classcon_1_1CBElementView_adeaaf1ba2c9990ca83eb435be49d5033_1adeaaf1ba2c9990ca83eb435be49d5033" refkind="member"><highlight class="normal">CBElementView::operator<sp/><ref refid="classcon_1_1CBElementConstView" kindref="compound">CBElementConstView</ref>()<sp/>const<sp/>noexcept</highlight></codeline>
<codeline lineno="381"><highlight class="normal">{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{m_pLayout,<sp/>m_p,<sp/>m_arrayOffset};</highlight></codeline>
<codeline lineno="383"><highlight class="normal">}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385" refid="classcon_1_1CBElementView_ae9e73eaac96101a36682721aa5e6be15_1ae9e73eaac96101a36682721aa5e6be15" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classcon_1_1CBElementView_ae9e73eaac96101a36682721aa5e6be15_1ae9e73eaac96101a36682721aa5e6be15" kindref="member">CBElementView::isValid</ref>()<sp/>const<sp/>noexcept</highlight></codeline>
<codeline lineno="386"><highlight class="normal">{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classcon_1_1CBElementView_a155c48db0b2b347ee066305db3131c19_1a155c48db0b2b347ee066305db3131c19" kindref="member">m_pLayout</ref>-&gt;<ref refid="classcon_1_1CBElement_a3c31c032036577e4ff120b9df5363877_1a3c31c032036577e4ff120b9df5363877" kindref="member">isValid</ref>();</highlight></codeline>
<codeline lineno="388"><highlight class="normal">}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390" refid="classcon_1_1CBElementView_ad961e7a602ba84e38e3894afd9a28653_1ad961e7a602ba84e38e3894afd9a28653" refkind="member"><highlight class="normal"><ref refid="classcon_1_1CBElementView" kindref="compound">CBElementView</ref><sp/><ref refid="classcon_1_1CBElementView_ad961e7a602ba84e38e3894afd9a28653_1ad961e7a602ba84e38e3894afd9a28653" kindref="member">CBElementView::operator[]</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;key<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cond_noex</highlight></codeline>
<codeline lineno="391"><highlight class="normal">{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{&amp;(*m_pLayout)[key],<sp/>m_p,<sp/>m_arrayOffset};</highlight></codeline>
<codeline lineno="393"><highlight class="normal">}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395" refid="classcon_1_1CBElementView_a5c7c3611fe5322bb03d282929d8d0ca9_1a5c7c3611fe5322bb03d282929d8d0ca9" refkind="member"><highlight class="normal"><ref refid="classcon_1_1CBElementView" kindref="compound">CBElementView</ref><sp/><ref refid="classcon_1_1CBElementView_ad961e7a602ba84e38e3894afd9a28653_1ad961e7a602ba84e38e3894afd9a28653" kindref="member">CBElementView::operator[]</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cond_noex</highlight></codeline>
<codeline lineno="396"><highlight class="normal">{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>indexingData<sp/>=<sp/>m_pLayout-&gt;calculateArrayIndexingOffset(<sp/>m_arrayOffset,<sp/>index<sp/>);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{indexingData.second,<sp/>m_p,<sp/>indexingData.first};</highlight></codeline>
<codeline lineno="399"><highlight class="normal">}</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401" refid="classcon_1_1CBElementView_a81c656fe54afc1aacab0f55c98df80fa_1a81c656fe54afc1aacab0f55c98df80fa" refkind="member"><highlight class="normal"><ref refid="classcon_1_1CBElementView_1_1Ptr" kindref="compound">CBElementView::Ptr</ref><sp/><ref refid="classcon_1_1CBElementView_a81c656fe54afc1aacab0f55c98df80fa_1a81c656fe54afc1aacab0f55c98df80fa" kindref="member">CBElementView::operator&amp;</ref>()<sp/>const<sp/>cond_noex</highlight></codeline>
<codeline lineno="402"><highlight class="normal">{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classcon_1_1CBElementView_1_1Ptr" kindref="compound">Ptr</ref>{</highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><ref refid="classcon_1_1CBElementView" kindref="compound">CBElementView</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>this<sp/>)};</highlight></codeline>
<codeline lineno="404"><highlight class="normal">}</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406" refid="classcon_1_1CBElementView_ad94aab709fbcb4082280d4011c6825dd_1ad94aab709fbcb4082280d4011c6825dd" refkind="member"><highlight class="normal"><ref refid="classcon_1_1CBElementView_ad94aab709fbcb4082280d4011c6825dd_1ad94aab709fbcb4082280d4011c6825dd" kindref="member">CBElementView::CBElementView</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classcon_1_1CBElement" kindref="compound">CBElement</ref><sp/>*pLayout,</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pBytes,</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>offset<sp/>)<sp/>noexcept</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>:</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>m_arrayOffset(offset),</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>m_pLayout(pLayout),</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>m_p(pBytes)</highlight></codeline>
<codeline lineno="413"><highlight class="normal">{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal">}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417" refid="classcon_1_1CBElementView_1_1Ptr_acc4f1e96f0cedbe584900d5e5f98a5c8_1acc4f1e96f0cedbe584900d5e5f98a5c8" refkind="member"><highlight class="normal"><ref refid="classcon_1_1CBElementView_1_1Ptr_acc4f1e96f0cedbe584900d5e5f98a5c8_1acc4f1e96f0cedbe584900d5e5f98a5c8" kindref="member">CBElementView::Ptr::Ptr</ref>(<sp/><ref refid="classcon_1_1CBElementView" kindref="compound">CBElementView</ref><sp/>*ref<sp/>)<sp/>noexcept</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>:</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>p(ref)</highlight></codeline>
<codeline lineno="420"><highlight class="normal">{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal">}</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="comment">//<sp/>LayoutMap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426" refid="classcon_1_1LayoutMap_a1c3854382a84e6b2f510aadd916d8ce4_1a1c3854382a84e6b2f510aadd916d8ce4" refkind="member"><highlight class="normal"><ref refid="classcon_1_1CookedLayout" kindref="compound">con::CookedLayout</ref><sp/><ref refid="classcon_1_1LayoutMap_a1c3854382a84e6b2f510aadd916d8ce4_1a1c3854382a84e6b2f510aadd916d8ce4" kindref="member">LayoutMap::fetch</ref>(<sp/><ref refid="classcon_1_1RawLayout" kindref="compound">con::RawLayout</ref><sp/>&amp;&amp;cbLayout<sp/>)<sp/>cond_noex</highlight></codeline>
<codeline lineno="427"><highlight class="normal">{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>sig<sp/>=<sp/>cbLayout.calcSignature();</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;map<sp/>=<sp/>getInstance().m_map;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>map.find(<sp/>sig<sp/>);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>identical<sp/>layout<sp/>already<sp/>exists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>it<sp/>!=<sp/>map.end()<sp/>)</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>input<sp/>layout<sp/>is<sp/>expected<sp/>to<sp/>be<sp/>cleared<sp/>after<sp/>fetch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cbLayout.clear();</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{it-&gt;second};</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>otherwise<sp/>add<sp/>layout<sp/>root<sp/>element<sp/>to<sp/>map</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>map.insert(<sp/>{std::move(<sp/>sig<sp/>),<sp/>cbLayout.cookLayout()}<sp/>);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ASSERT(<sp/>result.second,<sp/>&quot;Root<sp/>layout<sp/>is<sp/>null!&quot;<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>layout<sp/>with<sp/>additional<sp/>reference<sp/>to<sp/>root</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{result.first-&gt;second};</highlight></codeline>
<codeline lineno="443"><highlight class="normal">}</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445" refid="classcon_1_1LayoutMap_a205d110d9c3e159c3e79ac1bcb3532da_1a205d110d9c3e159c3e79ac1bcb3532da" refkind="member"><highlight class="normal"><ref refid="classcon_1_1LayoutMap" kindref="compound">LayoutMap</ref>&amp;<sp/><ref refid="classcon_1_1LayoutMap_a205d110d9c3e159c3e79ac1bcb3532da_1a205d110d9c3e159c3e79ac1bcb3532da" kindref="member">LayoutMap::getInstance</ref>()<sp/>noexcept</highlight></codeline>
<codeline lineno="446"><highlight class="normal">{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classcon_1_1LayoutMap" kindref="compound">LayoutMap</ref><sp/>instance{};</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>instance;</highlight></codeline>
<codeline lineno="449"><highlight class="normal">}</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="comment">//<sp/>CBuffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453" refid="classcon_1_1CBuffer_a9087299fd88bab576c65e5c2df81e9dd_1a9087299fd88bab576c65e5c2df81e9dd" refkind="member"><highlight class="normal"><ref refid="classcon_1_1CBuffer_a9087299fd88bab576c65e5c2df81e9dd_1a9087299fd88bab576c65e5c2df81e9dd" kindref="member">CBuffer::CBuffer</ref>(<sp/><ref refid="classcon_1_1RawLayout" kindref="compound">RawLayout</ref><sp/>&amp;&amp;lay<sp/>)<sp/>cond_noex</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>:</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><ref refid="classcon_1_1CBuffer" kindref="compound">CBuffer</ref>{<ref refid="classcon_1_1LayoutMap_a1c3854382a84e6b2f510aadd916d8ce4_1a1c3854382a84e6b2f510aadd916d8ce4" kindref="member">LayoutMap::fetch</ref>(<sp/>std::move(<sp/>lay<sp/>)<sp/>)}</highlight></codeline>
<codeline lineno="456"><highlight class="normal">{</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal">}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460" refid="classcon_1_1CBuffer_ab8a2bbb4e0c2eef348680051b4e3f536_1ab8a2bbb4e0c2eef348680051b4e3f536" refkind="member"><highlight class="normal"><ref refid="classcon_1_1CBuffer_a9087299fd88bab576c65e5c2df81e9dd_1a9087299fd88bab576c65e5c2df81e9dd" kindref="member">CBuffer::CBuffer</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classcon_1_1CookedLayout" kindref="compound">CookedLayout</ref><sp/>&amp;lay<sp/>)<sp/>cond_noex</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>:</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>m_pLayoutRoot(lay.shareRootElement()),</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>m_buffer(m_pLayoutRoot-&gt;getOffsetEnd())</highlight></codeline>
<codeline lineno="464"><highlight class="normal">{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal">}</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468" refid="classcon_1_1CBuffer_a02924aeccb95b183321a5d3bebfda819_1a02924aeccb95b183321a5d3bebfda819" refkind="member"><highlight class="normal"><ref refid="classcon_1_1CBuffer_a9087299fd88bab576c65e5c2df81e9dd_1a9087299fd88bab576c65e5c2df81e9dd" kindref="member">CBuffer::CBuffer</ref>(<sp/><ref refid="classcon_1_1CookedLayout" kindref="compound">CookedLayout</ref><sp/>&amp;&amp;lay<sp/>)<sp/>cond_noex</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>:</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>m_pLayoutRoot(lay.relinquishRoot()),</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>m_buffer(m_pLayoutRoot-&gt;getOffsetEnd())</highlight></codeline>
<codeline lineno="472"><highlight class="normal">{</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal">}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476" refid="classcon_1_1CBuffer_a9a6b92055d7ec71594a7e89bd8bd3d7d_1a9a6b92055d7ec71594a7e89bd8bd3d7d" refkind="member"><highlight class="normal"><ref refid="classcon_1_1CBuffer_a9087299fd88bab576c65e5c2df81e9dd_1a9087299fd88bab576c65e5c2df81e9dd" kindref="member">CBuffer::CBuffer</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classcon_1_1CBuffer" kindref="compound">CBuffer</ref><sp/>&amp;rhs<sp/>)<sp/>noexcept</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>:</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/>m_pLayoutRoot(rhs.m_pLayoutRoot),</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>m_buffer(rhs.m_buffer)</highlight></codeline>
<codeline lineno="480"><highlight class="normal">{</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal">}</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning(<sp/>disable<sp/>:<sp/>4172<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485" refid="classcon_1_1CBuffer_a11ade6c9e75640cec81598b080683996_1a11ade6c9e75640cec81598b080683996" refkind="member"><highlight class="normal"><ref refid="classcon_1_1CBuffer" kindref="compound">CBuffer</ref>&amp;<sp/><ref refid="classcon_1_1CBuffer_a11ade6c9e75640cec81598b080683996_1a11ade6c9e75640cec81598b080683996" kindref="member">CBuffer::operator==</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classcon_1_1CBuffer" kindref="compound">CBuffer</ref><sp/>&amp;rhs<sp/>)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal">{</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcon_1_1CBuffer" kindref="compound">CBuffer</ref><sp/>tmp{rhs};</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="489"><highlight class="normal">}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning(<sp/>default<sp/>:<sp/>4172<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492" refid="classcon_1_1CBuffer_a7a7b7a79390beb654e99f63f43edee28_1a7a7b7a79390beb654e99f63f43edee28" refkind="member"><highlight class="normal"><ref refid="classcon_1_1CBuffer_a9087299fd88bab576c65e5c2df81e9dd_1a9087299fd88bab576c65e5c2df81e9dd" kindref="member">CBuffer::CBuffer</ref>(<sp/><ref refid="classcon_1_1CBuffer" kindref="compound">CBuffer</ref><sp/>&amp;&amp;rhs<sp/>)<sp/>noexcept</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>:</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>m_pLayoutRoot(std::move(<sp/>rhs.m_pLayoutRoot<sp/>)),</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>m_buffer(std::move(<sp/>rhs.m_buffer<sp/>))</highlight></codeline>
<codeline lineno="496"><highlight class="normal">{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/>rhs.<ref refid="classcon_1_1CBuffer_a5ecfa284966d4210f13d994a12281cda_1a5ecfa284966d4210f13d994a12281cda" kindref="member">m_pLayoutRoot</ref>.reset();</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>rhs.m_buffer.clear();</highlight></codeline>
<codeline lineno="499"><highlight class="normal">}</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501" refid="classcon_1_1CBuffer_a37ec6ef9e6f601ee541e7a42d51b1972_1a37ec6ef9e6f601ee541e7a42d51b1972" refkind="member"><highlight class="normal"><ref refid="classcon_1_1CBuffer" kindref="compound">CBuffer</ref>&amp;<sp/><ref refid="classcon_1_1CBuffer_a37ec6ef9e6f601ee541e7a42d51b1972_1a37ec6ef9e6f601ee541e7a42d51b1972" kindref="member">CBuffer::operator=</ref>(<sp/><ref refid="classcon_1_1CBuffer" kindref="compound">CBuffer</ref><sp/>&amp;&amp;rhs<sp/>)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal">{</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcon_1_1CBuffer" kindref="compound">CBuffer</ref><sp/>tmp{std::move(<sp/>rhs<sp/>)};</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>std::swap(<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>tmp<sp/>);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="506"><highlight class="normal">}</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508" refid="classcon_1_1CBuffer_aae7b9c1a51d54e3026ae8c67ba9583be_1aae7b9c1a51d54e3026ae8c67ba9583be" refkind="member"><highlight class="normal"><ref refid="classcon_1_1CBuffer_aae7b9c1a51d54e3026ae8c67ba9583be_1aae7b9c1a51d54e3026ae8c67ba9583be" kindref="member">CBuffer::~CBuffer</ref>()<sp/>noexcept</highlight></codeline>
<codeline lineno="509"><highlight class="normal">{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcon_1_1CBuffer_a5ecfa284966d4210f13d994a12281cda_1a5ecfa284966d4210f13d994a12281cda" kindref="member">m_pLayoutRoot</ref>.reset();</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcon_1_1CBuffer_a93c17d7a23341b5058734e6e8202d6a5_1a93c17d7a23341b5058734e6e8202d6a5" kindref="member">m_buffer</ref>.clear();</highlight></codeline>
<codeline lineno="512"><highlight class="normal">}</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515" refid="classcon_1_1CBuffer_ad81b180faf019ca7e3da617dc7eb2a85_1ad81b180faf019ca7e3da617dc7eb2a85" refkind="member"><highlight class="normal"><ref refid="classcon_1_1CBElementView" kindref="compound">CBElementView</ref><sp/><ref refid="classcon_1_1CBuffer_ad81b180faf019ca7e3da617dc7eb2a85_1ad81b180faf019ca7e3da617dc7eb2a85" kindref="member">CBuffer::operator[]</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;key<sp/>)<sp/>cond_noex</highlight></codeline>
<codeline lineno="516"><highlight class="normal">{</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>{&amp;(*m_pLayoutRoot)[key],<sp/>m_buffer.data(),<sp/>0u};</highlight></codeline>
<codeline lineno="518"><highlight class="normal">}</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520" refid="classcon_1_1CBuffer_acc163c2127739c4d17697dedb13982f8_1acc163c2127739c4d17697dedb13982f8" refkind="member"><highlight class="normal"><ref refid="classcon_1_1CBElementConstView" kindref="compound">CBElementConstView</ref><sp/><ref refid="classcon_1_1CBuffer_ad81b180faf019ca7e3da617dc7eb2a85_1ad81b180faf019ca7e3da617dc7eb2a85" kindref="member">CBuffer::operator[]</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;key<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cond_noex</highlight></codeline>
<codeline lineno="521"><highlight class="normal">{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><ref refid="classcon_1_1CBuffer" kindref="compound">CBuffer</ref>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>*this<sp/>)[key];</highlight></codeline>
<codeline lineno="523"><highlight class="normal">}</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525" refid="classcon_1_1CBuffer_a26a7a955de3e03646e833c252c9a01de_1a26a7a955de3e03646e833c252c9a01de" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="classcon_1_1CBuffer_a26a7a955de3e03646e833c252c9a01de_1a26a7a955de3e03646e833c252c9a01de" kindref="member">CBuffer::data</ref>()<sp/>const<sp/>noexcept</highlight></codeline>
<codeline lineno="526"><highlight class="normal">{</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classcon_1_1CBuffer_a93c17d7a23341b5058734e6e8202d6a5_1a93c17d7a23341b5058734e6e8202d6a5" kindref="member">m_buffer</ref>.data();</highlight></codeline>
<codeline lineno="528"><highlight class="normal">}</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530" refid="classcon_1_1CBuffer_ad701e6213cfa305f4556aa408e01b9a7_1ad701e6213cfa305f4556aa408e01b9a7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classcon_1_1CBuffer_ad701e6213cfa305f4556aa408e01b9a7_1ad701e6213cfa305f4556aa408e01b9a7" kindref="member">CBuffer::getSizeInBytes</ref>()<sp/>const<sp/>noexcept</highlight></codeline>
<codeline lineno="531"><highlight class="normal">{</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classcon_1_1CBuffer_a93c17d7a23341b5058734e6e8202d6a5_1a93c17d7a23341b5058734e6e8202d6a5" kindref="member">m_buffer</ref>.size();</highlight></codeline>
<codeline lineno="533"><highlight class="normal">}</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535" refid="classcon_1_1CBuffer_a2a30c70381d0caa697535aa139455b3f_1a2a30c70381d0caa697535aa139455b3f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classcon_1_1CBElement" kindref="compound">CBElement</ref>&amp;<sp/><ref refid="classcon_1_1CBuffer_a2a30c70381d0caa697535aa139455b3f_1a2a30c70381d0caa697535aa139455b3f" kindref="member">CBuffer::getRootElement</ref>()<sp/>const<sp/>noexcept</highlight></codeline>
<codeline lineno="536"><highlight class="normal">{</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*<ref refid="classcon_1_1CBuffer_a5ecfa284966d4210f13d994a12281cda_1a5ecfa284966d4210f13d994a12281cda" kindref="member">m_pLayoutRoot</ref>;</highlight></codeline>
<codeline lineno="538"><highlight class="normal">}</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540" refid="classcon_1_1CBuffer_afb7ac8e042c7d759a58ed3731b4ce295_1afb7ac8e042c7d759a58ed3731b4ce295" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcon_1_1CBuffer_afb7ac8e042c7d759a58ed3731b4ce295_1afb7ac8e042c7d759a58ed3731b4ce295" kindref="member">CBuffer::copyFrom</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classcon_1_1CBuffer" kindref="compound">CBuffer</ref><sp/>&amp;other<sp/>)<sp/>cond_noex</highlight></codeline>
<codeline lineno="541"><highlight class="normal">{</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assertions__console_8h_af3e11288cb5021b91949be5058816137_1af3e11288cb5021b91949be5058816137" kindref="member">ASSERT</ref>(<sp/>&amp;getRootElement()<sp/>==<sp/>&amp;other.getRootElement(),<sp/></highlight><highlight class="stringliteral">&quot;Incompatible<sp/>element<sp/>layouts!&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>std::copy(<sp/>other.m_buffer.begin(),<sp/>other.m_buffer.end(),<sp/>m_buffer.begin()<sp/>);</highlight></codeline>
<codeline lineno="544"><highlight class="normal">}</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546" refid="classcon_1_1CBuffer_a8408feac69a51d15ec6bc47656766cec_1a8408feac69a51d15ec6bc47656766cec" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcon_1_1CBuffer_a8408feac69a51d15ec6bc47656766cec_1a8408feac69a51d15ec6bc47656766cec" kindref="member">CBuffer::moveFrom</ref>(<sp/><ref refid="classcon_1_1CBuffer" kindref="compound">CBuffer</ref><sp/>&amp;other<sp/>)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal">{</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assertions__console_8h_af3e11288cb5021b91949be5058816137_1af3e11288cb5021b91949be5058816137" kindref="member">ASSERT</ref>(<sp/>&amp;getRootElement()<sp/>==<sp/>&amp;other.getRootElement(),<sp/></highlight><highlight class="stringliteral">&quot;Incompatible<sp/>element<sp/>layouts!&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/>std::move(<sp/>other.m_buffer.begin(),<sp/>other.m_buffer.end(),<sp/>m_buffer.begin()<sp/>);</highlight></codeline>
<codeline lineno="550"><highlight class="normal">}</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552" refid="classcon_1_1CBuffer_aedf1ab4ab2022c99bee4321c59b240bc_1aedf1ab4ab2022c99bee4321c59b240bc" refkind="member"><highlight class="normal">std::shared_ptr&lt;CBElement&gt;<sp/><ref refid="classcon_1_1CBuffer_aedf1ab4ab2022c99bee4321c59b240bc_1aedf1ab4ab2022c99bee4321c59b240bc" kindref="member">CBuffer::shareLayoutRoot</ref>()<sp/>const<sp/>noexcept</highlight></codeline>
<codeline lineno="553"><highlight class="normal">{</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classcon_1_1CBuffer_a5ecfa284966d4210f13d994a12281cda_1a5ecfa284966d4210f13d994a12281cda" kindref="member">m_pLayoutRoot</ref>;</highlight></codeline>
<codeline lineno="555"><highlight class="normal">}</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal">}</highlight><highlight class="comment">//namespace<sp/>con</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="src/dynamic_constant_buffer.cpp"/>
  </compounddef>
</doxygen>
