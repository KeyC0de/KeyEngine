<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="catch__test__main_8cpp" kind="file" language="C++">
    <compoundname>catch_test_main.cpp</compoundname>
    <includes local="yes">catch/catch.hpp</includes>
    <includes local="no">vector</includes>
    <incdepgraph>
      <node id="1">
        <label>src/catch_test_main.cpp</label>
        <link refid="catch__test__main_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>catch/catch.hpp</label>
      </node>
      <node id="3">
        <label>vector</label>
      </node>
    </incdepgraph>
    <sectiondef kind="define">
      <memberdef kind="define" id="catch__test__main_8cpp_a656eb5868e824d59f489f910db438420_1a656eb5868e824d59f489f910db438420" prot="public" static="no">
        <name>CATCH_CONFIG_MAIN</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/catch_test_main.cpp" line="1" column="9" bodyfile="src/catch_test_main.cpp" bodystart="1" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="catch__test__main_8cpp_aea62baaa1b97041829042603549ad2e1_1aea62baaa1b97041829042603549ad2e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int factorial</definition>
        <argsstring>(unsigned int number)</argsstring>
        <name>factorial</name>
        <param>
          <type>unsigned int</type>
          <declname>number</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/catch_test_main.cpp" line="6" column="14" bodyfile="src/catch_test_main.cpp" bodystart="6" bodyend="11"/>
        <referencedby refid="catch__test__main_8cpp_aea62baaa1b97041829042603549ad2e1_1aea62baaa1b97041829042603549ad2e1" compoundref="catch__test__main_8cpp" startline="6" endline="11">factorial</referencedby>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="catch__test__main_8cpp_a656eb5868e824d59f489f910db438420_1a656eb5868e824d59f489f910db438420" refkind="member"><highlight class="preprocessor">#define<sp/>CATCH_CONFIG_MAIN<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>catch<sp/>writes<sp/>its<sp/>own<sp/>main<sp/>using<sp/>this<sp/>define</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;catch/catch.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6" refid="catch__test__main_8cpp_aea62baaa1b97041829042603549ad2e1_1aea62baaa1b97041829042603549ad2e1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="catch__test__main_8cpp_aea62baaa1b97041829042603549ad2e1_1aea62baaa1b97041829042603549ad2e1" kindref="member">factorial</ref>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>number<sp/>)</highlight></codeline>
<codeline lineno="7"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>number<sp/>&lt;=<sp/>1<sp/>?</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>number<sp/>:</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="catch__test__main_8cpp_aea62baaa1b97041829042603549ad2e1_1aea62baaa1b97041829042603549ad2e1" kindref="member">factorial</ref>(<sp/>number<sp/>-<sp/>1<sp/>)<sp/>*<sp/>number;</highlight></codeline>
<codeline lineno="11"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>complete<sp/>ref:<sp/>https://github.com/catchorg/Catch2/blob/devel/docs/Readme.md#top</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">/*TEST_CASE(<sp/>&quot;Testing<sp/>deposit()&quot;<sp/>)</highlight></codeline>
<codeline lineno="16"><highlight class="comment">{</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/><sp/><sp/><sp/>BankAccount<sp/>ba{&quot;testUser&quot;};</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/><sp/><sp/><sp/>REQUIRE(<sp/>ba.deposit(<sp/>10.0000<sp/>)<sp/>==<sp/>true<sp/>);</highlight></codeline>
<codeline lineno="19"><highlight class="comment">}</highlight></codeline>
<codeline lineno="20"><highlight class="comment"></highlight></codeline>
<codeline lineno="21"><highlight class="comment">TEST_CASE(<sp/>&quot;Testing<sp/>widthdraw()&quot;<sp/>)</highlight></codeline>
<codeline lineno="22"><highlight class="comment">{</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/><sp/><sp/><sp/>BankAccount<sp/>ba{&quot;testUser&quot;};</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/><sp/><sp/><sp/>REQUIRE(<sp/>ba.withdraw(<sp/>10.0000<sp/>)<sp/>==<sp/>false<sp/>);</highlight></codeline>
<codeline lineno="25"><highlight class="comment">}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="28"><highlight class="comment">TEST_CASE(<sp/>&quot;testing<sp/>display()&quot;<sp/>)</highlight></codeline>
<codeline lineno="29"><highlight class="comment">{</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/><sp/><sp/><sp/>BankAccount<sp/>ba{&quot;testUser&quot;};</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/><sp/><sp/><sp/>REQUIRE(<sp/>ba.deposit(<sp/>50<sp/>)<sp/>==<sp/>true<sp/>);</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/><sp/><sp/><sp/>REQUIRE(<sp/>ba.getBalance()<sp/>==<sp/>50<sp/>);</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/><sp/><sp/><sp/>REQUIRE(<sp/>ba.withdraw(<sp/>20<sp/>)<sp/>==<sp/>true<sp/>);</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/><sp/><sp/><sp/>//REQUIRE(<sp/>ba.display()<sp/>==<sp/>&quot;Your<sp/>balance<sp/>is<sp/>$30.&quot;<sp/>);<sp/><sp/><sp/><sp/>//<sp/>failed</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/><sp/><sp/><sp/>REQUIRE(<sp/>ba.display()<sp/>==<sp/>&quot;Your<sp/>balance<sp/>is<sp/>$30.000000.&quot;<sp/>);</highlight></codeline>
<codeline lineno="36"><highlight class="comment">}</highlight></codeline>
<codeline lineno="37"><highlight class="comment"></highlight></codeline>
<codeline lineno="38"><highlight class="comment">TEST_CASE(<sp/>&quot;Factorials<sp/>are<sp/>computed&quot;,<sp/>&quot;[factorial]&quot;<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/><sp/><sp/><sp/>REQUIRE(<sp/>factorial(<sp/>1<sp/>)<sp/>==<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/><sp/><sp/><sp/>REQUIRE(<sp/>factorial(<sp/>2<sp/>)<sp/>==<sp/>2<sp/>);</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/><sp/><sp/><sp/>REQUIRE(<sp/>factorial(<sp/>3<sp/>)<sp/>==<sp/>6<sp/>);</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/><sp/><sp/><sp/>CHECK(<sp/>factorial(<sp/>10<sp/>)<sp/>==<sp/>3628800<sp/>);</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/><sp/><sp/><sp/>REQUIRE(<sp/>factorial(<sp/>10<sp/>)<sp/>==<sp/>3628800<sp/>);</highlight></codeline>
<codeline lineno="44"><highlight class="comment"></highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/><sp/><sp/><sp/>auto<sp/>x<sp/>=<sp/>GENERATE(<sp/>range(<sp/>1,<sp/>11<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/><sp/><sp/><sp/>auto<sp/>y<sp/>=<sp/>GENERATE(<sp/>range(<sp/>10,<sp/>111<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="47"><highlight class="comment"></highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/><sp/><sp/><sp/>CHECK(<sp/>x<sp/>&lt;<sp/>y<sp/>);</highlight></codeline>
<codeline lineno="49"><highlight class="comment"></highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>CHECK()<sp/>instead<sp/>of<sp/>REQUIRE<sp/>simply<sp/>reports<sp/>the<sp/>failure<sp/>and<sp/>moves<sp/>on</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>CHECK<sp/>does<sp/>not<sp/>abort<sp/>like<sp/>REQUIRE</highlight></codeline>
<codeline lineno="52"><highlight class="comment"></highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>v(<sp/>5<sp/>);</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/><sp/><sp/><sp/>REQUIRE(<sp/>v.size()<sp/>==<sp/>5<sp/>);</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/><sp/><sp/><sp/>REQUIRE(<sp/>v.capacity()<sp/>&gt;=<sp/>5<sp/>);</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>For<sp/>each<sp/>SECTION<sp/>the<sp/>TEST_CASE<sp/>is<sp/>executed<sp/>from<sp/>the<sp/>start.<sp/>This<sp/>means<sp/>that<sp/>each<sp/>section<sp/>is<sp/>entered<sp/>with<sp/>a<sp/>freshly<sp/>constructed<sp/>vector<sp/>v,<sp/>that<sp/>we<sp/>know<sp/>has<sp/>size<sp/>5<sp/>and<sp/>capacity<sp/>at<sp/>least<sp/>5,<sp/>because<sp/>the<sp/>two<sp/>assertions<sp/>are<sp/>also<sp/>checked<sp/>before<sp/>the<sp/>section<sp/>is<sp/>entered.<sp/>Each<sp/>run<sp/>through<sp/>a<sp/>test<sp/>case<sp/>will<sp/>execute<sp/>one,<sp/>and<sp/>only<sp/>one,<sp/>leaf<sp/>section.</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>SECTIONs<sp/>can<sp/>also<sp/>be<sp/>nested.</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/><sp/><sp/><sp/>SECTION(<sp/>&quot;reserving<sp/>smaller<sp/>does<sp/>not<sp/>change<sp/>size<sp/>or<sp/>capacity&quot;<sp/>)</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.reserve(<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="61"><highlight class="comment"></highlight></codeline>
<codeline lineno="62"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>REQUIRE(<sp/>v.size()<sp/>==<sp/>5<sp/>);</highlight></codeline>
<codeline lineno="63"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>REQUIRE(<sp/>v.capacity()<sp/>&gt;=<sp/>5<sp/>);</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="comment">}</highlight></codeline>
<codeline lineno="66"><highlight class="comment"></highlight></codeline>
<codeline lineno="67"><highlight class="comment">//<sp/>if<sp/>all<sp/>is<sp/>well<sp/>console<sp/>will<sp/>print:</highlight></codeline>
<codeline lineno="68"><highlight class="comment">//&quot;All<sp/>tests<sp/>Passed.<sp/>n<sp/>assertions<sp/>in<sp/>x<sp/>test<sp/>cases.&quot;</highlight></codeline>
<codeline lineno="69"><highlight class="comment"></highlight></codeline>
<codeline lineno="70"><highlight class="comment">//<sp/>if<sp/>something<sp/>fails<sp/>it<sp/>will<sp/>be<sp/>reported<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>respective<sp/>test<sp/>case,<sp/>like<sp/>so:</highlight></codeline>
<codeline lineno="71"><highlight class="comment">//<sp/>...<sp/>FAILED:</highlight></codeline>
<codeline lineno="72"><highlight class="comment">//<sp/>with<sp/>expansion:</highlight></codeline>
<codeline lineno="73"><highlight class="comment">//<sp/>...</highlight></codeline>
<codeline lineno="74"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="src/catch_test_main.cpp"/>
  </compounddef>
</doxygen>
