<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="os__utils_8cpp" kind="file" language="C++">
    <compoundname>os_utils.cpp</compoundname>
    <includes refid="os__utils_8h" local="yes">os_utils.h</includes>
    <includes refid="utils_8h" local="yes">utils.h</includes>
    <includes refid="assertions__console_8h" local="yes">assertions_console.h</includes>
    <includes local="no">fstream</includes>
    <includes local="no">thread</includes>
    <includes refid="util__exception_8h" local="yes">util_exception.h</includes>
    <incdepgraph>
      <node id="30">
        <label>assertions_console.h</label>
        <link refid="assertions__console_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>console.h</label>
        <link refid="console_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>key_exception.h</label>
        <link refid="key__exception_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>key_type_traits.h</label>
        <link refid="key__type__traits_8h"/>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>non_copyable.h</label>
        <link refid="non__copyable_8h"/>
      </node>
      <node id="2">
        <label>os_utils.h</label>
        <link refid="os__utils_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>util_exception.h</label>
        <link refid="util__exception_8h"/>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>utils.h</label>
        <link refid="utils_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>utils_global.h</label>
        <link refid="utils__global_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>winner.h</label>
        <link refid="winner_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/os_utils.cpp</label>
        <link refid="os__utils_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>ShlObj.h</label>
      </node>
      <node id="5">
        <label>Windows.h</label>
      </node>
      <node id="25">
        <label>algorithm</label>
      </node>
      <node id="21">
        <label>bitset</label>
      </node>
      <node id="23">
        <label>cinttypes</label>
      </node>
      <node id="7">
        <label>comdef.h</label>
      </node>
      <node id="22">
        <label>cstddef</label>
      </node>
      <node id="29">
        <label>execution</label>
      </node>
      <node id="34">
        <label>fstream</label>
      </node>
      <node id="13">
        <label>functional</label>
      </node>
      <node id="24">
        <label>future</label>
      </node>
      <node id="19">
        <label>iostream</label>
      </node>
      <node id="27">
        <label>iterator</label>
      </node>
      <node id="26">
        <label>numeric</label>
      </node>
      <node id="14">
        <label>optional</label>
      </node>
      <node id="28">
        <label>regex</label>
      </node>
      <node id="4">
        <label>sdkddkver.h</label>
      </node>
      <node id="20">
        <label>set</label>
      </node>
      <node id="10">
        <label>sstream</label>
      </node>
      <node id="38">
        <label>stdexcept</label>
      </node>
      <node id="9">
        <label>string</label>
      </node>
      <node id="35">
        <label>thread</label>
      </node>
      <node id="8">
        <label>tlhelp32.h</label>
      </node>
      <node id="32">
        <label>type_traits</label>
      </node>
      <node id="18">
        <label>vector</label>
      </node>
      <node id="16">
        <label>wincred.h</label>
      </node>
      <node id="6">
        <label>winternl.h</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceutil">util</innernamespace>
    <sectiondef kind="define">
      <memberdef kind="define" id="os__utils_8cpp_a361e7567f78e4a1f8b85cde320b32705_1a361e7567f78e4a1f8b85cde320b32705" prot="public" static="no">
        <name>THROW_UTIL_EXCEPTION</name>
        <param><defname>msg</defname></param>
        <initializer>	__debugbreak();\
	throw <ref refid="classUtilException" kindref="compound">UtilException</ref>( __LINE__, __FILE__, __FUNCTION__, msg );</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/os_utils.cpp" line="5" column="9"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="os__utils_8h" kindref="compound">os_utils.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="utils_8h" kindref="compound">utils.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="assertions__console_8h" kindref="compound">assertions_console.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;thread&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="util__exception_8h" kindref="compound">util_exception.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceutil" kindref="compound">util</ref></highlight></codeline>
<codeline lineno="10"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12" refid="namespaceutil_a3cb6f8f22822b4670fa970bce585e52a_1a3cb6f8f22822b4670fa970bce585e52a" refkind="member"><highlight class="normal">std::string<sp/><ref refid="namespaceutil_a3cb6f8f22822b4670fa970bce585e52a_1a3cb6f8f22822b4670fa970bce585e52a" kindref="member">printHresultErrorDescription</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>HRESULT<sp/>hres<sp/>)</highlight></codeline>
<codeline lineno="13"><highlight class="normal">{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>_com_error<sp/>error{hres};</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceutil_a81e6fd9c125b3f26fb70d1847f6ff517_1a81e6fd9c125b3f26fb70d1847f6ff517" kindref="member">util::ws2s</ref>(<sp/>error.ErrorMessage()<sp/>);</highlight></codeline>
<codeline lineno="16"><highlight class="normal">}</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18" refid="namespaceutil_a742e4cf7eec6ab440f6a51fa98cdb42b_1a742e4cf7eec6ab440f6a51fa98cdb42b" refkind="member"><highlight class="normal">std::wstring<sp/><ref refid="namespaceutil_a742e4cf7eec6ab440f6a51fa98cdb42b_1a742e4cf7eec6ab440f6a51fa98cdb42b" kindref="member">printHresultErrorDescriptionW</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>HRESULT<sp/>hres<sp/>)</highlight></codeline>
<codeline lineno="19"><highlight class="normal">{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>_com_error<sp/>error{hres};</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error.ErrorMessage();</highlight></codeline>
<codeline lineno="22"><highlight class="normal">}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="namespaceutil_a566f2bbc4b5cafc9971186f0d707bf3e_1a566f2bbc4b5cafc9971186f0d707bf3e" refkind="member"><highlight class="normal">std::string<sp/><ref refid="namespaceutil_a566f2bbc4b5cafc9971186f0d707bf3e_1a566f2bbc4b5cafc9971186f0d707bf3e" kindref="member">getLastErrorAsString</ref>()</highlight></codeline>
<codeline lineno="25"><highlight class="normal">{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>error<sp/>message,<sp/>if<sp/>any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>DWORD<sp/>errorMsgId<sp/>=<sp/>::GetLastError();</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>errorMsgId<sp/>==<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>LPSTR<sp/>buff<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>messageLength<sp/>=<sp/>FormatMessageA(<sp/>FORMAT_MESSAGE_ALLOCATE_BUFFER<sp/>|<sp/>FORMAT_MESSAGE_FROM_SYSTEM<sp/>|<sp/>FORMAT_MESSAGE_IGNORE_INSERTS,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>errorMsgId,<sp/>MAKELANGID(<sp/>LANG_NEUTRAL,<sp/>SUBLANG_DEFAULT<sp/>),<sp/>(LPSTR)&amp;buff,<sp/>0,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>message;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>message.assign(<sp/>buff,<sp/>messageLength<sp/>);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>free<sp/>the<sp/>buffer<sp/>allocated<sp/>by<sp/>the<sp/>system</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>LocalFree(<sp/>buff<sp/>);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>message;</highlight></codeline>
<codeline lineno="41"><highlight class="normal">}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="namespaceutil_a9a0b0bfad82a59556195c73d4d2cda5e_1a9a0b0bfad82a59556195c73d4d2cda5e" refkind="member"><highlight class="normal">std::string<sp/><ref refid="namespaceutil_a9a0b0bfad82a59556195c73d4d2cda5e_1a9a0b0bfad82a59556195c73d4d2cda5e" kindref="member">getLastNtErrorAsString</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DWORD<sp/>ntStatusCode<sp/>)</highlight></codeline>
<codeline lineno="44"><highlight class="normal">{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>LPSTR<sp/>ntStatusMessage<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>HMODULE<sp/>hNtdll<sp/>=<sp/>LoadLibraryA(<sp/></highlight><highlight class="stringliteral">&quot;ntdll.dll&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>messageLength<sp/>=<sp/>FormatMessageA(<sp/>FORMAT_MESSAGE_ALLOCATE_BUFFER<sp/>|<sp/>FORMAT_MESSAGE_FROM_SYSTEM<sp/>|<sp/>FORMAT_MESSAGE_FROM_HMODULE,<sp/>hNtdll,<sp/>ntStatusCode,<sp/>MAKELANGID(LANG_NEUTRAL,<sp/>SUBLANG_DEFAULT),<sp/>(LPSTR)<sp/>&amp;ntStatusMessage,<sp/>0,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>message;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>message.assign(<sp/>ntStatusMessage,<sp/>messageLength<sp/>);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>free<sp/>the<sp/>buffer<sp/>allocated<sp/>by<sp/>the<sp/>system</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>LocalFree(<sp/>ntStatusMessage<sp/>);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>hNtdll<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FreeLibrary(<sp/>hNtdll<sp/>);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>message;</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="namespaceutil_a35e258ec68cdc2634e69fad1574f982b_1a35e258ec68cdc2634e69fad1574f982b" refkind="member"><highlight class="normal">std::wstring<sp/><ref refid="namespaceutil_a35e258ec68cdc2634e69fad1574f982b_1a35e258ec68cdc2634e69fad1574f982b" kindref="member">bstrToStr</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BSTR<sp/>&amp;bstr<sp/>)</highlight></codeline>
<codeline lineno="62"><highlight class="normal">{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assertions__console_8h_af3e11288cb5021b91949be5058816137_1af3e11288cb5021b91949be5058816137" kindref="member">ASSERT</ref>(<sp/>bstr<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;BSTR<sp/>was<sp/>null!&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>std::wstring<sp/>str{bstr,<sp/>SysStringLen(<sp/>bstr<sp/>)};<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>takes<sp/>ownership<sp/>so<sp/>no<sp/>need<sp/>to<sp/>SysFreeString</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="66"><highlight class="normal">}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning(<sp/>disable<sp/>:<sp/>4267<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69" refid="namespaceutil_a525e6245d3b2156e2d85aaedb8f7bb2e_1a525e6245d3b2156e2d85aaedb8f7bb2e" refkind="member"><highlight class="normal">BSTR<sp/><ref refid="namespaceutil_a525e6245d3b2156e2d85aaedb8f7bb2e_1a525e6245d3b2156e2d85aaedb8f7bb2e" kindref="member">strToBstr</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::wstring<sp/>&amp;str<sp/>)</highlight></codeline>
<codeline lineno="70"><highlight class="normal">{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assertions__console_8h_af3e11288cb5021b91949be5058816137_1af3e11288cb5021b91949be5058816137" kindref="member">ASSERT</ref>(<sp/>!str.empty(),<sp/></highlight><highlight class="stringliteral">&quot;String<sp/>was<sp/>null!&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>BSTR<sp/>bstr<sp/>=<sp/>SysAllocStringLen(<sp/>str.data(),<sp/>str.size()<sp/>);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bstr;</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning(<sp/>default<sp/>:<sp/>4267<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77" refid="namespaceutil_a3e3c5eab6a6d57d880fd94d44f599cb4_1a3e3c5eab6a6d57d880fd94d44f599cb4" refkind="member"><highlight class="normal">__int64<sp/><ref refid="namespaceutil_a3e3c5eab6a6d57d880fd94d44f599cb4_1a3e3c5eab6a6d57d880fd94d44f599cb4" kindref="member">filetimeToInt64</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FILETIME<sp/>&amp;fileTime<sp/>)</highlight></codeline>
<codeline lineno="78"><highlight class="normal">{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>ULARGE_INTEGER<sp/>ui64{0ul,0ul};</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>ui64.LowPart<sp/>=<sp/>fileTime.dwLowDateTime;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>ui64.HighPart<sp/>=<sp/>fileTime.dwHighDateTime;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">__int64</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>ui64.QuadPart<sp/>);</highlight></codeline>
<codeline lineno="83"><highlight class="normal">}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85" refid="namespaceutil_a12eed248853b800635a584152eda83a5_1a12eed248853b800635a584152eda83a5" refkind="member"><highlight class="normal">DWORD_PTR<sp/><ref refid="namespaceutil_a12eed248853b800635a584152eda83a5_1a12eed248853b800635a584152eda83a5" kindref="member">pinThreadToCore</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>HANDLE<sp/>hThread,</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DWORD<sp/>core<sp/>)</highlight></codeline>
<codeline lineno="87"><highlight class="normal">{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>set<sp/>bit<sp/>represents<sp/>a<sp/>CPU<sp/>core</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>DWORD_PTR<sp/>mask<sp/>=<sp/>(<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">DWORD_PTR</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>1<sp/>)<sp/>&lt;&lt;<sp/>core<sp/>);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>DWORD_PTR<sp/>previousAffinityMask<sp/>=<sp/>SetThreadAffinityMask(<sp/>GetCurrentThread(),<sp/>mask<sp/>);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="os__utils_8h_a5d073df04e4d5048059e9a110173b9f0_1a5d073df04e4d5048059e9a110173b9f0" kindref="member">ASSERT_HRES_WIN32_IF_FAILED</ref>;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>previousAffinityMask;</highlight></codeline>
<codeline lineno="93"><highlight class="normal">}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95" refid="namespaceutil_a26eb5943c9263e29706bf7ea9817bd26_1a26eb5943c9263e29706bf7ea9817bd26" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceutil_a26eb5943c9263e29706bf7ea9817bd26_1a26eb5943c9263e29706bf7ea9817bd26" kindref="member">setCurrentThreadName</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;name<sp/>)</highlight></codeline>
<codeline lineno="96"><highlight class="normal">{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Thread<sp/>objects<sp/>in<sp/>the<sp/>Windows<sp/>OS<sp/>do<sp/>not<sp/>have<sp/>a<sp/>name.<sp/>Naming<sp/>threads<sp/>is<sp/>purely<sp/>a<sp/>feature<sp/>of<sp/>the<sp/>debugger.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>function<sp/>to<sp/>&apos;set&apos;<sp/>a<sp/>thread&apos;s<sp/>name<sp/>is<sp/>SetThreadName<sp/>and<sp/>it<sp/>raises<sp/>an<sp/>MS_VC_EXCEPTION<sp/>that&apos;s<sp/>caught<sp/>by<sp/>the<sp/>debugger,<sp/>and<sp/>the<sp/>information<sp/>used<sp/>for<sp/>the<sp/>debugging<sp/>experience.<sp/>If<sp/>no<sp/>debugger<sp/>is<sp/>present,<sp/>the<sp/>exception<sp/>filter<sp/>simply<sp/>continues<sp/>execution.<sp/>Unless<sp/>you<sp/>attach<sp/>a<sp/>debugger<sp/>the<sp/>function<sp/>call<sp/>will<sp/>fail.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>description<sp/>of<sp/>a<sp/>thread<sp/>can<sp/>be<sp/>set<sp/>more<sp/>than<sp/>once;<sp/>the<sp/>most<sp/>recently<sp/>set<sp/>value<sp/>is<sp/>used.<sp/>You<sp/>can<sp/>retrieve<sp/>the<sp/>description<sp/>of<sp/>a<sp/>thread<sp/>by<sp/>calling<sp/>GetThreadDescription.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>HRESULT<sp/>hres<sp/>=<sp/>SetThreadDescription(<sp/>GetCurrentThread(),<sp/>L</highlight><highlight class="stringliteral">&quot;ThisIsMyThreadName!&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="os__utils_8h_a7027472bc9b182c0fea900713e4541e3_1a7027472bc9b182c0fea900713e4541e3" kindref="member">ASSERT_HRES_IF_FAILED</ref>(<sp/>hres<sp/>);</highlight></codeline>
<codeline lineno="102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104" refid="namespaceutil_a08c4e4a29b0a0e5157b152b140bc094e_1a08c4e4a29b0a0e5157b152b140bc094e" refkind="member"><highlight class="normal">std::string<sp/><ref refid="namespaceutil_a08c4e4a29b0a0e5157b152b140bc094e_1a08c4e4a29b0a0e5157b152b140bc094e" kindref="member">getKnownFolderPath</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*=<sp/>CSIDL_PERSONAL*/</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="105"><highlight class="normal">{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>std::wstring<sp/>myDocuments;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>myDocuments.reserve(<sp/>100<sp/>);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>HRESULT<sp/>result<sp/>=<sp/>SHGetFolderPathW(<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>CSIDL_PERSONAL</highlight><highlight class="comment">/*FOLDERID_AppDataDocuments*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>SHGFP_TYPE_CURRENT,<sp/>myDocuments.data()<sp/>);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>result<sp/>!=<sp/>S_OK<sp/>)</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util__exception_8h_a361e7567f78e4a1f8b85cde320b32705_1a361e7567f78e4a1f8b85cde320b32705" kindref="member">THROW_UTIL_EXCEPTION</ref>(<sp/></highlight><highlight class="stringliteral">&quot;Could<sp/>not<sp/>find<sp/>the<sp/>known<sp/>document<sp/>folder!&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceutil_a81e6fd9c125b3f26fb70d1847f6ff517_1a81e6fd9c125b3f26fb70d1847f6ff517" kindref="member">util::ws2s</ref>(<sp/>myDocuments<sp/>);</highlight></codeline>
<codeline lineno="116"><highlight class="normal">}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>region<sp/>DetachedThreads</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>global<sp/>event<sp/>all<sp/>threads<sp/>can<sp/>reach</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120" refid="namespaceutil_a37a4ec65ea5148dae314ac426bc89591_1a37a4ec65ea5148dae314ac426bc89591" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>HANDLE<sp/><ref refid="namespaceutil_a37a4ec65ea5148dae314ac426bc89591_1a37a4ec65ea5148dae314ac426bc89591" kindref="member">g_hThreadQuitcEvent</ref>;</highlight></codeline>
<codeline lineno="121" refid="namespaceutil_a3b9250df90bbf173c6e8ccca985f8162_1a3b9250df90bbf173c6e8ccca985f8162" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::vector&lt;HANDLE&gt;<sp/><ref refid="namespaceutil_a3b9250df90bbf173c6e8ccca985f8162_1a3b9250df90bbf173c6e8ccca985f8162" kindref="member">g_detachedThreads</ref>;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123" refid="namespaceutil_a79a4c5df290b7c3f50617ad7ffa131b2_1a79a4c5df290b7c3f50617ad7ffa131b2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceutil_a79a4c5df290b7c3f50617ad7ffa131b2_1a79a4c5df290b7c3f50617ad7ffa131b2" kindref="member">setupDetachedThreadsVector</ref>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>nThreads<sp/>)</highlight></codeline>
<codeline lineno="124"><highlight class="normal">{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceutil_a37a4ec65ea5148dae314ac426bc89591_1a37a4ec65ea5148dae314ac426bc89591" kindref="member">g_hThreadQuitcEvent</ref><sp/>=<sp/>CreateEventW(<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>TRUE,<sp/>FALSE,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="os__utils_8h_a5d073df04e4d5048059e9a110173b9f0_1a5d073df04e4d5048059e9a110173b9f0" kindref="member">ASSERT_HRES_WIN32_IF_FAILED</ref>;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceutil_a3b9250df90bbf173c6e8ccca985f8162_1a3b9250df90bbf173c6e8ccca985f8162" kindref="member">g_detachedThreads</ref>.reserve(<sp/>nThreads<sp/>);</highlight></codeline>
<codeline lineno="128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning(<sp/>disable<sp/>:<sp/>6246<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131" refid="namespaceutil_a3a780a09a3dffe65ca6df0ff68298fa9_1a3a780a09a3dffe65ca6df0ff68298fa9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceutil_a3a780a09a3dffe65ca6df0ff68298fa9_1a3a780a09a3dffe65ca6df0ff68298fa9" kindref="member">terminateDetachedThreads</ref>()</highlight></codeline>
<codeline lineno="132"><highlight class="normal">{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>_DEBUG<sp/>&amp;&amp;<sp/>!defined<sp/>NDEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKeyConsole" kindref="compound">KeyConsole</ref><sp/>&amp;console<sp/>=<sp/><ref refid="classKeyConsole_a31cfe6a77156baf79a0a74ea338c6e18_1a31cfe6a77156baf79a0a74ea338c6e18" kindref="member">KeyConsole::getInstance</ref>();</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>console.<ref refid="classKeyConsole_a07362c63c978e15bb23d2a43ab697e3a_1a07362c63c978e15bb23d2a43ab697e3a" kindref="member">print</ref>(<sp/></highlight><highlight class="stringliteral">&quot;Clearing<sp/>up<sp/>detached<sp/>threads\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>HANDLE<sp/>hThread<sp/>:<sp/><ref refid="namespaceutil_a3b9250df90bbf173c6e8ccca985f8162_1a3b9250df90bbf173c6e8ccca985f8162" kindref="member">g_detachedThreads</ref><sp/>)</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DWORD<sp/>exitCode<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Terminate<sp/>WinAPI<sp/>thread<sp/>(without<sp/>using<sp/>TerminateThread<sp/>which<sp/>is<sp/>extremely<sp/>error-prone,<sp/>brute<sp/>force<sp/>approach<sp/>and<sp/>doesn&apos;t<sp/>allow<sp/>proper<sp/>thread<sp/>cleanup)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>tell<sp/>thread<sp/>to<sp/>stop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetEvent(<sp/><ref refid="namespaceutil_a37a4ec65ea5148dae314ac426bc89591_1a37a4ec65ea5148dae314ac426bc89591" kindref="member">g_hThreadQuitcEvent</ref><sp/>);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="os__utils_8h_a5d073df04e4d5048059e9a110173b9f0_1a5d073df04e4d5048059e9a110173b9f0" kindref="member">ASSERT_HRES_WIN32_IF_FAILED</ref>;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>wait<sp/>for<sp/>thread<sp/>to<sp/>signal<sp/>termination</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WaitForSingleObject(<sp/>hThread,<sp/>INFINITE<sp/>);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//TerminateThread(<sp/>hThread,<sp/>exitCode<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="os__utils_8h_a5d073df04e4d5048059e9a110173b9f0_1a5d073df04e4d5048059e9a110173b9f0" kindref="member">ASSERT_HRES_WIN32_IF_FAILED</ref>;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetExitCodeThread(<sp/>hThread,<sp/>&amp;exitCode<sp/>);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="os__utils_8h_a5d073df04e4d5048059e9a110173b9f0_1a5d073df04e4d5048059e9a110173b9f0" kindref="member">ASSERT_HRES_WIN32_IF_FAILED</ref>;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CloseHandle(<sp/>hThread<sp/>);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="os__utils_8h_a5d073df04e4d5048059e9a110173b9f0_1a5d073df04e4d5048059e9a110173b9f0" kindref="member">ASSERT_HRES_WIN32_IF_FAILED</ref>;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>CloseHandle(<sp/><ref refid="namespaceutil_a37a4ec65ea5148dae314ac426bc89591_1a37a4ec65ea5148dae314ac426bc89591" kindref="member">g_hThreadQuitcEvent</ref><sp/>);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="os__utils_8h_a5d073df04e4d5048059e9a110173b9f0_1a5d073df04e4d5048059e9a110173b9f0" kindref="member">ASSERT_HRES_WIN32_IF_FAILED</ref>;</highlight></codeline>
<codeline lineno="160"><highlight class="normal">}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning(<sp/>default<sp/>:<sp/>6246<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>endregion<sp/>DetachedThreads</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165" refid="namespaceutil_a2e444da6f9f3edb24cbdfdd3acd8eef5_1a2e444da6f9f3edb24cbdfdd3acd8eef5" refkind="member"><highlight class="normal">std::optional&lt;DWORD&gt;<sp/><ref refid="namespaceutil_a2e444da6f9f3edb24cbdfdd3acd8eef5_1a2e444da6f9f3edb24cbdfdd3acd8eef5" kindref="member">registryGetDword</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>HKEY<sp/>hKey,</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::wstring<sp/>&amp;regName<sp/>)</highlight></codeline>
<codeline lineno="167"><highlight class="normal">{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>DWORD<sp/>bufferSize<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>DWORD<sp/>);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>DWORD<sp/>val<sp/>=<sp/>0ul;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>RegQueryValueExW(<sp/>hKey,<sp/>regName.c_str(),<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">LPBYTE</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>&amp;val<sp/>),<sp/>&amp;bufferSize<sp/>);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ret<sp/>!=<sp/>ERROR_SUCCESS<sp/>)</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::nullopt;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val;</highlight></codeline>
<codeline lineno="176"><highlight class="normal">}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178" refid="namespaceutil_a461bbc2dfa40d2dae1639cce3f6db772_1a461bbc2dfa40d2dae1639cce3f6db772" refkind="member"><highlight class="normal">std::optional&lt;std::wstring&gt;<sp/><ref refid="namespaceutil_a461bbc2dfa40d2dae1639cce3f6db772_1a461bbc2dfa40d2dae1639cce3f6db772" kindref="member">registryGetString</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>HKEY<sp/>hKey,</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::wstring<sp/>&amp;regName<sp/>)</highlight></codeline>
<codeline lineno="180"><highlight class="normal">{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>buffer[512]{0};</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>DWORD<sp/>bufferSize<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>buffer<sp/>);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>RegQueryValueExW(<sp/>hKey,<sp/>regName.c_str(),<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">LPBYTE</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>buffer<sp/>),<sp/>&amp;bufferSize<sp/>);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ret<sp/>!=<sp/>ERROR_SUCCESS<sp/>)</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::nullopt;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>std::wstring<sp/>str{std::begin(<sp/>buffer<sp/>),<sp/>std::end(<sp/>buffer<sp/>)};</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="190"><highlight class="normal">}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192" refid="namespaceutil_a833373d99efbf126ccbb44456500085f_1a833373d99efbf126ccbb44456500085f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceutil_a833373d99efbf126ccbb44456500085f_1a833373d99efbf126ccbb44456500085f" kindref="member">suspendAllThreads</ref>()</highlight></codeline>
<codeline lineno="193"><highlight class="normal">{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE<sp/>thread_enumerator<sp/>=<sp/>CreateToolhelp32Snapshot(<sp/>TH32CS_SNAPTHREAD,<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>THREADENTRY32<sp/>te{};</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>te.dwSize<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>te<sp/>);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>DWORD<sp/>current_pid<sp/>=<sp/>GetCurrentProcessId();</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>DWORD<sp/>current_tid<sp/>=<sp/>GetCurrentThreadId();</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>Thread32First(<sp/>thread_enumerator,<sp/>&amp;te<sp/>);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>te.th32OwnerProcessID<sp/>!=<sp/>current_pid<sp/>)</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>te.th32ThreadID<sp/>==<sp/>current_tid<sp/>)</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HANDLE<sp/>th<sp/>=<sp/>OpenThread(<sp/>THREAD_SUSPEND_RESUME<sp/>|<sp/>THREAD_GET_CONTEXT<sp/>|<sp/>THREAD_SET_CONTEXT,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>te.th32ThreadID<sp/>);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>th<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SuspendThread(<sp/>th<sp/>);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>Thread32Next(<sp/>thread_enumerator,<sp/>&amp;te<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>CloseHandle(<sp/>thread_enumerator<sp/>);</highlight></codeline>
<codeline lineno="219"><highlight class="normal">}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221" refid="namespaceutil_a49087246809a040488fc33d84239de83_1a49087246809a040488fc33d84239de83" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceutil_a49087246809a040488fc33d84239de83_1a49087246809a040488fc33d84239de83" kindref="member">launchProcess</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;path<sp/>)</highlight></codeline>
<codeline lineno="222"><highlight class="normal">{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>STARTUPINFOW<sp/>si;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>PROCESS_INFORMATION<sp/>pi;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>ZeroMemory(<sp/>&amp;si,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>STARTUPINFOW<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>ZeroMemory(<sp/>&amp;pi,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>PROCESS_INFORMATION<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>si.cb<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>STARTUPINFOW<sp/>);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>CreateProcessW(<sp/><ref refid="namespaceutil_a6f14f660ccbdb1435f227700fa1dfd94_1a6f14f660ccbdb1435f227700fa1dfd94" kindref="member">util::s2ws</ref>(<sp/>path<sp/>).c_str(),<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>FALSE,<sp/>0,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>&amp;si,<sp/>&amp;pi<sp/>);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="os__utils_8h_a5d073df04e4d5048059e9a110173b9f0_1a5d073df04e4d5048059e9a110173b9f0" kindref="member">ASSERT_HRES_WIN32_IF_FAILED</ref>;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>CloseHandle(<sp/>pi.hProcess<sp/>);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>CloseHandle(<sp/>pi.hThread<sp/>);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Process<sp/>creation<sp/>successful.\n&quot;;</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Process<sp/>ID:<sp/>&quot;</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>pi.dwProcessId</highlight></codeline>
<codeline lineno="239"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&apos;\n&apos;;</highlight></codeline>
<codeline lineno="240"><highlight class="comment"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;GetProcessId:<sp/>&quot;</highlight></codeline>
<codeline lineno="241"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>GetProcessId(<sp/>pi.hProcess<sp/>)</highlight></codeline>
<codeline lineno="242"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&apos;\n&apos;;</highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Thread<sp/>ID:<sp/>&quot;</highlight></codeline>
<codeline lineno="244"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>pi.dwThreadId</highlight></codeline>
<codeline lineno="245"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&apos;\n&apos;;</highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;GetThreadId:<sp/>&quot;</highlight></codeline>
<codeline lineno="247"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>GetThreadId(<sp/>pi.hThread<sp/>)</highlight></codeline>
<codeline lineno="248"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&apos;\n&apos;;</highlight></codeline>
<codeline lineno="249"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal">}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal">}</highlight><highlight class="comment">//<sp/>namespace<sp/>util</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="src/os_utils.cpp"/>
  </compounddef>
</doxygen>
