<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="classOperation" kind="class" language="C++" prot="public">
    <compoundname>Operation</compoundname>
    <includes refid="operation_8h" local="no">operation.h</includes>
    <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classOperation_aa3d6c997112b92e3f69a41212e70518e_1aa3d6c997112b92e3f69a41212e70518e" prot="private" static="no">
        <type>std::function&lt; void()&gt;</type>
        <definition>using Operation::TF =  std::function&lt;void()&gt;</definition>
        <argsstring></argsstring>
        <name>TF</name>
        <qualifiedname>Operation::TF</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/operation.h" line="18" column="1" bodyfile="inc/operation.h" bodystart="18" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classOperation_a1d65aa6390838c774e7032221d8e12bb_1a1d65aa6390838c774e7032221d8e12bb" prot="private" static="no" mutable="no">
        <type><ref refid="classOperation_aa3d6c997112b92e3f69a41212e70518e_1aa3d6c997112b92e3f69a41212e70518e" kindref="member">TF</ref></type>
        <definition>TF Operation::m_f</definition>
        <argsstring></argsstring>
        <name>m_f</name>
        <qualifiedname>Operation::m_f</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/operation.h" line="19" column="4" bodyfile="inc/operation.h" bodystart="19" bodyend="-1"/>
        <referencedby refid="classOperation_a7d006b5788e6f0f6a818ad478e43f9d8_1a7d006b5788e6f0f6a818ad478e43f9d8" compoundref="operation_8cpp" startline="29" endline="32">operator()</referencedby>
        <referencedby refid="classOperation_a251f901c6cd9f7aa88d88af641d9b10d_1a251f901c6cd9f7aa88d88af641d9b10d" compoundref="operation_8cpp" startline="39" endline="42">reset</referencedby>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classOperation_a969d86df18a051bd684baf0bbda533c2_1a969d86df18a051bd684baf0bbda533c2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>Operation::Operation</definition>
        <argsstring>(TF &amp;&amp;f)</argsstring>
        <name>Operation</name>
        <qualifiedname>Operation::Operation</qualifiedname>
        <param>
          <type><ref refid="classOperation_aa3d6c997112b92e3f69a41212e70518e_1aa3d6c997112b92e3f69a41212e70518e" kindref="member">TF</ref> &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/operation.h" line="21" column="1" bodyfile="src/operation.cpp" bodystart="4" bodyend="9"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classOperation_a9608233a9ffb59244f68cd9ce0072ef5_1a9608233a9ffb59244f68cd9ce0072ef5" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>Operation::~Operation</definition>
        <argsstring>() noexcept</argsstring>
        <name>~Operation</name>
        <qualifiedname>Operation::~Operation</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/operation.h" line="23" column="1" bodyfile="src/operation.cpp" bodystart="11" bodyend="14"/>
      </memberdef>
      <memberdef kind="function" id="classOperation_a0879bce8215e86a23802d5171c04a4ab_1a0879bce8215e86a23802d5171c04a4ab" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>Operation::Operation</definition>
        <argsstring>(Operation &amp;&amp;rhs) noexcept</argsstring>
        <name>Operation</name>
        <qualifiedname>Operation::Operation</qualifiedname>
        <param>
          <type><ref refid="classOperation" kindref="compound">Operation</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/operation.h" line="24" column="1" bodyfile="src/operation.cpp" bodystart="16" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="classOperation_acab0d4a120ffe69b45112a02e630dcdc_1acab0d4a120ffe69b45112a02e630dcdc" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type><ref refid="classOperation" kindref="compound">Operation</ref> &amp;</type>
        <definition>Operation &amp; Operation::operator=</definition>
        <argsstring>(Operation &amp;&amp;rhs) noexcept</argsstring>
        <name>operator=</name>
        <qualifiedname>Operation::operator=</qualifiedname>
        <param>
          <type><ref refid="classOperation" kindref="compound">Operation</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/operation.h" line="25" column="11" bodyfile="src/operation.cpp" bodystart="23" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="classOperation_a7d006b5788e6f0f6a818ad478e43f9d8_1a7d006b5788e6f0f6a818ad478e43f9d8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Operation::operator()</definition>
        <argsstring>() const</argsstring>
        <name>operator()</name>
        <qualifiedname>Operation::operator()</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/operation.h" line="46" column="6" bodyfile="src/operation.cpp" bodystart="29" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="classOperation_a1a6693e431a3b4a6a2acd6b77df6203e_1a1a6693e431a3b4a6a2acd6b77df6203e" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Operation::swap</definition>
        <argsstring>(Operation &amp;rhs) noexcept</argsstring>
        <name>swap</name>
        <qualifiedname>Operation::swap</qualifiedname>
        <param>
          <type><ref refid="classOperation" kindref="compound">Operation</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/operation.h" line="47" column="6" bodyfile="src/operation.cpp" bodystart="34" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="classOperation_a251f901c6cd9f7aa88d88af641d9b10d_1a251f901c6cd9f7aa88d88af641d9b10d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void Operation::reset</definition>
        <argsstring>() noexcept</argsstring>
        <name>reset</name>
        <qualifiedname>Operation::reset</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/operation.h" line="48" column="6" bodyfile="src/operation.cpp" bodystart="39" bodyend="42"/>
        <referencedby refid="classOperation_a9608233a9ffb59244f68cd9ce0072ef5_1a9608233a9ffb59244f68cd9ce0072ef5" compoundref="operation_8cpp" startline="11" endline="14">~Operation</referencedby>
      </memberdef>
      <memberdef kind="function" id="classOperation_ab3dbd0f8650d51af9e9ea7e6993e84b5_1ab3dbd0f8650d51af9e9ea7e6993e84b5" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>Operation::operator bool</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator bool</name>
        <qualifiedname>Operation::operator bool</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/operation.h" line="50" column="8" bodyfile="src/operation.cpp" bodystart="44" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="classOperation_a4d34cac8f04a582091200f2376c9c612_1a4d34cac8f04a582091200f2376c9c612" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Operation::operator==</definition>
        <argsstring>(const Operation &amp;rhs) const noexcept</argsstring>
        <name>operator==</name>
        <qualifiedname>Operation::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classOperation" kindref="compound">Operation</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/operation.h" line="51" column="23" bodyfile="src/operation.cpp" bodystart="49" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classOperation_a60f40ceb41f507e00fd9fe5e167e3cb1_1a60f40ceb41f507e00fd9fe5e167e3cb1" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Operation::operator!=</definition>
        <argsstring>(const Operation &amp;rhs) const noexcept</argsstring>
        <name>operator!=</name>
        <qualifiedname>Operation::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="classOperation" kindref="compound">Operation</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/operation.h" line="52" column="23" bodyfile="src/operation.cpp" bodystart="54" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="classOperation_ada2e435d3b303594c614642f16f376e7_1ada2e435d3b303594c614642f16f376e7" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Operation::operator==</definition>
        <argsstring>(const Operation *rhs) const noexcept</argsstring>
        <name>operator==</name>
        <qualifiedname>Operation::operator==</qualifiedname>
        <param>
          <type>const <ref refid="classOperation" kindref="compound">Operation</ref> *</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/operation.h" line="53" column="23" bodyfile="src/operation.cpp" bodystart="59" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="classOperation_a19b50cf24cc8d10b5dba9dee2127de9f_1a19b50cf24cc8d10b5dba9dee2127de9f" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool Operation::operator!=</definition>
        <argsstring>(const Operation *rhs) const noexcept</argsstring>
        <name>operator!=</name>
        <qualifiedname>Operation::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="classOperation" kindref="compound">Operation</ref> *</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/operation.h" line="54" column="23" bodyfile="src/operation.cpp" bodystart="64" bodyend="67"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classOperation_ac186837829eb564b07a4eb233f3bc1a1_1ac186837829eb564b07a4eb233f3bc1a1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TFunction</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>TArgs</declname>
            <defname>TArgs</defname>
          </param>
        </templateparamlist>
        <type>std::unique_ptr&lt; <ref refid="classOperation" kindref="compound">Operation</ref> &gt;</type>
        <definition>static std::unique_ptr&lt; Operation &gt; Operation::setup</definition>
        <argsstring>(TFunction &amp;&amp;f, TArgs &amp;&amp;...args)</argsstring>
        <name>setup</name>
        <qualifiedname>Operation::setup</qualifiedname>
        <param>
          <type>TFunction &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>TArgs &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>setup function pointers </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/operation.h" line="29" column="24" bodyfile="inc/operation.h" bodystart="29" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="classOperation_a07f03d11f9e1a4e4a8aa9aee00bdeb7c_1a07f03d11f9e1a4e4a8aa9aee00bdeb7c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TMethod</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename ...</type>
            <declname>TArgs</declname>
            <defname>TArgs</defname>
          </param>
        </templateparamlist>
        <type>std::unique_ptr&lt; <ref refid="classOperation" kindref="compound">Operation</ref> &gt;</type>
        <definition>static std::unique_ptr&lt; Operation &gt; Operation::setup</definition>
        <argsstring>(TMethod &amp;&amp;mf, T &amp;&amp;obj, TArgs &amp;&amp;...args)</argsstring>
        <name>setup</name>
        <qualifiedname>Operation::setup</qualifiedname>
        <param>
          <type>TMethod &amp;&amp;</type>
          <declname>mf</declname>
        </param>
        <param>
          <type>T &amp;&amp;</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>TArgs &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>setup member function pointers </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/operation.h" line="38" column="24" bodyfile="inc/operation.h" bodystart="38" bodyend="43"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>returns a ready-made callable with its arguments, packaged in a std::unique_ptr </para>
    </briefdescription>
    <detaileddescription>
<para>=============================================================</para>
<para><simplesect kind="author"><para>KeyC0de </para>
</simplesect>
<simplesect kind="date"><para>2020/11/05 3:17</para>
</simplesect>
It can be inserted in any container or used for whatever purpose <heading level="1">utilizes std::function for type erasure and std::bind for argument packing </heading>
</para>
    </detaileddescription>
    <location file="inc/operation.h" line="16" column="1" bodyfile="inc/operation.h" bodystart="17" bodyend="55"/>
    <listofallmembers>
      <member refid="classOperation_a1d65aa6390838c774e7032221d8e12bb_1a1d65aa6390838c774e7032221d8e12bb" prot="private" virt="non-virtual"><scope>Operation</scope><name>m_f</name></member>
      <member refid="classOperation_a969d86df18a051bd684baf0bbda533c2_1a969d86df18a051bd684baf0bbda533c2" prot="private" virt="non-virtual"><scope>Operation</scope><name>Operation</name></member>
      <member refid="classOperation_a0879bce8215e86a23802d5171c04a4ab_1a0879bce8215e86a23802d5171c04a4ab" prot="public" virt="non-virtual"><scope>Operation</scope><name>Operation</name></member>
      <member refid="classOperation_ab3dbd0f8650d51af9e9ea7e6993e84b5_1ab3dbd0f8650d51af9e9ea7e6993e84b5" prot="public" virt="non-virtual"><scope>Operation</scope><name>operator bool</name></member>
      <member refid="classOperation_a60f40ceb41f507e00fd9fe5e167e3cb1_1a60f40ceb41f507e00fd9fe5e167e3cb1" prot="public" virt="non-virtual"><scope>Operation</scope><name>operator!=</name></member>
      <member refid="classOperation_a19b50cf24cc8d10b5dba9dee2127de9f_1a19b50cf24cc8d10b5dba9dee2127de9f" prot="public" virt="non-virtual"><scope>Operation</scope><name>operator!=</name></member>
      <member refid="classOperation_a7d006b5788e6f0f6a818ad478e43f9d8_1a7d006b5788e6f0f6a818ad478e43f9d8" prot="public" virt="non-virtual"><scope>Operation</scope><name>operator()</name></member>
      <member refid="classOperation_acab0d4a120ffe69b45112a02e630dcdc_1acab0d4a120ffe69b45112a02e630dcdc" prot="public" virt="non-virtual"><scope>Operation</scope><name>operator=</name></member>
      <member refid="classOperation_a4d34cac8f04a582091200f2376c9c612_1a4d34cac8f04a582091200f2376c9c612" prot="public" virt="non-virtual"><scope>Operation</scope><name>operator==</name></member>
      <member refid="classOperation_ada2e435d3b303594c614642f16f376e7_1ada2e435d3b303594c614642f16f376e7" prot="public" virt="non-virtual"><scope>Operation</scope><name>operator==</name></member>
      <member refid="classOperation_a251f901c6cd9f7aa88d88af641d9b10d_1a251f901c6cd9f7aa88d88af641d9b10d" prot="public" virt="non-virtual"><scope>Operation</scope><name>reset</name></member>
      <member refid="classOperation_ac186837829eb564b07a4eb233f3bc1a1_1ac186837829eb564b07a4eb233f3bc1a1" prot="public" virt="non-virtual"><scope>Operation</scope><name>setup</name></member>
      <member refid="classOperation_a07f03d11f9e1a4e4a8aa9aee00bdeb7c_1a07f03d11f9e1a4e4a8aa9aee00bdeb7c" prot="public" virt="non-virtual"><scope>Operation</scope><name>setup</name></member>
      <member refid="classOperation_a1a6693e431a3b4a6a2acd6b77df6203e_1a1a6693e431a3b4a6a2acd6b77df6203e" prot="public" virt="non-virtual"><scope>Operation</scope><name>swap</name></member>
      <member refid="classOperation_aa3d6c997112b92e3f69a41212e70518e_1aa3d6c997112b92e3f69a41212e70518e" prot="private" virt="non-virtual"><scope>Operation</scope><name>TF</name></member>
      <member refid="classOperation_a9608233a9ffb59244f68cd9ce0072ef5_1a9608233a9ffb59244f68cd9ce0072ef5" prot="public" virt="non-virtual"><scope>Operation</scope><name>~Operation</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
