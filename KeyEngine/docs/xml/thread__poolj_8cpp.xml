<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="thread__poolj_8cpp" kind="file" language="C++">
    <compoundname>thread_poolj.cpp</compoundname>
    <includes refid="thread__poolj_8h" local="yes">thread_poolj.h</includes>
    <includes refid="assertions__console_8h" local="yes">assertions_console.h</includes>
    <incdepgraph>
      <node id="13">
        <label>assertions_console.h</label>
        <link refid="assertions__console_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>key_exception.h</label>
        <link refid="key__exception_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>non_copyable.h</label>
        <link refid="non__copyable_8h"/>
      </node>
      <node id="2">
        <label>thread_poolj.h</label>
        <link refid="thread__poolj_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/thread_poolj.cpp</label>
        <link refid="thread__poolj_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>condition_variable</label>
      </node>
      <node id="14">
        <label>iostream</label>
      </node>
      <node id="7">
        <label>jthread/jthread.h</label>
      </node>
      <node id="8">
        <label>jthread/stop_token.h</label>
      </node>
      <node id="5">
        <label>mutex</label>
      </node>
      <node id="4">
        <label>queue</label>
      </node>
      <node id="12">
        <label>stdexcept</label>
      </node>
      <node id="11">
        <label>string</label>
      </node>
      <node id="3">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacefunc__async">func_async</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="thread__poolj_8h" kindref="compound">thread_poolj.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="assertions__console_8h" kindref="compound">assertions_console.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5" refid="classThreadPoolJ_a45e02b36197bf6c1ed3baa2ea4ee7924_1a45e02b36197bf6c1ed3baa2ea4ee7924" refkind="member"><highlight class="normal"><ref refid="classThreadPoolJ_a45e02b36197bf6c1ed3baa2ea4ee7924_1a45e02b36197bf6c1ed3baa2ea4ee7924" kindref="member">ThreadPoolJ::ThreadPoolJ</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>nthreads,</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bStart<sp/>)</highlight></codeline>
<codeline lineno="7"><highlight class="normal">{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classThreadPoolJ_a1b7cefb6988f2cf5c9eb395f54172a94_1a1b7cefb6988f2cf5c9eb395f54172a94" kindref="member">m_pool</ref>.reserve(<sp/>nthreads<sp/>);</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>bStart<sp/>)</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classThreadPoolJ_a4eed8445982bec0c3530502424a813a4_1a4eed8445982bec0c3530502424a813a4" kindref="member">start</ref>();</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="13"><highlight class="normal">}</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15" refid="classThreadPoolJ_a0c0e12a8c7197ac7954aaae0a10a4809_1a0c0e12a8c7197ac7954aaae0a10a4809" refkind="member"><highlight class="normal"><ref refid="classThreadPoolJ" kindref="compound">ThreadPoolJ</ref>&amp;<sp/><ref refid="classThreadPoolJ_a0c0e12a8c7197ac7954aaae0a10a4809_1a0c0e12a8c7197ac7954aaae0a10a4809" kindref="member">ThreadPoolJ::getInstance</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>nThreads<sp/></highlight><highlight class="comment">/*=<sp/>4u*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bEnabled<sp/></highlight><highlight class="comment">/*=<sp/>true*/</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="17"><highlight class="normal">{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_lock&lt;std::recursive_mutex&gt;<sp/>lg{<ref refid="classThreadPoolJ_a481df3da83614d4f7a4e0a95963bbeff_1a481df3da83614d4f7a4e0a95963bbeff" kindref="member">s_mu</ref>};</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classThreadPoolJ_a77837e4adf53b67bef9e8ee176975eb3_1a77837e4adf53b67bef9e8ee176975eb3" kindref="member">s_pInstance</ref><sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classThreadPoolJ_a77837e4adf53b67bef9e8ee176975eb3_1a77837e4adf53b67bef9e8ee176975eb3" kindref="member">s_pInstance</ref><sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classThreadPoolJ" kindref="compound">ThreadPoolJ</ref>{nThreads,<sp/>bEnabled};</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*<ref refid="classThreadPoolJ_a77837e4adf53b67bef9e8ee176975eb3_1a77837e4adf53b67bef9e8ee176975eb3" kindref="member">s_pInstance</ref>;</highlight></codeline>
<codeline lineno="24"><highlight class="normal">}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26" refid="classThreadPoolJ_a900b4ee770a970d62cfdb78805dce633_1a900b4ee770a970d62cfdb78805dce633" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classThreadPoolJ_a900b4ee770a970d62cfdb78805dce633_1a900b4ee770a970d62cfdb78805dce633" kindref="member">ThreadPoolJ::resetInstance</ref>()<sp/>noexcept</highlight></codeline>
<codeline lineno="27"><highlight class="normal">{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_lock&lt;std::recursive_mutex&gt;<sp/>lg{<ref refid="classThreadPoolJ_a481df3da83614d4f7a4e0a95963bbeff_1a481df3da83614d4f7a4e0a95963bbeff" kindref="member">s_mu</ref>};</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classThreadPoolJ_a77837e4adf53b67bef9e8ee176975eb3_1a77837e4adf53b67bef9e8ee176975eb3" kindref="member">s_pInstance</ref><sp/>)</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><ref refid="classThreadPoolJ_a77837e4adf53b67bef9e8ee176975eb3_1a77837e4adf53b67bef9e8ee176975eb3" kindref="member">s_pInstance</ref>;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classThreadPoolJ_a77837e4adf53b67bef9e8ee176975eb3_1a77837e4adf53b67bef9e8ee176975eb3" kindref="member">s_pInstance</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="34"><highlight class="normal">}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="classThreadPoolJ_acd20215772d41c1709c3d0403524189d_1acd20215772d41c1709c3d0403524189d" refkind="member"><highlight class="normal"><ref refid="classThreadPoolJ_acd20215772d41c1709c3d0403524189d_1acd20215772d41c1709c3d0403524189d" kindref="member">ThreadPoolJ::~ThreadPoolJ</ref>()<sp/>noexcept</highlight></codeline>
<codeline lineno="37"><highlight class="normal">{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classThreadPoolJ_a3cfc8aad20e8b95f97f7891651b3b9a4_1a3cfc8aad20e8b95f97f7891651b3b9a4" kindref="member">stop</ref>();</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classThreadPoolJ_a1b7cefb6988f2cf5c9eb395f54172a94_1a1b7cefb6988f2cf5c9eb395f54172a94" kindref="member">m_pool</ref>.clear();<sp/></highlight><highlight class="comment">//<sp/>needed<sp/>for<sp/>&quot;extraordinary<sp/>circumstances&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal">}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="classThreadPoolJ_af7a7289bd16577d221707d44a56d65aa_1af7a7289bd16577d221707d44a56d65aa" refkind="member"><highlight class="normal"><ref refid="classThreadPoolJ_a45e02b36197bf6c1ed3baa2ea4ee7924_1a45e02b36197bf6c1ed3baa2ea4ee7924" kindref="member">ThreadPoolJ::ThreadPoolJ</ref>(<sp/><ref refid="classThreadPoolJ" kindref="compound">ThreadPoolJ</ref><sp/>&amp;&amp;rhs<sp/>)<sp/>noexcept</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>:</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>m_pool{std::move(<sp/>rhs.m_pool<sp/>)},</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>m_tasks{std::move(<sp/>rhs.m_tasks<sp/>)}</highlight></codeline>
<codeline lineno="46"><highlight class="normal">{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>m_bEnabled<sp/>=<sp/>rhs.m_bEnabled;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>rhs.m_bEnabled<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="49"><highlight class="normal">}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="classThreadPoolJ_a17bcacc17bd62cb63b28eb7c8a261f51_1a17bcacc17bd62cb63b28eb7c8a261f51" refkind="member"><highlight class="normal"><ref refid="classThreadPoolJ" kindref="compound">ThreadPoolJ</ref>&amp;<sp/><ref refid="classThreadPoolJ_a8759bc70c7373545ead803142c195b43_1a8759bc70c7373545ead803142c195b43" kindref="member">ThreadPoolJ::operator=</ref>(<sp/><ref refid="classThreadPoolJ" kindref="compound">ThreadPoolJ</ref><sp/>&amp;&amp;rhs<sp/>)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal">{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classThreadPoolJ" kindref="compound">ThreadPoolJ</ref><sp/>tmp{std::move(<sp/>rhs<sp/>)};</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>std::swap(<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>tmp<sp/>);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="classThreadPoolJ_a4eed8445982bec0c3530502424a813a4_1a4eed8445982bec0c3530502424a813a4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classThreadPoolJ_a4eed8445982bec0c3530502424a813a4_1a4eed8445982bec0c3530502424a813a4" kindref="member">ThreadPoolJ::start</ref>()</highlight></codeline>
<codeline lineno="59"><highlight class="normal">{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!<ref refid="classThreadPoolJ_a1456022600a4ea8b213f5d883ddca031_1a1456022600a4ea8b213f5d883ddca031" kindref="member">m_bEnabled</ref><sp/>)</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classThreadPoolJ_acff3f687fabbf39480d9a4209a67904e_1acff3f687fabbf39480d9a4209a67904e" kindref="member">enable</ref>();</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classThreadPoolJ_a88b07ec3d369564de821d10986091426_1a88b07ec3d369564de821d10986091426" kindref="member">run</ref>();</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal">}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="classThreadPoolJ_a3cfc8aad20e8b95f97f7891651b3b9a4_1a3cfc8aad20e8b95f97f7891651b3b9a4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classThreadPoolJ_a3cfc8aad20e8b95f97f7891651b3b9a4_1a3cfc8aad20e8b95f97f7891651b3b9a4" kindref="member">ThreadPoolJ::stop</ref>()<sp/>noexcept</highlight></codeline>
<codeline lineno="69"><highlight class="normal">{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classThreadPoolJ_a1456022600a4ea8b213f5d883ddca031_1a1456022600a4ea8b213f5d883ddca031" kindref="member">m_bEnabled</ref><sp/>)</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classThreadPoolJ_a60154491a2f3080b64bafa4482325a3a_1a60154491a2f3080b64bafa4482325a3a" kindref="member">disable</ref>();</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classThreadPoolJ_aef4dca2090783fa0b169fb574ea3e8d2_1aef4dca2090783fa0b169fb574ea3e8d2" kindref="member">m_cond</ref>.notify_all();</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;t<sp/>:<sp/><ref refid="classThreadPoolJ_a1b7cefb6988f2cf5c9eb395f54172a94_1a1b7cefb6988f2cf5c9eb395f54172a94" kindref="member">m_pool</ref><sp/>)</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions__console_8h_af3e11288cb5021b91949be5058816137_1af3e11288cb5021b91949be5058816137" kindref="member">ASSERT</ref>(<sp/>t.get_stop_token().stop_possible(),<sp/></highlight><highlight class="stringliteral">&quot;Stop<sp/>is<sp/>not<sp/>possible!&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t.request_stop();</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>t.joinable()<sp/>)</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t.join();</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal">}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87" refid="classThreadPoolJ_acff3f687fabbf39480d9a4209a67904e_1acff3f687fabbf39480d9a4209a67904e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classThreadPoolJ_acff3f687fabbf39480d9a4209a67904e_1acff3f687fabbf39480d9a4209a67904e" kindref="member">ThreadPoolJ::enable</ref>()<sp/>noexcept</highlight></codeline>
<codeline lineno="88"><highlight class="normal">{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classThreadPoolJ_a1456022600a4ea8b213f5d883ddca031_1a1456022600a4ea8b213f5d883ddca031" kindref="member">m_bEnabled</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="90"><highlight class="normal">}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92" refid="classThreadPoolJ_a60154491a2f3080b64bafa4482325a3a_1a60154491a2f3080b64bafa4482325a3a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classThreadPoolJ_a60154491a2f3080b64bafa4482325a3a_1a60154491a2f3080b64bafa4482325a3a" kindref="member">ThreadPoolJ::disable</ref>()<sp/>noexcept</highlight></codeline>
<codeline lineno="93"><highlight class="normal">{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classThreadPoolJ_a1456022600a4ea8b213f5d883ddca031_1a1456022600a4ea8b213f5d883ddca031" kindref="member">m_bEnabled</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97" refid="classThreadPoolJ_a5b29093e3f530a39ff112af3ccf9ce49_1a5b29093e3f530a39ff112af3ccf9ce49" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classThreadPoolJ_a5b29093e3f530a39ff112af3ccf9ce49_1a5b29093e3f530a39ff112af3ccf9ce49" kindref="member">ThreadPoolJ::isEnabled</ref>()<sp/>const<sp/>noexcept</highlight></codeline>
<codeline lineno="98"><highlight class="normal">{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classThreadPoolJ_a1456022600a4ea8b213f5d883ddca031_1a1456022600a4ea8b213f5d883ddca031" kindref="member">m_bEnabled</ref>;</highlight></codeline>
<codeline lineno="100"><highlight class="normal">}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102" refid="classThreadPoolJ_a88b07ec3d369564de821d10986091426_1a88b07ec3d369564de821d10986091426" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classThreadPoolJ_a88b07ec3d369564de821d10986091426_1a88b07ec3d369564de821d10986091426" kindref="member">ThreadPoolJ::run</ref>()</highlight></codeline>
<codeline lineno="103"><highlight class="normal">{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>nthreads<sp/>=<sp/><ref refid="classThreadPoolJ_a1b7cefb6988f2cf5c9eb395f54172a94_1a1b7cefb6988f2cf5c9eb395f54172a94" kindref="member">m_pool</ref>.capacity();</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>`stop_token<sp/>st`<sp/>is<sp/>jthread&apos;s<sp/>own<sp/>stop_token<sp/>(not<sp/>some<sp/>random<sp/>argument<sp/>being<sp/>passed<sp/>to<sp/>the<sp/>thread&apos;s<sp/>function)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>threadMain<sp/>=<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">]<sp/>(<sp/>nonstd::stop_token<sp/>st<sp/>)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>thread<sp/>sleeps<sp/>forever<sp/>until<sp/>there&apos;s<sp/>a<sp/>task<sp/>available</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_lock&lt;std::mutex&gt;<sp/>ul{<ref refid="classThreadPoolJ_a4146b8e2ffbee3f47258434d757ba944_1a4146b8e2ffbee3f47258434d757ba944" kindref="member">m_mu</ref>};</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classThreadPoolJ_a7002faf8e57fa5b0d17e673a04de60e3_1a7002faf8e57fa5b0d17e673a04de60e3" kindref="member">m_tasks</ref>.empty()<sp/>&amp;&amp;<sp/><ref refid="classThreadPoolJ_a1456022600a4ea8b213f5d883ddca031_1a1456022600a4ea8b213f5d883ddca031" kindref="member">m_bEnabled</ref><sp/>)</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classThreadPoolJ_aef4dca2090783fa0b169fb574ea3e8d2_1aef4dca2090783fa0b169fb574ea3e8d2" kindref="member">m_cond</ref>.wait(<sp/>ul<sp/>);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!<ref refid="classThreadPoolJ_a1456022600a4ea8b213f5d883ddca031_1a1456022600a4ea8b213f5d883ddca031" kindref="member">m_bEnabled</ref><sp/>)</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!<ref refid="classThreadPoolJ_a7002faf8e57fa5b0d17e673a04de60e3_1a7002faf8e57fa5b0d17e673a04de60e3" kindref="member">m_tasks</ref>.empty()<sp/>)</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classThreadPoolJ_a8340923fea4d70543e295304b154689f_1a8340923fea4d70543e295304b154689f" kindref="member">Task</ref><sp/>task<sp/>=<sp/>std::move(<sp/><ref refid="classThreadPoolJ_a7002faf8e57fa5b0d17e673a04de60e3_1a7002faf8e57fa5b0d17e673a04de60e3" kindref="member">m_tasks</ref>.front()<sp/>);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classThreadPoolJ_a7002faf8e57fa5b0d17e673a04de60e3_1a7002faf8e57fa5b0d17e673a04de60e3" kindref="member">m_tasks</ref>.pop();</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ul.unlock();</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task(<sp/>st<sp/>);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>std::size_t<sp/>ti<sp/>=<sp/>0;<sp/>ti<sp/>&lt;<sp/>nthreads;<sp/>++ti<sp/>)</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classThreadPoolJ_a1b7cefb6988f2cf5c9eb395f54172a94_1a1b7cefb6988f2cf5c9eb395f54172a94" kindref="member">m_pool</ref>.emplace_back(<sp/>nonstd::jthread{std::move(<sp/>threadMain<sp/>)});</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal">}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacefunc__async" kindref="compound">func_async</ref></highlight></codeline>
<codeline lineno="141"><highlight class="normal">{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143" refid="namespacefunc__async_a224c931f9dead8e231b14ceb26da3617_1a224c931f9dead8e231b14ceb26da3617" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacefunc__async_a224c931f9dead8e231b14ceb26da3617_1a224c931f9dead8e231b14ceb26da3617" kindref="member">doPeriodically</ref>(<sp/>nonstd::stop_token<sp/>st,</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)&gt;<sp/>&amp;f,</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>intervalMs,</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>now<sp/>)</highlight></codeline>
<codeline lineno="147"><highlight class="normal">{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>now<sp/>)</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>!st.stop_requested()<sp/><sp/>)</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f();</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>chronoInterval<sp/>=<sp/>std::chrono::milliseconds(<sp/>intervalMs<sp/>);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>!st.stop_requested()<sp/>)</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::this_thread::sleep_for(<sp/>std::chrono::milliseconds(<sp/>intervalMs<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f();</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="164"><highlight class="normal">}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166" refid="namespacefunc__async_a5f3e4ca374f7de72954d29184be8f06d_1a5f3e4ca374f7de72954d29184be8f06d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacefunc__async_a5f3e4ca374f7de72954d29184be8f06d_1a5f3e4ca374f7de72954d29184be8f06d" kindref="member">doLater</ref>(<sp/>nonstd::stop_token<sp/>st,</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)&gt;<sp/>&amp;f,</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>intervalMs<sp/>)</highlight></codeline>
<codeline lineno="169"><highlight class="normal">{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>std::this_thread::sleep_for(<sp/>std::chrono::milliseconds(<sp/>intervalMs<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>f();</highlight></codeline>
<codeline lineno="172"><highlight class="normal">}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal">}</highlight><highlight class="comment">//<sp/>namespace<sp/>func_async</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="src/thread_poolj.cpp"/>
  </compounddef>
</doxygen>
