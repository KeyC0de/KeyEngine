<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="key__type__traits_8h" kind="file" language="C++">
    <compoundname>key_type_traits.h</compoundname>
    <includes local="no">type_traits</includes>
    <includedby refid="ui__component_8h" local="yes">inc/ui_component.h</includedby>
    <includedby refid="utils_8h" local="yes">inc/utils.h</includedby>
    <includedby refid="utils__global_8h" local="yes">inc/utils_global.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>inc/key_type_traits.h</label>
        <link refid="key__type__traits_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>type_traits</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="32">
        <label>inc/camera_frustum.h</label>
        <link refid="camera__frustum_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>inc/camera_widget.h</label>
        <link refid="camera__widget_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>inc/constant_buffer.h</label>
        <link refid="constant__buffer_8h"/>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>inc/constant_buffer_ex.h</label>
        <link refid="constant__buffer__ex_8h"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>inc/cube.h</label>
        <link refid="cube_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>inc/d3d_utils.h</label>
        <link refid="d3d__utils_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>inc/dynamic_constant_buffer.h</label>
        <link refid="dynamic__constant__buffer_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>inc/game.h</label>
        <link refid="game_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="49">
        <label>inc/graphics.h</label>
        <link refid="graphics_8h"/>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>inc/horizontal_blur_pass.h</label>
        <link refid="horizontal__blur__pass_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>inc/key_timer.h</label>
        <link refid="key__timer_8h"/>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>inc/key_type_traits.h</label>
        <link refid="key__type__traits_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>inc/line.h</label>
        <link refid="line_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>inc/math_utils.h</label>
        <link refid="math__utils_8h"/>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>inc/mesh.h</label>
        <link refid="mesh_8h"/>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="79">
        <label>inc/performance_log.h</label>
        <link refid="performance__log_8h"/>
        <childnode refid="80" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>inc/plane.h</label>
        <link refid="plane_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>inc/shadow_pass.h</label>
        <link refid="shadow__pass_8h"/>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>inc/sky_vscb.h</label>
        <link refid="sky__vscb_8h"/>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>inc/sphere.h</label>
        <link refid="sphere_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>inc/terrain.h</label>
        <link refid="terrain_8h"/>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>inc/transform_vscb.h</label>
        <link refid="transform__vscb_8h"/>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>inc/ui_component.h</label>
        <link refid="ui__component_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>inc/utils.h</label>
        <link refid="utils_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
      </node>
      <node id="92">
        <label>inc/utils_global.h</label>
        <link refid="utils__global_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>inc/vertical_blur_pass.h</label>
        <link refid="vertical__blur__pass_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>src/MODEL.CPP</label>
        <link refid="MODEL_8CPP"/>
      </node>
      <node id="52">
        <label>src/SHADOW_PASS.CPP</label>
        <link refid="SHADOW__PASS_8CPP"/>
      </node>
      <node id="88">
        <label>src/binder.cpp</label>
        <link refid="binder_8cpp"/>
      </node>
      <node id="89">
        <label>src/bitmap.cpp</label>
        <link refid="bitmap_8cpp"/>
      </node>
      <node id="56">
        <label>src/blend_state.cpp</label>
        <link refid="blend__state_8cpp"/>
      </node>
      <node id="57">
        <label>src/blur_outline_draw_pass.cpp</label>
        <link refid="blur__outline__draw__pass_8cpp"/>
      </node>
      <node id="83">
        <label>src/bmp_loader.cpp</label>
        <link refid="bmp__loader_8cpp"/>
      </node>
      <node id="9">
        <label>src/camera.cpp</label>
        <link refid="camera_8cpp"/>
      </node>
      <node id="33">
        <label>src/camera_frustum.cpp</label>
        <link refid="camera__frustum_8cpp"/>
      </node>
      <node id="58">
        <label>src/camera_manager.cpp</label>
        <link refid="camera__manager_8cpp"/>
      </node>
      <node id="35">
        <label>src/camera_widget.cpp</label>
        <link refid="camera__widget_8cpp"/>
      </node>
      <node id="81">
        <label>src/console.cpp</label>
        <link refid="console_8cpp"/>
      </node>
      <node id="24">
        <label>src/constant_buffer_ex.cpp</label>
        <link refid="constant__buffer__ex_8cpp"/>
      </node>
      <node id="25">
        <label>src/cube.cpp</label>
        <link refid="cube_8cpp"/>
      </node>
      <node id="59">
        <label>src/cube_texture.cpp</label>
        <link refid="cube__texture_8cpp"/>
      </node>
      <node id="10">
        <label>src/d3d_utils.cpp</label>
        <link refid="d3d__utils_8cpp"/>
      </node>
      <node id="60">
        <label>src/depth_stencil_state.cpp</label>
        <link refid="depth__stencil__state_8cpp"/>
      </node>
      <node id="61">
        <label>src/depth_stencil_view.cpp</label>
        <link refid="depth__stencil__view_8cpp"/>
      </node>
      <node id="46">
        <label>src/dynamic_constant_buffer.cpp</label>
        <link refid="dynamic__constant__buffer_8cpp"/>
      </node>
      <node id="62">
        <label>src/fullscreen_pass.cpp</label>
        <link refid="fullscreen__pass_8cpp"/>
      </node>
      <node id="3">
        <label>src/game.cpp</label>
        <link refid="game_8cpp"/>
      </node>
      <node id="84">
        <label>src/geometry.cpp</label>
        <link refid="geometry_8cpp"/>
      </node>
      <node id="63">
        <label>src/graphics.cpp</label>
        <link refid="graphics_8cpp"/>
      </node>
      <node id="64">
        <label>src/graphics_friend.cpp</label>
        <link refid="graphics__friend_8cpp"/>
      </node>
      <node id="20">
        <label>src/horizontal_blur_pass.cpp</label>
        <link refid="horizontal__blur__pass_8cpp"/>
      </node>
      <node id="11">
        <label>src/imgui_visitors.cpp</label>
        <link refid="imgui__visitors_8cpp"/>
      </node>
      <node id="65">
        <label>src/index_buffer.cpp</label>
        <link refid="index__buffer_8cpp"/>
      </node>
      <node id="66">
        <label>src/input_layout.cpp</label>
        <link refid="input__layout_8cpp"/>
      </node>
      <node id="43">
        <label>src/job.cpp</label>
        <link refid="job_8cpp"/>
      </node>
      <node id="82">
        <label>src/key_sound.cpp</label>
        <link refid="key__sound_8cpp"/>
      </node>
      <node id="12">
        <label>src/light_source.cpp</label>
        <link refid="light__source_8cpp"/>
      </node>
      <node id="26">
        <label>src/line.cpp</label>
        <link refid="line_8cpp"/>
      </node>
      <node id="42">
        <label>src/main.cpp</label>
        <link refid="main_8cpp"/>
      </node>
      <node id="44">
        <label>src/material.cpp</label>
        <link refid="material_8cpp"/>
      </node>
      <node id="27">
        <label>src/material_loader.cpp</label>
        <link refid="material__loader_8cpp"/>
      </node>
      <node id="85">
        <label>src/math_utils.cpp</label>
        <link refid="math__utils_8cpp"/>
      </node>
      <node id="13">
        <label>src/mesh.cpp</label>
        <link refid="mesh_8cpp"/>
      </node>
      <node id="67">
        <label>src/mouse_picker.cpp</label>
        <link refid="mouse__picker_8cpp"/>
      </node>
      <node id="14">
        <label>src/node.cpp</label>
        <link refid="node_8cpp"/>
      </node>
      <node id="90">
        <label>src/os_utils.cpp</label>
        <link refid="os__utils_8cpp"/>
      </node>
      <node id="68">
        <label>src/pass_2d.cpp</label>
        <link refid="pass__2d_8cpp"/>
      </node>
      <node id="80">
        <label>src/performance_log.cpp</label>
        <link refid="performance__log_8cpp"/>
      </node>
      <node id="86">
        <label>src/perlin_noise.cpp</label>
        <link refid="perlin__noise_8cpp"/>
      </node>
      <node id="69">
        <label>src/pixel_shader.cpp</label>
        <link refid="pixel__shader_8cpp"/>
      </node>
      <node id="28">
        <label>src/plane.cpp</label>
        <link refid="plane_8cpp"/>
      </node>
      <node id="70">
        <label>src/primitive_topology.cpp</label>
        <link refid="primitive__topology_8cpp"/>
      </node>
      <node id="71">
        <label>src/rasterizer_state.cpp</label>
        <link refid="rasterizer__state_8cpp"/>
      </node>
      <node id="72">
        <label>src/render_target.cpp</label>
        <link refid="render__target_8cpp"/>
      </node>
      <node id="21">
        <label>src/renderer.cpp</label>
        <link refid="renderer_8cpp"/>
      </node>
      <node id="87">
        <label>src/settings_manager.cpp</label>
        <link refid="settings__manager_8cpp"/>
      </node>
      <node id="54">
        <label>src/sky_pass.cpp</label>
        <link refid="sky__pass_8cpp"/>
      </node>
      <node id="55">
        <label>src/sky_vscb.cpp</label>
        <link refid="sky__vscb_8cpp"/>
      </node>
      <node id="29">
        <label>src/sphere.cpp</label>
        <link refid="sphere_8cpp"/>
      </node>
      <node id="15">
        <label>src/terrain.cpp</label>
        <link refid="terrain_8cpp"/>
      </node>
      <node id="16">
        <label>src/testing.cpp</label>
        <link refid="testing_8cpp"/>
      </node>
      <node id="73">
        <label>src/texture.cpp</label>
        <link refid="texture_8cpp"/>
      </node>
      <node id="74">
        <label>src/texture_sampler_state.cpp</label>
        <link refid="texture__sampler__state_8cpp"/>
      </node>
      <node id="45">
        <label>src/transform_vscb.cpp</label>
        <link refid="transform__vscb_8cpp"/>
      </node>
      <node id="4">
        <label>src/ui_component.cpp</label>
        <link refid="ui__component_8cpp"/>
      </node>
      <node id="5">
        <label>src/ui_pass.cpp</label>
        <link refid="ui__pass_8cpp"/>
      </node>
      <node id="91">
        <label>src/utils.cpp</label>
        <link refid="utils_8cpp"/>
      </node>
      <node id="75">
        <label>src/vertex_buffer.cpp</label>
        <link refid="vertex__buffer_8cpp"/>
      </node>
      <node id="76">
        <label>src/vertex_shader.cpp</label>
        <link refid="vertex__shader_8cpp"/>
      </node>
      <node id="23">
        <label>src/vertical_blur_pass.cpp</label>
        <link refid="vertical__blur__pass_8cpp"/>
      </node>
      <node id="77">
        <label>src/viewport.cpp</label>
        <link refid="viewport_8cpp"/>
      </node>
      <node id="78">
        <label>src/window.cpp</label>
        <link refid="window_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structis__string" prot="public">is_string</innerclass>
    <innerclass refid="structimplements" prot="public">implements</innerclass>
    <innerclass refid="structimplements_3_01T_00_01ExpressionTemplate_00_01std_1_1void__t_3_01ExpressionTemplate_3_01T_01_4_01_4_01_4" prot="public">implements&lt; T, ExpressionTemplate, std::void_t&lt; ExpressionTemplate&lt; T &gt; &gt; &gt;</innerclass>
    <innerclass refid="structis__template" prot="public">is_template</innerclass>
    <innerclass refid="structis__template_3_01T_3_01Types_8_8_8_01_4_01_4" prot="public">is_template&lt; T&lt; Types... &gt; &gt;</innerclass>
    <innerclass refid="structis__template_3_01T_3_01Type_00_01NonType_01_4_01_4" prot="public">is_template&lt; T&lt; Type, NonType &gt; &gt;</innerclass>
    <innerclass refid="structis__template_3_01T_3_01NonType_00_01Type_01_4_01_4" prot="public">is_template&lt; T&lt; NonType, Type &gt; &gt;</innerclass>
    <innerclass refid="structis__template_3_01T_3_01Type1_00_01Type2_00_01NonType_01_4_01_4" prot="public">is_template&lt; T&lt; Type1, Type2, NonType &gt; &gt;</innerclass>
    <innerclass refid="structis__template_3_01T_3_01NonType1_00_01NonType2_00_01Type_01_4_01_4" prot="public">is_template&lt; T&lt; NonType1, NonType2, Type &gt; &gt;</innerclass>
    <innerclass refid="structis__template_3_01T_3_01Type1_00_01NonType1_00_01Type2_01_4_01_4" prot="public">is_template&lt; T&lt; Type1, NonType1, Type2 &gt; &gt;</innerclass>
    <innerclass refid="structis__template_3_01T_3_01NonType_00_01Type1_00_01Type2_01_4_01_4" prot="public">is_template&lt; T&lt; NonType, Type1, Type2 &gt; &gt;</innerclass>
    <innerclass refid="structis__template_3_01T_3_01Type1_00_01Type2_00_01NonType1_00_01NonType2_01_4_01_4" prot="public">is_template&lt; T&lt; Type1, Type2, NonType1, NonType2 &gt; &gt;</innerclass>
    <innerclass refid="structis__instance__of" prot="public">is_instance_of</innerclass>
    <innerclass refid="structis__instance__of_3_01T_3_01TArgs_8_8_8_01_4_00_01T_01_4" prot="public">is_instance_of&lt; T&lt; TArgs... &gt;, T &gt;</innerclass>
    <innerclass refid="structis__stream__insertable" prot="public">is_stream_insertable</innerclass>
    <innerclass refid="structis__stream__insertable_3_01Stream_00_01T_01_4" prot="public">is_stream_insertable&lt; Stream, T &gt;</innerclass>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="key__type__traits_8h_ad8b3a7f85c98d6d62641bb3b4bdd8a8a_1ad8b3a7f85c98d6d62641bb3b4bdd8a8a" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>decltype(std::declval&lt; T &gt;().begin())</type>
        <definition>using begin_function =  decltype( std::declval&lt;T&gt;().begin() )</definition>
        <argsstring></argsstring>
        <name>begin_function</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/key_type_traits.h" line="19" column="1" bodyfile="inc/key_type_traits.h" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="key__type__traits_8h_abc54cd167508ec4e867472d1e0c83d0c_1abc54cd167508ec4e867472d1e0c83d0c" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>decltype(std::declval&lt; T &gt;().end())</type>
        <definition>using end_function =  decltype( std::declval&lt;T&gt;().end() )</definition>
        <argsstring></argsstring>
        <name>end_function</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/key_type_traits.h" line="22" column="1" bodyfile="inc/key_type_traits.h" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="key__type__traits_8h_a728ea9dd560cde51f72568f7b2432c83_1a728ea9dd560cde51f72568f7b2432c83" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>decltype(std::declval&lt; T &gt;().size())</type>
        <definition>using size_function =  decltype( std::declval&lt;T&gt;().size() )</definition>
        <argsstring></argsstring>
        <name>size_function</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/key_type_traits.h" line="25" column="1" bodyfile="inc/key_type_traits.h" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="key__type__traits_8h_affabd84f61f8384e3cd5be2344e3b854_1affabd84f61f8384e3cd5be2344e3b854" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>decltype(std::declval&lt; T &gt;().reserve(unsigned{}))</type>
        <definition>using reserve_function =  decltype( std::declval&lt;T&gt;().reserve( unsigned{} ) )</definition>
        <argsstring></argsstring>
        <name>reserve_function</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/key_type_traits.h" line="28" column="1" bodyfile="inc/key_type_traits.h" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="key__type__traits_8h_adfa4df8cd0707cb18d1f76596b59ea13_1adfa4df8cd0707cb18d1f76596b59ea13" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>decltype(std::declval&lt; T &gt;().push_back(std::declval&lt; typename <ref refid="key__type__traits_8h_a8830bb58807ed58aea5046e0894d8b93_1a8830bb58807ed58aea5046e0894d8b93" kindref="member">T::value_type</ref> &gt;()))</type>
        <definition>using push_back_function =  decltype( std::declval&lt;T&gt;().push_back( std::declval&lt;typename T::value_type&gt;() ) )</definition>
        <argsstring></argsstring>
        <name>push_back_function</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/key_type_traits.h" line="31" column="1" bodyfile="inc/key_type_traits.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="key__type__traits_8h_a8830bb58807ed58aea5046e0894d8b93_1a8830bb58807ed58aea5046e0894d8b93" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>typename T::value_type</type>
        <definition>using value_type =  typename T::value_type</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/key_type_traits.h" line="34" column="1" bodyfile="inc/key_type_traits.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="key__type__traits_8h_a343c3465085a5c614a84910f059611e1_1a343c3465085a5c614a84910f059611e1" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>typename T::iterator</type>
        <definition>using iterator =  typename T::iterator</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/key_type_traits.h" line="37" column="1" bodyfile="inc/key_type_traits.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="key__type__traits_8h_accc2b0e68473caaf9f083de3c063e167_1accc2b0e68473caaf9f083de3c063e167" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>decltype(&amp;T::operator())</type>
        <definition>using function_call_operator =  decltype( &amp;T::operator() )</definition>
        <argsstring></argsstring>
        <name>function_call_operator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/key_type_traits.h" line="40" column="1" bodyfile="inc/key_type_traits.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="key__type__traits_8h_a530c6cd44e66b6a10fe9e80e64178641_1a530c6cd44e66b6a10fe9e80e64178641" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>decltype(std::declval&lt; T &gt;()==std::declval&lt; T &gt;())</type>
        <definition>using eq_operator =  decltype( std::declval&lt;T&gt;() == std::declval&lt;T&gt;() )</definition>
        <argsstring></argsstring>
        <name>eq_operator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/key_type_traits.h" line="43" column="1" bodyfile="inc/key_type_traits.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="key__type__traits_8h_a5a0eb226361ffc66c53228693aac8a0d_1a5a0eb226361ffc66c53228693aac8a0d" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>decltype(std::declval&lt; T &gt;().operator*())</type>
        <definition>using deref_operator =  decltype( std::declval&lt;T&gt;().operator*() )</definition>
        <argsstring></argsstring>
        <name>deref_operator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/key_type_traits.h" line="46" column="1" bodyfile="inc/key_type_traits.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="key__type__traits_8h_ad395bda3e0492773966aa531ffb6d464_1ad395bda3e0492773966aa531ffb6d464" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>decltype(std::declval&lt; T &gt;().operator-&gt;())</type>
        <definition>using arrow_operator =  decltype( std::declval&lt;T&gt;().operator-&gt;() )</definition>
        <argsstring></argsstring>
        <name>arrow_operator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/key_type_traits.h" line="49" column="1" bodyfile="inc/key_type_traits.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="key__type__traits_8h_a5afe3e0d5a78f6f6742b2f99925e033d_1a5afe3e0d5a78f6f6742b2f99925e033d" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::is_pointer&lt; decltype(std::declval&lt; T &gt;().get())&gt;</type>
        <definition>using get_function =  std::is_pointer&lt;decltype( std::declval&lt;T&gt;().get() )&gt;</definition>
        <argsstring></argsstring>
        <name>get_function</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/key_type_traits.h" line="52" column="1" bodyfile="inc/key_type_traits.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="key__type__traits_8h_a82e10c3ce439e889952543d9797c93f3_1a82e10c3ce439e889952543d9797c93f3" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::conjunction&lt; typename std::iterator_traits&lt; T &gt;::difference_type, typename std::iterator_traits&lt; T &gt;<ref refid="key__type__traits_8h_a8830bb58807ed58aea5046e0894d8b93_1a8830bb58807ed58aea5046e0894d8b93" kindref="member">::value_type</ref>, typename std::iterator_traits&lt; T &gt;::pointer, typename std::iterator_traits&lt; T &gt;::reference, typename std::iterator_traits&lt; T &gt;::iterator_category &gt;</type>
        <definition>using all_iterator_traits =  std::conjunction&lt;typename std::iterator_traits&lt;T&gt;::difference_type,
	typename std::iterator_traits&lt;T&gt;::value_type,
	typename std::iterator_traits&lt;T&gt;::pointer,
	typename std::iterator_traits&lt;T&gt;::reference,
	typename std::iterator_traits&lt;T&gt;::iterator_category&gt;</definition>
        <argsstring></argsstring>
        <name>all_iterator_traits</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/key_type_traits.h" line="58" column="1" bodyfile="inc/key_type_traits.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="key__type__traits_8h_af65074bab7e8d3c1a3c5cf356f87314a_1af65074bab7e8d3c1a3c5cf356f87314a" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::conjunction&lt; <ref refid="key__type__traits_8h_a5a0eb226361ffc66c53228693aac8a0d_1a5a0eb226361ffc66c53228693aac8a0d" kindref="member">deref_operator</ref>&lt; T &gt;, <ref refid="key__type__traits_8h_ad395bda3e0492773966aa531ffb6d464_1ad395bda3e0492773966aa531ffb6d464" kindref="member">arrow_operator</ref>&lt; T &gt;, <ref refid="key__type__traits_8h_a5afe3e0d5a78f6f6742b2f99925e033d_1a5afe3e0d5a78f6f6742b2f99925e033d" kindref="member">get_function</ref>&lt; T &gt; &gt;</type>
        <definition>using pointer_wrapper_traits =  std::conjunction&lt;deref_operator&lt;T&gt;, arrow_operator&lt;T&gt;, get_function&lt;T&gt;&gt;</definition>
        <argsstring></argsstring>
        <name>pointer_wrapper_traits</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/key_type_traits.h" line="78" column="1" bodyfile="inc/key_type_traits.h" bodystart="78" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="key__type__traits_8h_a86a2e3fab8ec3012c24e41f2ad073cf9_1a86a2e3fab8ec3012c24e41f2ad073cf9" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool is_string_v</definition>
        <argsstring></argsstring>
        <name>is_string_v</name>
        <initializer>= <ref refid="structis__string" kindref="compound">is_string</ref>&lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/key_type_traits.h" line="16" column="16" bodyfile="inc/key_type_traits.h" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="key__type__traits_8h_abf3043ad2fae5481b729a347cd7e3d42_1abf3043ad2fae5481b729a347cd7e3d42" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>template&lt; typename &gt; class</type>
            <declname>ExpressionTemplate</declname>
            <defname>ExpressionTemplate</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool implements_v</definition>
        <argsstring></argsstring>
        <name>implements_v</name>
        <initializer>= <ref refid="structimplements" kindref="compound">implements</ref>&lt;T, ExpressionTemplate&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/key_type_traits.h" line="75" column="16" bodyfile="inc/key_type_traits.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="key__type__traits_8h_a0412179a5fb2def8c03a7096d4320492_1a0412179a5fb2def8c03a7096d4320492" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool is_iterator_v</definition>
        <argsstring></argsstring>
        <name>is_iterator_v</name>
        <initializer>= <ref refid="key__type__traits_8h_abf3043ad2fae5481b729a347cd7e3d42_1abf3043ad2fae5481b729a347cd7e3d42" kindref="member">implements_v</ref>&lt;T, <ref refid="key__type__traits_8h_a82e10c3ce439e889952543d9797c93f3_1a82e10c3ce439e889952543d9797c93f3" kindref="member">all_iterator_traits</ref>&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/key_type_traits.h" line="81" column="16" bodyfile="inc/key_type_traits.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="key__type__traits_8h_afd5235ab6d17ce521e2312cc80a317f9_1afd5235ab6d17ce521e2312cc80a317f9" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool is_container_v</definition>
        <argsstring></argsstring>
        <name>is_container_v</name>
        <initializer>= <ref refid="key__type__traits_8h_abf3043ad2fae5481b729a347cd7e3d42_1abf3043ad2fae5481b729a347cd7e3d42" kindref="member">implements_v</ref>&lt;T, <ref refid="key__type__traits_8h_ad8b3a7f85c98d6d62641bb3b4bdd8a8a_1ad8b3a7f85c98d6d62641bb3b4bdd8a8a" kindref="member">begin_function</ref>&gt; &amp;&amp; <ref refid="key__type__traits_8h_abf3043ad2fae5481b729a347cd7e3d42_1abf3043ad2fae5481b729a347cd7e3d42" kindref="member">implements_v</ref>&lt;T, <ref refid="key__type__traits_8h_abc54cd167508ec4e867472d1e0c83d0c_1abc54cd167508ec4e867472d1e0c83d0c" kindref="member">end_function</ref>&gt; &amp;&amp; <ref refid="key__type__traits_8h_abf3043ad2fae5481b729a347cd7e3d42_1abf3043ad2fae5481b729a347cd7e3d42" kindref="member">implements_v</ref>&lt;T, <ref refid="key__type__traits_8h_a728ea9dd560cde51f72568f7b2432c83_1a728ea9dd560cde51f72568f7b2432c83" kindref="member">size_function</ref>&gt; &amp;&amp; <ref refid="key__type__traits_8h_abf3043ad2fae5481b729a347cd7e3d42_1abf3043ad2fae5481b729a347cd7e3d42" kindref="member">implements_v</ref>&lt;T, <ref refid="key__type__traits_8h_a8830bb58807ed58aea5046e0894d8b93_1a8830bb58807ed58aea5046e0894d8b93" kindref="member">T::value_type</ref>&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/key_type_traits.h" line="84" column="16" bodyfile="inc/key_type_traits.h" bodystart="84" bodyend="-1"/>
        <referencedby refid="namespaceutil_a6ac2760c082e6c54ba90f23a4eed04d0_1a6ac2760c082e6c54ba90f23a4eed04d0" compoundref="utils_8h" startline="324" endline="330">util::filterContainer</referencedby>
      </memberdef>
      <memberdef kind="variable" id="key__type__traits_8h_a556f47159c3a3ebdcc381eb8d68a18fb_1a556f47159c3a3ebdcc381eb8d68a18fb" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool is_pointer_wrapper_v</definition>
        <argsstring></argsstring>
        <name>is_pointer_wrapper_v</name>
        <initializer>= <ref refid="key__type__traits_8h_abf3043ad2fae5481b729a347cd7e3d42_1abf3043ad2fae5481b729a347cd7e3d42" kindref="member">implements_v</ref>&lt;T, <ref refid="key__type__traits_8h_af65074bab7e8d3c1a3c5cf356f87314a_1af65074bab7e8d3c1a3c5cf356f87314a" kindref="member">pointer_wrapper_traits</ref>&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/key_type_traits.h" line="87" column="16" bodyfile="inc/key_type_traits.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="key__type__traits_8h_a4a6ccd81a0e0d0610ab8c55e874f85fc_1a4a6ccd81a0e0d0610ab8c55e874f85fc" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool is_template_v</definition>
        <argsstring></argsstring>
        <name>is_template_v</name>
        <initializer>= <ref refid="structis__template" kindref="compound">is_template</ref>&lt;T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/key_type_traits.h" line="139" column="16" bodyfile="inc/key_type_traits.h" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="key__type__traits_8h_af898369e9a38dcd69fae793524b152f3_1af898369e9a38dcd69fae793524b152f3" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool is_stream_insertable_v</definition>
        <argsstring></argsstring>
        <name>is_stream_insertable_v</name>
        <initializer>= <ref refid="structis__stream__insertable" kindref="compound">is_stream_insertable</ref>&lt;Stream, T&gt;::value</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/key_type_traits.h" line="163" column="16" bodyfile="inc/key_type_traits.h" bodystart="163" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="7" refid="structis__string" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structis__string" kindref="compound">is_string</ref></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::disjunction&lt;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_same&lt;char<sp/>*,<sp/>std::decay_t&lt;T&gt;&gt;,</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_same&lt;const<sp/>char<sp/>*,<sp/>std::decay_t&lt;T&gt;&gt;,</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_same&lt;std::string,<sp/>std::decay_t&lt;T&gt;&gt;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>&gt;</highlight></codeline>
<codeline lineno="13"><highlight class="normal">{};</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="16" refid="key__type__traits_8h_a86a2e3fab8ec3012c24e41f2ad073cf9_1a86a2e3fab8ec3012c24e41f2ad073cf9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="key__type__traits_8h_a86a2e3fab8ec3012c24e41f2ad073cf9_1a86a2e3fab8ec3012c24e41f2ad073cf9" kindref="member">is_string_v</ref><sp/>=<sp/><ref refid="structis__string" kindref="compound">is_string&lt;T&gt;::value</ref>;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="19" refid="key__type__traits_8h_ad8b3a7f85c98d6d62641bb3b4bdd8a8a_1ad8b3a7f85c98d6d62641bb3b4bdd8a8a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="key__type__traits_8h_ad8b3a7f85c98d6d62641bb3b4bdd8a8a_1ad8b3a7f85c98d6d62641bb3b4bdd8a8a" kindref="member">begin_function</ref><sp/>=<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(<sp/>std::declval&lt;T&gt;().begin()<sp/>);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="22" refid="key__type__traits_8h_abc54cd167508ec4e867472d1e0c83d0c_1abc54cd167508ec4e867472d1e0c83d0c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="key__type__traits_8h_abc54cd167508ec4e867472d1e0c83d0c_1abc54cd167508ec4e867472d1e0c83d0c" kindref="member">end_function</ref><sp/>=<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(<sp/>std::declval&lt;T&gt;().end()<sp/>);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="25" refid="key__type__traits_8h_a728ea9dd560cde51f72568f7b2432c83_1a728ea9dd560cde51f72568f7b2432c83" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="key__type__traits_8h_a728ea9dd560cde51f72568f7b2432c83_1a728ea9dd560cde51f72568f7b2432c83" kindref="member">size_function</ref><sp/>=<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(<sp/>std::declval&lt;T&gt;().size()<sp/>);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="28" refid="key__type__traits_8h_affabd84f61f8384e3cd5be2344e3b854_1affabd84f61f8384e3cd5be2344e3b854" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="key__type__traits_8h_affabd84f61f8384e3cd5be2344e3b854_1affabd84f61f8384e3cd5be2344e3b854" kindref="member">reserve_function</ref><sp/>=<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(<sp/>std::declval&lt;T&gt;().reserve(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">{}<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="31" refid="key__type__traits_8h_adfa4df8cd0707cb18d1f76596b59ea13_1adfa4df8cd0707cb18d1f76596b59ea13" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="key__type__traits_8h_adfa4df8cd0707cb18d1f76596b59ea13_1adfa4df8cd0707cb18d1f76596b59ea13" kindref="member">push_back_function</ref><sp/>=<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(<sp/>std::declval&lt;T&gt;().push_back(<sp/>std::declval&lt;typename<sp/>T::value_type&gt;()<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="34" refid="key__type__traits_8h_a8830bb58807ed58aea5046e0894d8b93_1a8830bb58807ed58aea5046e0894d8b93" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="key__type__traits_8h_a8830bb58807ed58aea5046e0894d8b93_1a8830bb58807ed58aea5046e0894d8b93" kindref="member">value_type</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::value_type;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="37" refid="key__type__traits_8h_a343c3465085a5c614a84910f059611e1_1a343c3465085a5c614a84910f059611e1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="key__type__traits_8h_a343c3465085a5c614a84910f059611e1_1a343c3465085a5c614a84910f059611e1" kindref="member">iterator</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::iterator;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="40" refid="key__type__traits_8h_accc2b0e68473caaf9f083de3c063e167_1accc2b0e68473caaf9f083de3c063e167" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="key__type__traits_8h_accc2b0e68473caaf9f083de3c063e167_1accc2b0e68473caaf9f083de3c063e167" kindref="member">function_call_operator</ref><sp/>=<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(<sp/>&amp;T::operator()<sp/>);<sp/></highlight><highlight class="comment">//<sp/>match<sp/>any<sp/>operator()<sp/>with<sp/>arbitrary<sp/>arity<sp/>and<sp/>parameter<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="43" refid="key__type__traits_8h_a530c6cd44e66b6a10fe9e80e64178641_1a530c6cd44e66b6a10fe9e80e64178641" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="key__type__traits_8h_a530c6cd44e66b6a10fe9e80e64178641_1a530c6cd44e66b6a10fe9e80e64178641" kindref="member">eq_operator</ref><sp/>=<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(<sp/>std::declval&lt;T&gt;()<sp/>==<sp/>std::declval&lt;T&gt;()<sp/>);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="46" refid="key__type__traits_8h_a5a0eb226361ffc66c53228693aac8a0d_1a5a0eb226361ffc66c53228693aac8a0d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="key__type__traits_8h_a5a0eb226361ffc66c53228693aac8a0d_1a5a0eb226361ffc66c53228693aac8a0d" kindref="member">deref_operator</ref><sp/>=<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(<sp/>std::declval&lt;T&gt;().operator*()<sp/>);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="49" refid="key__type__traits_8h_ad395bda3e0492773966aa531ffb6d464_1ad395bda3e0492773966aa531ffb6d464" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="key__type__traits_8h_ad395bda3e0492773966aa531ffb6d464_1ad395bda3e0492773966aa531ffb6d464" kindref="member">arrow_operator</ref><sp/>=<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(<sp/>std::declval&lt;T&gt;().operator-&gt;()<sp/>);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="52" refid="key__type__traits_8h_a5afe3e0d5a78f6f6742b2f99925e033d_1a5afe3e0d5a78f6f6742b2f99925e033d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="key__type__traits_8h_a5afe3e0d5a78f6f6742b2f99925e033d_1a5afe3e0d5a78f6f6742b2f99925e033d" kindref="member">get_function</ref><sp/>=<sp/>std::is_pointer&lt;decltype(<sp/>std::declval&lt;T&gt;().get()<sp/>)&gt;;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note:<sp/>it&apos;s<sp/>possible<sp/>that<sp/>an<sp/>iterator<sp/>doesn&apos;t<sp/>define<sp/>one<sp/>of<sp/>this<sp/>traits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>iterator_traits<sp/>are<sp/>still<sp/>valid<sp/>in<sp/>that<sp/>case<sp/>(std::iterator_traits<sp/>is<sp/>SFINAE-friendly)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">//<sp/>but<sp/>for<sp/>most<sp/>cases<sp/>this<sp/>check<sp/>is<sp/>what<sp/>we<sp/>want,<sp/>if<sp/>needed<sp/>we<sp/>can<sp/>add<sp/>exceptions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="58" refid="key__type__traits_8h_a82e10c3ce439e889952543d9797c93f3_1a82e10c3ce439e889952543d9797c93f3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="key__type__traits_8h_a82e10c3ce439e889952543d9797c93f3_1a82e10c3ce439e889952543d9797c93f3" kindref="member">all_iterator_traits</ref><sp/>=<sp/>std::conjunction&lt;typename<sp/>std::iterator_traits&lt;T&gt;::difference_type,</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::iterator_traits&lt;T&gt;::value_type,</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::iterator_traits&lt;T&gt;::pointer,</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::iterator_traits&lt;T&gt;::reference,</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::iterator_traits&lt;T&gt;::iterator_category&gt;;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ExpressionTemplate,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/>std::void_t&lt;&gt;&gt;</highlight></codeline>
<codeline lineno="65" refid="structimplements" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structimplements" kindref="compound">implements</ref></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>std::false_type</highlight></codeline>
<codeline lineno="67"><highlight class="normal">{};</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ExpressionTemplate&gt;</highlight></codeline>
<codeline lineno="70" refid="structimplements_3_01T_00_01ExpressionTemplate_00_01std_1_1void__t_3_01ExpressionTemplate_3_01T_01_4_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structimplements" kindref="compound">implements</ref>&lt;T,<sp/>ExpressionTemplate,<sp/>std::void_t&lt;ExpressionTemplate&lt;T&gt;&gt;&gt;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>std::true_type</highlight></codeline>
<codeline lineno="72"><highlight class="normal">{};</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ExpressionTemplate&gt;</highlight></codeline>
<codeline lineno="75" refid="key__type__traits_8h_abf3043ad2fae5481b729a347cd7e3d42_1abf3043ad2fae5481b729a347cd7e3d42" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="key__type__traits_8h_abf3043ad2fae5481b729a347cd7e3d42_1abf3043ad2fae5481b729a347cd7e3d42" kindref="member">implements_v</ref><sp/>=<sp/><ref refid="structimplements" kindref="compound">implements&lt;T, ExpressionTemplate&gt;::value</ref>;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="78" refid="key__type__traits_8h_af65074bab7e8d3c1a3c5cf356f87314a_1af65074bab7e8d3c1a3c5cf356f87314a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="key__type__traits_8h_af65074bab7e8d3c1a3c5cf356f87314a_1af65074bab7e8d3c1a3c5cf356f87314a" kindref="member">pointer_wrapper_traits</ref><sp/>=<sp/>std::conjunction&lt;deref_operator&lt;T&gt;,<sp/><ref refid="key__type__traits_8h_ad395bda3e0492773966aa531ffb6d464_1ad395bda3e0492773966aa531ffb6d464" kindref="member">arrow_operator&lt;T&gt;</ref>,<sp/><ref refid="key__type__traits_8h_a5afe3e0d5a78f6f6742b2f99925e033d_1a5afe3e0d5a78f6f6742b2f99925e033d" kindref="member">get_function&lt;T&gt;</ref>&gt;;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="81" refid="key__type__traits_8h_a0412179a5fb2def8c03a7096d4320492_1a0412179a5fb2def8c03a7096d4320492" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="key__type__traits_8h_a0412179a5fb2def8c03a7096d4320492_1a0412179a5fb2def8c03a7096d4320492" kindref="member">is_iterator_v</ref><sp/>=<sp/><ref refid="key__type__traits_8h_abf3043ad2fae5481b729a347cd7e3d42_1abf3043ad2fae5481b729a347cd7e3d42" kindref="member">implements_v&lt;T, all_iterator_traits&gt;</ref>;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="84" refid="key__type__traits_8h_afd5235ab6d17ce521e2312cc80a317f9_1afd5235ab6d17ce521e2312cc80a317f9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="key__type__traits_8h_afd5235ab6d17ce521e2312cc80a317f9_1afd5235ab6d17ce521e2312cc80a317f9" kindref="member">is_container_v</ref><sp/>=<sp/><ref refid="key__type__traits_8h_abf3043ad2fae5481b729a347cd7e3d42_1abf3043ad2fae5481b729a347cd7e3d42" kindref="member">implements_v&lt;T, begin_function&gt;</ref><sp/>&amp;&amp;<sp/><ref refid="key__type__traits_8h_abf3043ad2fae5481b729a347cd7e3d42_1abf3043ad2fae5481b729a347cd7e3d42" kindref="member">implements_v&lt;T, end_function&gt;</ref><sp/>&amp;&amp;<sp/><ref refid="key__type__traits_8h_abf3043ad2fae5481b729a347cd7e3d42_1abf3043ad2fae5481b729a347cd7e3d42" kindref="member">implements_v&lt;T, size_function&gt;</ref><sp/>&amp;&amp;<sp/><ref refid="key__type__traits_8h_abf3043ad2fae5481b729a347cd7e3d42_1abf3043ad2fae5481b729a347cd7e3d42" kindref="member">implements_v&lt;T, T::value_type&gt;</ref>;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="87" refid="key__type__traits_8h_a556f47159c3a3ebdcc381eb8d68a18fb_1a556f47159c3a3ebdcc381eb8d68a18fb" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="key__type__traits_8h_a556f47159c3a3ebdcc381eb8d68a18fb_1a556f47159c3a3ebdcc381eb8d68a18fb" kindref="member">is_pointer_wrapper_v</ref><sp/>=<sp/><ref refid="key__type__traits_8h_abf3043ad2fae5481b729a347cd7e3d42_1abf3043ad2fae5481b729a347cd7e3d42" kindref="member">implements_v&lt;T, pointer_wrapper_traits&gt;</ref>;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>some<sp/>type<sp/>T<sp/>is<sp/>a<sp/>template<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="91" refid="structis__template" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structis__template" kindref="compound">is_template</ref></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>std::false_type</highlight></codeline>
<codeline lineno="93"><highlight class="normal">{};</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>will<sp/>not<sp/>work<sp/>if<sp/>T<sp/>is<sp/>a<sp/>type<sp/>that<sp/>mix<sp/>&amp;<sp/>matches<sp/>non-type<sp/>with<sp/>typed<sp/>template<sp/>arguments<sp/>(eg.<sp/>std::array)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Types&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T,<sp/>typename...<sp/>Types&gt;</highlight></codeline>
<codeline lineno="97" refid="structis__template_3_01T_3_01Types_8_8_8_01_4_01_4" refkind="compound"><highlight class="normal">struct<sp/><ref refid="structis__template" kindref="compound">is_template</ref>&lt;T&lt;Types...&gt;&gt;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>std::true_type</highlight></codeline>
<codeline lineno="99"><highlight class="normal">{};</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>1<sp/>type<sp/>+<sp/>1<sp/>non-type<sp/>(eg<sp/>std::array)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type,<sp/>auto<sp/>NonType&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type,<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>NonType&gt;</highlight></codeline>
<codeline lineno="103" refid="structis__template_3_01T_3_01Type_00_01NonType_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structis__template" kindref="compound">is_template</ref>&lt;T&lt;Type,<sp/>NonType&gt;&gt;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>std::true_type</highlight></codeline>
<codeline lineno="105"><highlight class="normal">{};</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>few<sp/>other<sp/>combos<sp/>for<sp/>completion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;auto<sp/>NonType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T,<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>NonType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type&gt;</highlight></codeline>
<codeline lineno="109" refid="structis__template_3_01T_3_01NonType_00_01Type_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structis__template" kindref="compound">is_template</ref>&lt;T&lt;NonType,<sp/>Type&gt;&gt;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>std::true_type</highlight></codeline>
<codeline lineno="111"><highlight class="normal">{};</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type2,<sp/>auto<sp/>NonType&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type2,<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>NonType&gt;</highlight></codeline>
<codeline lineno="114" refid="structis__template_3_01T_3_01Type1_00_01Type2_00_01NonType_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structis__template" kindref="compound">is_template</ref>&lt;T&lt;Type1,<sp/>Type2,<sp/>NonType&gt;&gt;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>std::true_type</highlight></codeline>
<codeline lineno="116"><highlight class="normal">{};</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;auto<sp/>NonType1,<sp/>auto<sp/>NonType2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T,<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>NonType1,<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>NonType2,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type&gt;</highlight></codeline>
<codeline lineno="119" refid="structis__template_3_01T_3_01NonType1_00_01NonType2_00_01Type_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structis__template" kindref="compound">is_template</ref>&lt;T&lt;NonType1,<sp/>NonType2,<sp/>Type&gt;&gt;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>std::true_type</highlight></codeline>
<codeline lineno="121"><highlight class="normal">{};</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type1,<sp/>auto<sp/>NonType1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type2&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type1,<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>NonType1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type2&gt;</highlight></codeline>
<codeline lineno="124" refid="structis__template_3_01T_3_01Type1_00_01NonType1_00_01Type2_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structis__template" kindref="compound">is_template</ref>&lt;T&lt;Type1,<sp/>NonType1,<sp/>Type2&gt;&gt;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>std::true_type</highlight></codeline>
<codeline lineno="126"><highlight class="normal">{};</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;auto<sp/>NonType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type2&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T,<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>NonType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type2&gt;</highlight></codeline>
<codeline lineno="129" refid="structis__template_3_01T_3_01NonType_00_01Type1_00_01Type2_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structis__template" kindref="compound">is_template</ref>&lt;T&lt;NonType,<sp/>Type1,<sp/>Type2&gt;&gt;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>std::true_type</highlight></codeline>
<codeline lineno="131"><highlight class="normal">{};</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type2,<sp/>auto<sp/>NonType1,<sp/>auto<sp/>NonType2&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Type2,<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>NonType1,<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>NonType2&gt;</highlight></codeline>
<codeline lineno="134" refid="structis__template_3_01T_3_01Type1_00_01Type2_00_01NonType1_00_01NonType2_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structis__template" kindref="compound">is_template</ref>&lt;T&lt;Type1,<sp/>Type2,<sp/>NonType1,<sp/>NonType2&gt;&gt;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>std::true_type</highlight></codeline>
<codeline lineno="136"><highlight class="normal">{};</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="139" refid="key__type__traits_8h_a4a6ccd81a0e0d0610ab8c55e874f85fc_1a4a6ccd81a0e0d0610ab8c55e874f85fc" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="key__type__traits_8h_a4a6ccd81a0e0d0610ab8c55e874f85fc_1a4a6ccd81a0e0d0610ab8c55e874f85fc" kindref="member">is_template_v</ref><sp/>=<sp/><ref refid="structis__template" kindref="compound">is_template&lt;T&gt;::value</ref>;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>some<sp/>type<sp/>T<sp/>is<sp/>an<sp/>instance<sp/>of<sp/>a<sp/>specific<sp/>class<sp/>template</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TInstance,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T&gt;</highlight></codeline>
<codeline lineno="143" refid="structis__instance__of" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structis__instance__of" kindref="compound">is_instance_of</ref></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::false_type</highlight></codeline>
<codeline lineno="145"><highlight class="normal">{};</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>TArgs&gt;</highlight></codeline>
<codeline lineno="148" refid="structis__instance__of_3_01T_3_01TArgs_8_8_8_01_4_00_01T_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structis__instance__of" kindref="compound">is_instance_of</ref>&lt;T&lt;TArgs...&gt;,<sp/>T&gt;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::true_type</highlight></codeline>
<codeline lineno="150"><highlight class="normal">{};</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/>std::</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">_t&lt;&gt;&gt;</highlight></codeline>
<codeline lineno="153" refid="structis__stream__insertable" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structis__stream__insertable" kindref="compound">is_stream_insertable</ref></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>std::false_type</highlight></codeline>
<codeline lineno="155"><highlight class="normal">{};</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Stream,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="158" refid="structis__stream__insertable_3_01Stream_00_01T_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structis__stream__insertable" kindref="compound">is_stream_insertable</ref>&lt;Stream,<sp/>T&gt;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>decltype(<sp/>std::declval&lt;Stream&amp;&gt;()<sp/>&lt;&lt;<sp/>std::declval&lt;T&gt;(),<sp/>std::true_type()<sp/>)</highlight></codeline>
<codeline lineno="160"><highlight class="normal">{};</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal">template&lt;typename<sp/>Stream,<sp/>typename<sp/>T&gt;</highlight></codeline>
<codeline lineno="163" refid="key__type__traits_8h_af898369e9a38dcd69fae793524b152f3_1af898369e9a38dcd69fae793524b152f3" refkind="member"><highlight class="normal">constexpr<sp/>bool<sp/>is_stream_insertable_v<sp/>=<sp/>is_stream_insertable&lt;Stream,<sp/>T&gt;::value;</highlight></codeline>
    </programlisting>
    <location file="inc/key_type_traits.h"/>
  </compounddef>
</doxygen>
