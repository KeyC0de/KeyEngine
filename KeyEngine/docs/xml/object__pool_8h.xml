<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="object__pool_8h" kind="file" language="C++">
    <compoundname>object_pool.h</compoundname>
    <includes local="no">memory</includes>
    <includes refid="non__copyable_8h" local="yes">non_copyable.h</includes>
    <incdepgraph>
      <node id="3">
        <label>non_copyable.h</label>
        <link refid="non__copyable_8h"/>
      </node>
      <node id="1">
        <label>inc/object_pool.h</label>
        <link refid="object__pool_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>memory</label>
      </node>
    </incdepgraph>
    <innerclass refid="classObjectPool" prot="public">ObjectPool</innerclass>
    <innerclass refid="unionObjectPool_1_1Object" prot="private">ObjectPool::Object</innerclass>
    <innerclass refid="structObjectPool_1_1rebind" prot="public">ObjectPool::rebind</innerclass>
    <sectiondef kind="func">
      <memberdef kind="function" id="object__pool_8h_a858ae6fa8bae9073ca6cd84741bdee8a_1a858ae6fa8bae9073ca6cd84741bdee8a" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Other</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const ObjectPool&lt; T &gt; &amp;lhs, const ObjectPool&lt; Other &gt; &amp;rhs) noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classObjectPool" kindref="compound">ObjectPool</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classObjectPool" kindref="compound">ObjectPool</ref>&lt; Other &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/object_pool.h" line="129" column="6" bodyfile="inc/object_pool.h" bodystart="129" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="object__pool_8h_aa5e2bc8b1103fb971039f01ffd028917_1aa5e2bc8b1103fb971039f01ffd028917" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class Other</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const ObjectPool&lt; T &gt; &amp;lhs, const ObjectPool&lt; Other &gt; &amp;rhs) noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classObjectPool" kindref="compound">ObjectPool</ref>&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classObjectPool" kindref="compound">ObjectPool</ref>&lt; Other &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/object_pool.h" line="136" column="6" bodyfile="inc/object_pool.h" bodystart="136" bodyend="140"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="non__copyable_8h" kindref="compound">non_copyable.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="comment">//<sp/>\class<sp/><sp/><sp/>ObjectPool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>\author<sp/><sp/>Nikos<sp/>Lazaridis<sp/>(KeyC0de)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>\date<sp/><sp/><sp/><sp/>3-Oct-19</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>\brief<sp/><sp/><sp/>Pool<sp/>Allocator</highlight></codeline>
<codeline lineno="13"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="14" refid="classObjectPool" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classObjectPool" kindref="compound">ObjectPool</ref><sp/>final</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classNonCopyable" kindref="compound">NonCopyable</ref></highlight></codeline>
<codeline lineno="16"><highlight class="normal">{</highlight></codeline>
<codeline lineno="17" refid="unionObjectPool_1_1Object" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal"><ref refid="unionObjectPool_1_1Object" kindref="compound">Object</ref></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="19" refid="unionObjectPool_1_1Object_aef47ca0147f05b119bf29b783b22c78a_1aef47ca0147f05b119bf29b783b22c78a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::aligned_storage_t&lt;</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>T<sp/>),<sp/></highlight><highlight class="keyword">alignof</highlight><highlight class="normal">(<sp/>T<sp/>)&gt;<sp/><ref refid="unionObjectPool_1_1Object_aef47ca0147f05b119bf29b783b22c78a_1aef47ca0147f05b119bf29b783b22c78a" kindref="member">m_storage</ref>;</highlight></codeline>
<codeline lineno="20" refid="unionObjectPool_1_1Object_a74ec427780260e3b1ef8ae21fd6d60ae_1a74ec427780260e3b1ef8ae21fd6d60ae" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="unionObjectPool_1_1Object" kindref="compound">Object</ref><sp/>*<ref refid="unionObjectPool_1_1Object_a74ec427780260e3b1ef8ae21fd6d60ae_1a74ec427780260e3b1ef8ae21fd6d60ae" kindref="member">m_pNext</ref>;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="classObjectPool_a9f4f64b95a30f89419809ee8f30fc92f_1a9f4f64b95a30f89419809ee8f30fc92f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;Object[]&gt;<sp/><ref refid="classObjectPool_a9f4f64b95a30f89419809ee8f30fc92f_1a9f4f64b95a30f89419809ee8f30fc92f" kindref="member">m_pool</ref>;</highlight></codeline>
<codeline lineno="24" refid="classObjectPool_aaa415b3cb968dcb61ef6711f4d3c4c03_1aaa415b3cb968dcb61ef6711f4d3c4c03" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionObjectPool_1_1Object" kindref="compound">Object</ref><sp/>*<ref refid="classObjectPool_aaa415b3cb968dcb61ef6711f4d3c4c03_1aaa415b3cb968dcb61ef6711f4d3c4c03" kindref="member">m_pNextFree</ref>;</highlight></codeline>
<codeline lineno="25" refid="classObjectPool_ac393625c067bea5325dd1978084e6b47_1ac393625c067bea5325dd1978084e6b47" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/><ref refid="classObjectPool_ac393625c067bea5325dd1978084e6b47_1ac393625c067bea5325dd1978084e6b47" kindref="member">m_nObjs</ref>;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="27" refid="classObjectPool_a3e774e7272b0a82d646ffac444289db6_1a3e774e7272b0a82d646ffac444289db6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classObjectPool_a3e774e7272b0a82d646ffac444289db6_1a3e774e7272b0a82d646ffac444289db6" kindref="member">value_type</ref><sp/>=<sp/>T;</highlight></codeline>
<codeline lineno="28" refid="classObjectPool_a8c28e441fbf200b22110784d2d22ab36_1a8c28e441fbf200b22110784d2d22ab36" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classObjectPool_a8c28e441fbf200b22110784d2d22ab36_1a8c28e441fbf200b22110784d2d22ab36" kindref="member">pointer</ref><sp/>=<sp/>T*;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="classObjectPool_ae3b6a071a40dec3b4acc5a873c416b01_1ae3b6a071a40dec3b4acc5a873c416b01" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classObjectPool_ae3b6a071a40dec3b4acc5a873c416b01_1ae3b6a071a40dec3b4acc5a873c416b01" kindref="member">ObjectPool</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>nObjs<sp/>)</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classObjectPool_a9f4f64b95a30f89419809ee8f30fc92f_1a9f4f64b95a30f89419809ee8f30fc92f" kindref="member">m_pool</ref>{std::make_unique&lt;<ref refid="unionObjectPool_1_1Object" kindref="compound">Object</ref>[]&gt;(<sp/>nObjs<sp/>)},</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classObjectPool_aaa415b3cb968dcb61ef6711f4d3c4c03_1aaa415b3cb968dcb61ef6711f4d3c4c03" kindref="member">m_pNextFree</ref>{nullptr},</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classObjectPool_ac393625c067bea5325dd1978084e6b47_1ac393625c067bea5325dd1978084e6b47" kindref="member">m_nObjs</ref>(nObjs)</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>nObjs;<sp/>++i<sp/>)</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classObjectPool_a9f4f64b95a30f89419809ee8f30fc92f_1a9f4f64b95a30f89419809ee8f30fc92f" kindref="member">m_pool</ref>[i<sp/>-<sp/>1].m_pNext<sp/>=<sp/>&amp;<ref refid="classObjectPool_a9f4f64b95a30f89419809ee8f30fc92f_1a9f4f64b95a30f89419809ee8f30fc92f" kindref="member">m_pool</ref>[i];</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classObjectPool_aaa415b3cb968dcb61ef6711f4d3c4c03_1aaa415b3cb968dcb61ef6711f4d3c4c03" kindref="member">m_pNextFree</ref><sp/>=<sp/>&amp;<ref refid="classObjectPool_a9f4f64b95a30f89419809ee8f30fc92f_1a9f4f64b95a30f89419809ee8f30fc92f" kindref="member">m_pool</ref>[0];</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45" refid="classObjectPool_a93dd6b1dbb1f87e2e25cceb13d76e0ab_1a93dd6b1dbb1f87e2e25cceb13d76e0ab" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classObjectPool_a93dd6b1dbb1f87e2e25cceb13d76e0ab_1a93dd6b1dbb1f87e2e25cceb13d76e0ab" kindref="member">~ObjectPool</ref>()<sp/>noexcept<sp/>=<sp/>default;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="classObjectPool_af33673fed86d55a5f05fc99ceb49fc22_1af33673fed86d55a5f05fc99ceb49fc22" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classObjectPool" kindref="compound">ObjectPool</ref>(<sp/><ref refid="classObjectPool" kindref="compound">ObjectPool</ref><sp/>&amp;&amp;rhs<sp/>)<sp/>noexcept</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classObjectPool_a9f4f64b95a30f89419809ee8f30fc92f_1a9f4f64b95a30f89419809ee8f30fc92f" kindref="member">m_pool</ref>{std::move(<sp/>rhs.m_pool<sp/>)},</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classObjectPool_aaa415b3cb968dcb61ef6711f4d3c4c03_1aaa415b3cb968dcb61ef6711f4d3c4c03" kindref="member">m_pNextFree</ref>{rhs.m_pNextFree},</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classObjectPool_ac393625c067bea5325dd1978084e6b47_1ac393625c067bea5325dd1978084e6b47" kindref="member">m_nObjs</ref>{rhs.getSize()}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rhs.m_pNextFree<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="classObjectPool_aef644afca4b172a0826e7597ecb4e1a5_1aef644afca4b172a0826e7597ecb4e1a5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classObjectPool" kindref="compound">ObjectPool</ref>&amp;<sp/><ref refid="classObjectPool_aef644afca4b172a0826e7597ecb4e1a5_1aef644afca4b172a0826e7597ecb4e1a5" kindref="member">operator=</ref>(<sp/><ref refid="classObjectPool" kindref="compound">ObjectPool</ref><sp/>&amp;&amp;rhs<sp/>)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classObjectPool" kindref="compound">ObjectPool</ref><sp/>tmp{std::move(<sp/>rhs<sp/>)};</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::swap(<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>tmp<sp/>);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="64" refid="structObjectPool_1_1rebind" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structObjectPool_1_1rebind" kindref="compound">rebind</ref></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="66" refid="structObjectPool_1_1rebind_a77247220b9bea867f57ece1715519c76_1a77247220b9bea867f57ece1715519c76" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classObjectPool" kindref="compound">otherAllocator</ref><sp/>=<sp/><ref refid="classObjectPool" kindref="compound">ObjectPool&lt;U&gt;</ref>;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69" refid="classObjectPool_a2730a24e7e924ddcf0cee57d35866528_1a2730a24e7e924ddcf0cee57d35866528" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>T*<sp/><ref refid="classObjectPool_a2730a24e7e924ddcf0cee57d35866528_1a2730a24e7e924ddcf0cee57d35866528" kindref="member">address</ref>(<sp/>T<sp/>&amp;r<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;r;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74" refid="classObjectPool_a26818f2614771d79e113207b54f6ca31_1a26818f2614771d79e113207b54f6ca31" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/><ref refid="classObjectPool_a26818f2614771d79e113207b54f6ca31_1a26818f2614771d79e113207b54f6ca31" kindref="member">address</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;r<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;r;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>object<sp/>to<sp/>the<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]</highlight></codeline>
<codeline lineno="81" refid="classObjectPool_aade24458eccdfddc0ec175a5cec8d1ea_1aade24458eccdfddc0ec175a5cec8d1ea" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>T*<sp/><ref refid="classObjectPool_aade24458eccdfddc0ec175a5cec8d1ea_1aade24458eccdfddc0ec175a5cec8d1ea" kindref="member">allocate</ref>()</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classObjectPool_aaa415b3cb968dcb61ef6711f4d3c4c03_1aaa415b3cb968dcb61ef6711f4d3c4c03" kindref="member">m_pNextFree</ref><sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::bad_alloc{};</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>currentObj<sp/>=<sp/><ref refid="classObjectPool_aaa415b3cb968dcb61ef6711f4d3c4c03_1aaa415b3cb968dcb61ef6711f4d3c4c03" kindref="member">m_pNextFree</ref>;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classObjectPool_aaa415b3cb968dcb61ef6711f4d3c4c03_1aaa415b3cb968dcb61ef6711f4d3c4c03" kindref="member">m_pNextFree</ref><sp/>=<sp/>currentObj-&gt;<ref refid="unionObjectPool_1_1Object_a74ec427780260e3b1ef8ae21fd6d60ae_1a74ec427780260e3b1ef8ae21fd6d60ae" kindref="member">m_pNext</ref>;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">T*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>&amp;currentObj-&gt;m_storage<sp/>);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remove<sp/>object<sp/>from<sp/>the<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95" refid="classObjectPool_a9a0046c3811cd3b22b45c7c730d85915_1a9a0046c3811cd3b22b45c7c730d85915" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classObjectPool_a9a0046c3811cd3b22b45c7c730d85915_1a9a0046c3811cd3b22b45c7c730d85915" kindref="member">deallocate</ref>(<sp/>T<sp/>*p,</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[[maybe_unused]]<sp/>std::size_t<sp/>count<sp/>=<sp/>0<sp/>)<sp/>noexcept</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>o<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><ref refid="unionObjectPool_1_1Object" kindref="compound">Object</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>p<sp/>);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>o-&gt;<ref refid="unionObjectPool_1_1Object_a74ec427780260e3b1ef8ae21fd6d60ae_1a74ec427780260e3b1ef8ae21fd6d60ae" kindref="member">m_pNext</ref><sp/>=<sp/><ref refid="classObjectPool_aaa415b3cb968dcb61ef6711f4d3c4c03_1aaa415b3cb968dcb61ef6711f4d3c4c03" kindref="member">m_pNextFree</ref>;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classObjectPool_aaa415b3cb968dcb61ef6711f4d3c4c03_1aaa415b3cb968dcb61ef6711f4d3c4c03" kindref="member">m_pNextFree</ref><sp/>=<sp/>o;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pass<sp/>ctor<sp/>args</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>TArgs&gt;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>[[nodiscard]]</highlight></codeline>
<codeline lineno="106" refid="classObjectPool_a00b06a510030de58a1cea2ca9cc3c8fa_1a00b06a510030de58a1cea2ca9cc3c8fa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>T*<sp/><ref refid="classObjectPool_a00b06a510030de58a1cea2ca9cc3c8fa_1a00b06a510030de58a1cea2ca9cc3c8fa" kindref="member">construct</ref>(<sp/>TArgs...<sp/>args<sp/>)</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classObjectPool_aade24458eccdfddc0ec175a5cec8d1ea_1aade24458eccdfddc0ec175a5cec8d1ea" kindref="member">allocate</ref>()<sp/>)<sp/>T{std::forward&lt;TArgs&gt;(<sp/>args<sp/>)...};</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111" refid="classObjectPool_a874712d8c259e45121f90be4a2542cc3_1a874712d8c259e45121f90be4a2542cc3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classObjectPool_a874712d8c259e45121f90be4a2542cc3_1a874712d8c259e45121f90be4a2542cc3" kindref="member">destroy</ref>(<sp/>T<sp/>*p<sp/>)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>p<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p-&gt;~T();</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classObjectPool_a9a0046c3811cd3b22b45c7c730d85915_1a9a0046c3811cd3b22b45c7c730d85915" kindref="member">deallocate</ref>(<sp/>p<sp/>);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122" refid="classObjectPool_a422f245c28eb4070c9ca3a5d479e3012_1a422f245c28eb4070c9ca3a5d479e3012" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/><ref refid="classObjectPool_a422f245c28eb4070c9ca3a5d479e3012_1a422f245c28eb4070c9ca3a5d479e3012" kindref="member">getSize</ref>()<sp/>noexcept</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classObjectPool_ac393625c067bea5325dd1978084e6b47_1ac393625c067bea5325dd1978084e6b47" kindref="member">m_nObjs</ref>;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal">};</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Other&gt;</highlight></codeline>
<codeline lineno="129" refid="object__pool_8h_a858ae6fa8bae9073ca6cd84741bdee8a_1a858ae6fa8bae9073ca6cd84741bdee8a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="object__pool_8h_a858ae6fa8bae9073ca6cd84741bdee8a_1a858ae6fa8bae9073ca6cd84741bdee8a" kindref="member">operator==</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classObjectPool" kindref="compound">ObjectPool&lt;T&gt;</ref>&amp;<sp/>lhs,</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classObjectPool" kindref="compound">ObjectPool&lt;Other&gt;</ref>&amp;<sp/>rhs<sp/>)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal">{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.m_pool<sp/>==<sp/>rhs.m_pool;</highlight></codeline>
<codeline lineno="133"><highlight class="normal">}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Other&gt;</highlight></codeline>
<codeline lineno="136" refid="object__pool_8h_aa5e2bc8b1103fb971039f01ffd028917_1aa5e2bc8b1103fb971039f01ffd028917" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="object__pool_8h_aa5e2bc8b1103fb971039f01ffd028917_1aa5e2bc8b1103fb971039f01ffd028917" kindref="member">operator!=</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classObjectPool" kindref="compound">ObjectPool&lt;T&gt;</ref>&amp;<sp/>lhs,</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classObjectPool" kindref="compound">ObjectPool&lt;Other&gt;</ref>&amp;<sp/>rhs<sp/>)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal">{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.m_pool<sp/>!=<sp/>rhs.m_pool;</highlight></codeline>
<codeline lineno="140"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="inc/object_pool.h"/>
  </compounddef>
</doxygen>
