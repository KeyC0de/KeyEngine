<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="classcon_1_1CBElement" kind="class" language="C++" prot="public" final="yes">
    <compoundname>con::CBElement</compoundname>
    <includes refid="dynamic__constant__buffer_8h" local="no">dynamic_constant_buffer.h</includes>
    <innerclass refid="structcon_1_1CBElement_1_1IExtraData" prot="private">con::CBElement::IExtraData</innerclass>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="classcon_1_1CBElement_ab225b44e351c3535f90ac0faa77c517f_1ab225b44e351c3535f90ac0faa77c517f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class RawLayout</definition>
        <argsstring></argsstring>
        <name>RawLayout</name>
        <qualifiedname>con::CBElement::RawLayout</qualifiedname>
        <param>
          <type><ref refid="classcon_1_1RawLayout" kindref="compound">RawLayout</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/dynamic_constant_buffer.h" line="160" column="14" bodyfile="inc/dynamic_constant_buffer.h" bodystart="160" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classcon_1_1CBElement_ab9ca262c80934fdfea4294105e77633f_1ab9ca262c80934fdfea4294105e77633f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct</type>
        <definition>friend struct ExtraData</definition>
        <argsstring></argsstring>
        <name>ExtraData</name>
        <qualifiedname>con::CBElement::ExtraData</qualifiedname>
        <param>
          <type><ref refid="structcon_1_1ExtraData" kindref="compound">ExtraData</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/dynamic_constant_buffer.h" line="161" column="15" bodyfile="inc/dynamic_constant_buffer.h" bodystart="161" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classcon_1_1CBElement_a4331e8b8e88042cc3f31d6c211905cf6_1a4331e8b8e88042cc3f31d6c211905cf6" prot="private" static="no" mutable="no">
        <type>std::optional&lt; size_t &gt;</type>
        <definition>std::optional&lt;size_t&gt; con::CBElement::m_offset</definition>
        <argsstring></argsstring>
        <name>m_offset</name>
        <qualifiedname>con::CBElement::m_offset</qualifiedname>
        <briefdescription>
<para>each element stores its own offset. this makes lookup to find its position in the byte buffer fast. </para>
        </briefdescription>
        <detaileddescription>
<para>Special handling is required for situations where arrays are involved </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/dynamic_constant_buffer.h" line="165" column="15" bodyfile="inc/dynamic_constant_buffer.h" bodystart="165" bodyend="-1"/>
        <referencedby refid="classcon_1_1CBElement_aa0637d334183629490387108aa049da6_1aa0637d334183629490387108aa049da6" compoundref="dynamic__constant__buffer_8cpp" startline="222" endline="230">commitArray</referencedby>
        <referencedby refid="classcon_1_1CBElement_afe4c1a6fc881c66a02892246305f579d_1afe4c1a6fc881c66a02892246305f579d" compoundref="dynamic__constant__buffer_8cpp" startline="209" endline="220">commitStruct</referencedby>
        <referencedby refid="classcon_1_1CBElement_abfcc38e1bcdc516d45c7b56c19b7a032_1abfcc38e1bcdc516d45c7b56c19b7a032" compoundref="dynamic__constant__buffer_8cpp" startline="88" endline="91">getOffsetBegin</referencedby>
        <referencedby refid="classcon_1_1CBElement_a5f530e1452487417567ea1bbdb28c07e_1a5f530e1452487417567ea1bbdb28c07e" compoundref="dynamic__constant__buffer_8cpp" startline="93" endline="116">getOffsetEnd</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classcon_1_1CBElement_a89f52c943b9001e904a3b46d2ff159e0_1a89f52c943b9001e904a3b46d2ff159e0" prot="private" static="no" mutable="no">
        <type><ref refid="namespacecon_a715a53e528376e9d85ea035a2db279a5_1a715a53e528376e9d85ea035a2db279a5" kindref="member">ElementType</ref></type>
        <definition>ElementType con::CBElement::m_type</definition>
        <argsstring></argsstring>
        <name>m_type</name>
        <qualifiedname>con::CBElement::m_type</qualifiedname>
        <initializer>= <ref refid="namespacecon_a715a53e528376e9d85ea035a2db279a5_1a715a53e528376e9d85ea035a2db279a5aa0f2a80cc2e22505f9ff4d7920dd6ec6" kindref="member">Empty</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/dynamic_constant_buffer.h" line="166" column="13" bodyfile="inc/dynamic_constant_buffer.h" bodystart="166" bodyend="-1"/>
        <referencedby refid="classcon_1_1CBElement_a63af17d93b614366c28d6369e4300649_1a63af17d93b614366c28d6369e4300649" compoundref="dynamic__constant__buffer_8cpp" startline="28" endline="43">calcSignature</referencedby>
        <referencedby refid="classcon_1_1CBElement_a41e7f4ce7d974d6ebe38532ba6358ef4_1a41e7f4ce7d974d6ebe38532ba6358ef4" compoundref="dynamic__constant__buffer_8h" startline="206" endline="220">fetch</referencedby>
        <referencedby refid="classcon_1_1CBElement_a5f530e1452487417567ea1bbdb28c07e_1a5f530e1452487417567ea1bbdb28c07e" compoundref="dynamic__constant__buffer_8cpp" startline="93" endline="116">getOffsetEnd</referencedby>
        <referencedby refid="classcon_1_1CBElement_a3c31c032036577e4ff120b9df5363877_1a3c31c032036577e4ff120b9df5363877" compoundref="dynamic__constant__buffer_8cpp" startline="45" endline="48">isValid</referencedby>
        <referencedby refid="classcon_1_1CBElement_a3dc600a60c844b48c3d4a24ff7783e78_1a3dc600a60c844b48c3d4a24ff7783e78" compoundref="dynamic__constant__buffer_8cpp" startline="77" endline="81">T</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classcon_1_1CBElement_a8255f8b646dcd4cdb770bc7d00171e72_1a8255f8b646dcd4cdb770bc7d00171e72" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="structcon_1_1CBElement_1_1IExtraData" kindref="compound">IExtraData</ref> &gt;</type>
        <definition>std::unique_ptr&lt;IExtraData&gt; con::CBElement::m_pExtraData</definition>
        <argsstring></argsstring>
        <name>m_pExtraData</name>
        <qualifiedname>con::CBElement::m_pExtraData</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/dynamic_constant_buffer.h" line="167" column="17" bodyfile="inc/dynamic_constant_buffer.h" bodystart="167" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classcon_1_1CBElement_a63af17d93b614366c28d6369e4300649_1a63af17d93b614366c28d6369e4300649" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string con::CBElement::calcSignature</definition>
        <argsstring>() const cond_noex</argsstring>
        <name>calcSignature</name>
        <qualifiedname>con::CBElement::calcSignature</qualifiedname>
        <briefdescription>
<para>get a string signature for this element (recursive); when called on the root </para>
        </briefdescription>
        <detaileddescription>
<para>element of a layout tree, generates a uniquely-identifying string for the layout</para>
<para>we can use that signature to store a codex of layouts and to share layouts </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/dynamic_constant_buffer.h" line="172" column="13" bodyfile="src/dynamic_constant_buffer.cpp" bodystart="28" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="classcon_1_1CBElement_a3c31c032036577e4ff120b9df5363877_1a3c31c032036577e4ff120b9df5363877" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool con::CBElement::isValid</definition>
        <argsstring>() const noexcept</argsstring>
        <name>isValid</name>
        <qualifiedname>con::CBElement::isValid</qualifiedname>
        <briefdescription>
<para>Check if element is &quot;real&quot;. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/dynamic_constant_buffer.h" line="174" column="6" bodyfile="src/dynamic_constant_buffer.cpp" bodystart="45" bodyend="48"/>
        <referencedby refid="classcon_1_1CBElementConstView_a6ec6cf0ae7f6da181f4ccf2a58d0357a_1a6ec6cf0ae7f6da181f4ccf2a58d0357a" compoundref="dynamic__constant__buffer_8cpp" startline="339" endline="342">con::CBElementConstView::isValid</referencedby>
        <referencedby refid="classcon_1_1CBElementView_ae9e73eaac96101a36682721aa5e6be15_1ae9e73eaac96101a36682721aa5e6be15" compoundref="dynamic__constant__buffer_8cpp" startline="385" endline="388">con::CBElementView::isValid</referencedby>
      </memberdef>
      <memberdef kind="function" id="classcon_1_1CBElement_a8a90f9c56e1847ff5aa05c8a61005192_1a8a90f9c56e1847ff5aa05c8a61005192" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; size_t, const <ref refid="classcon_1_1CBElement" kindref="compound">CBElement</ref> * &gt;</type>
        <definition>std::pair&lt; size_t, const CBElement * &gt; con::CBElement::calculateArrayIndexingOffset</definition>
        <argsstring>(const size_t offset, const size_t index) const cond_noex</argsstring>
        <name>calculateArrayIndexingOffset</name>
        <qualifiedname>con::CBElement::calculateArrayIndexingOffset</qualifiedname>
        <param>
          <type>const size_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>calculate array indexing offset - tricky </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/dynamic_constant_buffer.h" line="176" column="11" bodyfile="src/dynamic_constant_buffer.cpp" bodystart="50" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="classcon_1_1CBElement_a6d3aa5a18126043ef7e3851d6a4b7cc6_1a6d3aa5a18126043ef7e3851d6a4b7cc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcon_1_1CBElement" kindref="compound">CBElement</ref> &amp;</type>
        <definition>CBElement &amp; con::CBElement::operator[]</definition>
        <argsstring>(const std::string &amp;key) cond_noex</argsstring>
        <name>operator[]</name>
        <qualifiedname>con::CBElement::operator[]</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>[] only works for Structs; access element (child node in tree) by name </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/dynamic_constant_buffer.h" line="178" column="11" bodyfile="src/dynamic_constant_buffer.cpp" bodystart="59" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="classcon_1_1CBElement_a110609bbe02e3794d1f45b46c63877fd_1a110609bbe02e3794d1f45b46c63877fd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classcon_1_1CBElement" kindref="compound">CBElement</ref> &amp;</type>
        <definition>const CBElement &amp; con::CBElement::operator[]</definition>
        <argsstring>(const std::string &amp;key) const cond_noex</argsstring>
        <name>operator[]</name>
        <qualifiedname>con::CBElement::operator[]</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/dynamic_constant_buffer.h" line="179" column="17" bodyfile="src/dynamic_constant_buffer.cpp" bodystart="72" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classcon_1_1CBElement_a3dc600a60c844b48c3d4a24ff7783e78_1a3dc600a60c844b48c3d4a24ff7783e78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcon_1_1CBElement" kindref="compound">CBElement</ref> &amp;</type>
        <definition>CBElement &amp; con::CBElement::T</definition>
        <argsstring>() cond_noex</argsstring>
        <name>T</name>
        <qualifiedname>con::CBElement::T</qualifiedname>
        <briefdescription>
<para><ref refid="classcon_1_1CBElement_a3dc600a60c844b48c3d4a24ff7783e78_1a3dc600a60c844b48c3d4a24ff7783e78" kindref="member">T()</ref> only works for Arrays; gets the array class layout object. </para>
        </briefdescription>
        <detaileddescription>
<para>needed to further configure an array&apos;s class </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/dynamic_constant_buffer.h" line="182" column="11" bodyfile="src/dynamic_constant_buffer.cpp" bodystart="77" bodyend="81"/>
        <referencedby refid="classcon_1_1CBElement_ad229412309e3fdcee3400b35c6eba18a_1ad229412309e3fdcee3400b35c6eba18a" compoundref="dynamic__constant__buffer_8cpp" startline="83" endline="86">T</referencedby>
      </memberdef>
      <memberdef kind="function" id="classcon_1_1CBElement_ad229412309e3fdcee3400b35c6eba18a_1ad229412309e3fdcee3400b35c6eba18a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classcon_1_1CBElement" kindref="compound">CBElement</ref> &amp;</type>
        <definition>const CBElement &amp; con::CBElement::T</definition>
        <argsstring>() const cond_noex</argsstring>
        <name>T</name>
        <qualifiedname>con::CBElement::T</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/dynamic_constant_buffer.h" line="183" column="17" bodyfile="src/dynamic_constant_buffer.cpp" bodystart="83" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classcon_1_1CBElement_abfcc38e1bcdc516d45c7b56c19b7a032_1abfcc38e1bcdc516d45c7b56c19b7a032" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t con::CBElement::getOffsetBegin</definition>
        <argsstring>() const cond_noex</argsstring>
        <name>getOffsetBegin</name>
        <qualifiedname>con::CBElement::getOffsetBegin</qualifiedname>
        <briefdescription>
<para>offset based- functions only work after finalization! </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/dynamic_constant_buffer.h" line="185" column="8" bodyfile="src/dynamic_constant_buffer.cpp" bodystart="88" bodyend="91"/>
        <referencedby refid="classcon_1_1CBElement_a39ea03a517d27ee0ed154b9f167ca104_1a39ea03a517d27ee0ed154b9f167ca104" compoundref="dynamic__constant__buffer_8cpp" startline="118" endline="121">getSizeInBytes</referencedby>
      </memberdef>
      <memberdef kind="function" id="classcon_1_1CBElement_a5f530e1452487417567ea1bbdb28c07e_1a5f530e1452487417567ea1bbdb28c07e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t con::CBElement::getOffsetEnd</definition>
        <argsstring>() const cond_noex</argsstring>
        <name>getOffsetEnd</name>
        <qualifiedname>con::CBElement::getOffsetEnd</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/dynamic_constant_buffer.h" line="186" column="8" bodyfile="src/dynamic_constant_buffer.cpp" bodystart="93" bodyend="116"/>
        <referencedby refid="classcon_1_1CBElement_aa0637d334183629490387108aa049da6_1aa0637d334183629490387108aa049da6" compoundref="dynamic__constant__buffer_8cpp" startline="222" endline="230">commitArray</referencedby>
        <referencedby refid="classcon_1_1CBElement_a39ea03a517d27ee0ed154b9f167ca104_1a39ea03a517d27ee0ed154b9f167ca104" compoundref="dynamic__constant__buffer_8cpp" startline="118" endline="121">getSizeInBytes</referencedby>
      </memberdef>
      <memberdef kind="function" id="classcon_1_1CBElement_a39ea03a517d27ee0ed154b9f167ca104_1a39ea03a517d27ee0ed154b9f167ca104" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t con::CBElement::getSizeInBytes</definition>
        <argsstring>() const cond_noex</argsstring>
        <name>getSizeInBytes</name>
        <qualifiedname>con::CBElement::getSizeInBytes</qualifiedname>
        <briefdescription>
<para>get size in bytes derived from offsets </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/dynamic_constant_buffer.h" line="188" column="8" bodyfile="src/dynamic_constant_buffer.cpp" bodystart="118" bodyend="121"/>
        <referencedby refid="classIConstantBufferEx_adcce676e6fdded705b765915736adf6d_1adcce676e6fdded705b765915736adf6d" compoundref="constant__buffer__ex_8cpp" startline="7" endline="28">IConstantBufferEx::IConstantBufferEx</referencedby>
      </memberdef>
      <memberdef kind="function" id="classcon_1_1CBElement_a87ecde2b649ee3a518a5f99d94d488fb_1a87ecde2b649ee3a518a5f99d94d488fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcon_1_1CBElement" kindref="compound">CBElement</ref> &amp;</type>
        <definition>CBElement &amp; con::CBElement::add</definition>
        <argsstring>(const ElementType addedType, const std::string &amp;name) cond_noex</argsstring>
        <name>add</name>
        <qualifiedname>con::CBElement::add</qualifiedname>
        <param>
          <type>const <ref refid="namespacecon_a715a53e528376e9d85ea035a2db279a5_1a715a53e528376e9d85ea035a2db279a5" kindref="member">ElementType</ref></type>
          <declname>addedType</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>only works for Structs; add <ref refid="classcon_1_1CBElement" kindref="compound">CBElement</ref> to struct </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/dynamic_constant_buffer.h" line="190" column="11" bodyfile="src/dynamic_constant_buffer.cpp" bodystart="123" bodyend="138"/>
        <referencedby refid="classcon_1_1CBElement_a91f66519fa6fbb1983c731da6414be33_1a91f66519fa6fbb1983c731da6414be33" compoundref="dynamic__constant__buffer_8h" startline="192" endline="195">add</referencedby>
        <referencedby refid="classcon_1_1RawLayout_ac4cd4dabf994fd33e4cfb154e0dbe94c_1ac4cd4dabf994fd33e4cfb154e0dbe94c" compoundref="dynamic__constant__buffer_8h" startline="297" endline="300">con::RawLayout::add</referencedby>
      </memberdef>
      <memberdef kind="function" id="classcon_1_1CBElement_a91f66519fa6fbb1983c731da6414be33_1a91f66519fa6fbb1983c731da6414be33" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespacecon_a715a53e528376e9d85ea035a2db279a5_1a715a53e528376e9d85ea035a2db279a5" kindref="member">ElementType</ref></type>
            <declname>elem</declname>
            <defname>elem</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classcon_1_1CBElement" kindref="compound">CBElement</ref> &amp;</type>
        <definition>CBElement &amp; con::CBElement::add</definition>
        <argsstring>(const std::string &amp;key) cond_noex</argsstring>
        <name>add</name>
        <qualifiedname>con::CBElement::add</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/dynamic_constant_buffer.h" line="192" column="11" bodyfile="inc/dynamic_constant_buffer.h" bodystart="192" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="classcon_1_1CBElement_a9706f2df6cef0aa0efccd615ef002334_1a9706f2df6cef0aa0efccd615ef002334" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcon_1_1CBElement" kindref="compound">CBElement</ref> &amp;</type>
        <definition>CBElement &amp; con::CBElement::set</definition>
        <argsstring>(const ElementType addedType, const size_t size) cond_noex</argsstring>
        <name>set</name>
        <qualifiedname>con::CBElement::set</qualifiedname>
        <param>
          <type>const <ref refid="namespacecon_a715a53e528376e9d85ea035a2db279a5_1a715a53e528376e9d85ea035a2db279a5" kindref="member">ElementType</ref></type>
          <declname>addedType</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>only works for Arrays; set the class and the # of elements </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/dynamic_constant_buffer.h" line="197" column="11" bodyfile="src/dynamic_constant_buffer.cpp" bodystart="140" bodyend="149"/>
        <referencedby refid="classcon_1_1CBElement_a9899d0f0f1031e3804682f12e72a1c47_1a9899d0f0f1031e3804682f12e72a1c47" compoundref="dynamic__constant__buffer_8h" startline="199" endline="202">set</referencedby>
      </memberdef>
      <memberdef kind="function" id="classcon_1_1CBElement_a9899d0f0f1031e3804682f12e72a1c47_1a9899d0f0f1031e3804682f12e72a1c47" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="namespacecon_a715a53e528376e9d85ea035a2db279a5_1a715a53e528376e9d85ea035a2db279a5" kindref="member">ElementType</ref></type>
            <declname>elem</declname>
            <defname>elem</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classcon_1_1CBElement" kindref="compound">CBElement</ref> &amp;</type>
        <definition>CBElement &amp; con::CBElement::set</definition>
        <argsstring>(const size_t size) cond_noex</argsstring>
        <name>set</name>
        <qualifiedname>con::CBElement::set</qualifiedname>
        <param>
          <type>const size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/dynamic_constant_buffer.h" line="199" column="11" bodyfile="inc/dynamic_constant_buffer.h" bodystart="199" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="classcon_1_1CBElement_a41e7f4ce7d974d6ebe38532ba6358ef4_1a41e7f4ce7d974d6ebe38532ba6358ef4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classcon_1_1CBElement_a3dc600a60c844b48c3d4a24ff7783e78_1a3dc600a60c844b48c3d4a24ff7783e78" kindref="member">T</ref></type>
          </param>
        </templateparamlist>
        <type>const size_t</type>
        <definition>const size_t con::CBElement::fetch</definition>
        <argsstring>() const cond_noex</argsstring>
        <name>fetch</name>
        <qualifiedname>con::CBElement::fetch</qualifiedname>
        <briefdescription>
<para>returns offset of leaf types for read/write purposes w/ typecheck in Debug </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/dynamic_constant_buffer.h" line="206" column="14" bodyfile="inc/dynamic_constant_buffer.h" bodystart="206" bodyend="220"/>
        <referencedby refid="classcon_1_1CBElementConstView_a6f91bfd0a80d8bab26f29ed77d24a5e4_1a6f91bfd0a80d8bab26f29ed77d24a5e4" compoundref="dynamic__constant__buffer_8h" startline="387" endline="391">con::CBElementConstView::operator const T &amp;</referencedby>
        <referencedby refid="classcon_1_1CBElementView_a63649e2ff6f113b4a1a872032386f22a_1a63649e2ff6f113b4a1a872032386f22a" compoundref="dynamic__constant__buffer_8h" startline="450" endline="454">con::CBElementView::operator T&amp;</referencedby>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classcon_1_1CBElement_a15d8885bf5657b191a9ea1bba92522c8_1a15d8885bf5657b191a9ea1bba92522c8" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>con::CBElement::CBElement</definition>
        <argsstring>() noexcept=default</argsstring>
        <name>CBElement</name>
        <qualifiedname>con::CBElement::CBElement</qualifiedname>
        <briefdescription>
<para>construct an empty layout element </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/dynamic_constant_buffer.h" line="223" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classcon_1_1CBElement_a0b0f8f36f25e8269c6792a6990d76740_1a0b0f8f36f25e8269c6792a6990d76740" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>con::CBElement::CBElement</definition>
        <argsstring>(const ElementType typeIn) cond_noex</argsstring>
        <name>CBElement</name>
        <qualifiedname>con::CBElement::CBElement</qualifiedname>
        <param>
          <type>const <ref refid="namespacecon_a715a53e528376e9d85ea035a2db279a5_1a715a53e528376e9d85ea035a2db279a5" kindref="member">ElementType</ref></type>
          <declname>typeIn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/dynamic_constant_buffer.h" line="224" column="1" bodyfile="src/dynamic_constant_buffer.cpp" bodystart="151" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="classcon_1_1CBElement_ad1c5e26a1f0424cc00b81c4a0860f61b_1ad1c5e26a1f0424cc00b81c4a0860f61b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const size_t</type>
        <definition>const size_t con::CBElement::commit</definition>
        <argsstring>(const size_t offsetIn) cond_noex</argsstring>
        <name>commit</name>
        <qualifiedname>con::CBElement::commit</qualifiedname>
        <param>
          <type>const size_t</type>
          <declname>offsetIn</declname>
        </param>
        <briefdescription>
<para>sets all offsets for element and subelements, prepending padding when necessary </para>
        </briefdescription>
        <detaileddescription>
<para>returns offset directly after this element </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/dynamic_constant_buffer.h" line="227" column="14" bodyfile="src/dynamic_constant_buffer.cpp" bodystart="166" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="classcon_1_1CBElement_a8aaf2878bfbd36368d13f7d4bf6e4805_1a8aaf2878bfbd36368d13f7d4bf6e4805" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string con::CBElement::getSignatureForStruct</definition>
        <argsstring>() const cond_noex</argsstring>
        <name>getSignatureForStruct</name>
        <qualifiedname>con::CBElement::getSignatureForStruct</qualifiedname>
        <briefdescription>
<para>implementations for GetSignature for aggregate types </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/dynamic_constant_buffer.h" line="229" column="13" bodyfile="src/dynamic_constant_buffer.cpp" bodystart="186" bodyend="196"/>
        <referencedby refid="classcon_1_1CBElement_a63af17d93b614366c28d6369e4300649_1a63af17d93b614366c28d6369e4300649" compoundref="dynamic__constant__buffer_8cpp" startline="28" endline="43">calcSignature</referencedby>
      </memberdef>
      <memberdef kind="function" id="classcon_1_1CBElement_aec507d5cedb307bae9264071d6637060_1aec507d5cedb307bae9264071d6637060" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string con::CBElement::calcSignatureForArray</definition>
        <argsstring>() const cond_noex</argsstring>
        <name>calcSignatureForArray</name>
        <qualifiedname>con::CBElement::calcSignatureForArray</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/dynamic_constant_buffer.h" line="230" column="13" bodyfile="src/dynamic_constant_buffer.cpp" bodystart="198" bodyend="207"/>
        <referencedby refid="classcon_1_1CBElement_a63af17d93b614366c28d6369e4300649_1a63af17d93b614366c28d6369e4300649" compoundref="dynamic__constant__buffer_8cpp" startline="28" endline="43">calcSignature</referencedby>
      </memberdef>
      <memberdef kind="function" id="classcon_1_1CBElement_afe4c1a6fc881c66a02892246305f579d_1afe4c1a6fc881c66a02892246305f579d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const size_t</type>
        <definition>const size_t con::CBElement::commitStruct</definition>
        <argsstring>(const size_t offsetIn)</argsstring>
        <name>commitStruct</name>
        <qualifiedname>con::CBElement::commitStruct</qualifiedname>
        <param>
          <type>const size_t</type>
          <declname>offsetIn</declname>
        </param>
        <briefdescription>
<para>implementations for commit for aggregate types </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/dynamic_constant_buffer.h" line="232" column="14" bodyfile="src/dynamic_constant_buffer.cpp" bodystart="209" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="classcon_1_1CBElement_aa0637d334183629490387108aa049da6_1aa0637d334183629490387108aa049da6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const size_t</type>
        <definition>const size_t con::CBElement::commitArray</definition>
        <argsstring>(const size_t offsetIn)</argsstring>
        <name>commitArray</name>
        <qualifiedname>con::CBElement::commitArray</qualifiedname>
        <param>
          <type>const size_t</type>
          <declname>offsetIn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/dynamic_constant_buffer.h" line="233" column="14" bodyfile="src/dynamic_constant_buffer.cpp" bodystart="222" bodyend="230"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classcon_1_1CBElement_a0a44b5a3ab00bdd02a7c9e56e251f5e2_1a0a44b5a3ab00bdd02a7c9e56e251f5e2" prot="private" static="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classcon_1_1CBElement" kindref="compound">CBElement</ref> &amp;</type>
        <definition>static CBElement &amp; con::CBElement::getEmptyElement</definition>
        <argsstring>() noexcept</argsstring>
        <name>getEmptyElement</name>
        <qualifiedname>con::CBElement::getEmptyElement</qualifiedname>
        <briefdescription>
<para>returns singleton instance of empty layout element </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/dynamic_constant_buffer.h" line="236" column="18" bodyfile="inc/dynamic_constant_buffer.h" bodystart="236" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="classcon_1_1CBElement_a660664a976c007e801542806637b36d5_1a660664a976c007e801542806637b36d5" prot="private" static="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>const size_t</type>
        <definition>const size_t con::CBElement::advanceToBoundary</definition>
        <argsstring>(const size_t offset) noexcept</argsstring>
        <name>advanceToBoundary</name>
        <qualifiedname>con::CBElement::advanceToBoundary</qualifiedname>
        <param>
          <type>const size_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
<para>returns the value of offset bumped up to the next 16-byte boundary (if not already on one) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/dynamic_constant_buffer.h" line="242" column="21" bodyfile="src/dynamic_constant_buffer.cpp" bodystart="250" bodyend="253"/>
        <referencedby refid="classcon_1_1CBElement_aa0637d334183629490387108aa049da6_1aa0637d334183629490387108aa049da6" compoundref="dynamic__constant__buffer_8cpp" startline="222" endline="230">commitArray</referencedby>
        <referencedby refid="classcon_1_1CBElement_afe4c1a6fc881c66a02892246305f579d_1afe4c1a6fc881c66a02892246305f579d" compoundref="dynamic__constant__buffer_8cpp" startline="209" endline="220">commitStruct</referencedby>
        <referencedby refid="classcon_1_1CBElement_a5f530e1452487417567ea1bbdb28c07e_1a5f530e1452487417567ea1bbdb28c07e" compoundref="dynamic__constant__buffer_8cpp" startline="93" endline="116">getOffsetEnd</referencedby>
      </memberdef>
      <memberdef kind="function" id="classcon_1_1CBElement_aa660d68d6a37b667305ad93931e21dc8_1aa660d68d6a37b667305ad93931e21dc8" prot="private" static="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool con::CBElement::doesCrossBoundary</definition>
        <argsstring>(const size_t offset, const size_t size) noexcept</argsstring>
        <name>doesCrossBoundary</name>
        <qualifiedname>con::CBElement::doesCrossBoundary</qualifiedname>
        <param>
          <type>const size_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>return true if a memory block crosses a boundary </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/dynamic_constant_buffer.h" line="244" column="13" bodyfile="src/dynamic_constant_buffer.cpp" bodystart="232" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="classcon_1_1CBElement_abeb8a1332b29412bb8020bf4d1e3aba6_1abeb8a1332b29412bb8020bf4d1e3aba6" prot="private" static="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>const size_t</type>
        <definition>const size_t con::CBElement::advanceIfCrossesBoundary</definition>
        <argsstring>(const size_t offset, const size_t size) noexcept</argsstring>
        <name>advanceIfCrossesBoundary</name>
        <qualifiedname>con::CBElement::advanceIfCrossesBoundary</qualifiedname>
        <param>
          <type>const size_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>advance an offset to next boundary if block crosses a boundary </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/dynamic_constant_buffer.h" line="246" column="21" bodyfile="src/dynamic_constant_buffer.cpp" bodystart="242" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="classcon_1_1CBElement_ab9061a1808f74ab485346d776425a9ac_1ab9061a1808f74ab485346d776425a9ac" prot="private" static="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool con::CBElement::validateMemberName</definition>
        <argsstring>(const std::string &amp;name) noexcept</argsstring>
        <name>validateMemberName</name>
        <qualifiedname>con::CBElement::validateMemberName</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>check string for validity as a struct key </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/dynamic_constant_buffer.h" line="248" column="13" bodyfile="src/dynamic_constant_buffer.cpp" bodystart="255" bodyend="265"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para><ref refid="classcon_1_1CBElement" kindref="compound">CBElement</ref> instances form a tree that describes the layout of the data buffer. </para>
    </briefdescription>
    <detaileddescription>
<para>=============================================================</para>
<para><simplesect kind="author"><para>KeyC0de </para>
</simplesect>
<simplesect kind="date"><para>2022/08/21 19:55</para>
</simplesect>
supporting nested aggregates of structs and arrays</para>
<para>friend relationships are used liberally throught the DynamicConstant system</para>
<para>instead of seeing the various classes in this system as encapsulated decoupled units,</para>
<para>they must be viewed as aspect of one large monolithic system</para>
<para>the reason for the friend relationships is generally so that intermediate</para>
<para>classes that the client should not create can have their constructors made private, <heading level="1">so that cookLayout() cannot be called on arbitrary CBElements, etc. </heading>
</para>
    </detaileddescription>
    <location file="inc/dynamic_constant_buffer.h" line="147" column="1" bodyfile="inc/dynamic_constant_buffer.h" bodystart="148" bodyend="249"/>
    <listofallmembers>
      <member refid="classcon_1_1CBElement_a87ecde2b649ee3a518a5f99d94d488fb_1a87ecde2b649ee3a518a5f99d94d488fb" prot="public" virt="non-virtual"><scope>con::CBElement</scope><name>add</name></member>
      <member refid="classcon_1_1CBElement_a91f66519fa6fbb1983c731da6414be33_1a91f66519fa6fbb1983c731da6414be33" prot="public" virt="non-virtual"><scope>con::CBElement</scope><name>add</name></member>
      <member refid="classcon_1_1CBElement_abeb8a1332b29412bb8020bf4d1e3aba6_1abeb8a1332b29412bb8020bf4d1e3aba6" prot="private" virt="non-virtual"><scope>con::CBElement</scope><name>advanceIfCrossesBoundary</name></member>
      <member refid="classcon_1_1CBElement_a660664a976c007e801542806637b36d5_1a660664a976c007e801542806637b36d5" prot="private" virt="non-virtual"><scope>con::CBElement</scope><name>advanceToBoundary</name></member>
      <member refid="classcon_1_1CBElement_a63af17d93b614366c28d6369e4300649_1a63af17d93b614366c28d6369e4300649" prot="public" virt="non-virtual"><scope>con::CBElement</scope><name>calcSignature</name></member>
      <member refid="classcon_1_1CBElement_aec507d5cedb307bae9264071d6637060_1aec507d5cedb307bae9264071d6637060" prot="private" virt="non-virtual"><scope>con::CBElement</scope><name>calcSignatureForArray</name></member>
      <member refid="classcon_1_1CBElement_a8a90f9c56e1847ff5aa05c8a61005192_1a8a90f9c56e1847ff5aa05c8a61005192" prot="public" virt="non-virtual"><scope>con::CBElement</scope><name>calculateArrayIndexingOffset</name></member>
      <member refid="classcon_1_1CBElement_a15d8885bf5657b191a9ea1bba92522c8_1a15d8885bf5657b191a9ea1bba92522c8" prot="private" virt="non-virtual"><scope>con::CBElement</scope><name>CBElement</name></member>
      <member refid="classcon_1_1CBElement_a0b0f8f36f25e8269c6792a6990d76740_1a0b0f8f36f25e8269c6792a6990d76740" prot="private" virt="non-virtual"><scope>con::CBElement</scope><name>CBElement</name></member>
      <member refid="classcon_1_1CBElement_ad1c5e26a1f0424cc00b81c4a0860f61b_1ad1c5e26a1f0424cc00b81c4a0860f61b" prot="private" virt="non-virtual"><scope>con::CBElement</scope><name>commit</name></member>
      <member refid="classcon_1_1CBElement_aa0637d334183629490387108aa049da6_1aa0637d334183629490387108aa049da6" prot="private" virt="non-virtual"><scope>con::CBElement</scope><name>commitArray</name></member>
      <member refid="classcon_1_1CBElement_afe4c1a6fc881c66a02892246305f579d_1afe4c1a6fc881c66a02892246305f579d" prot="private" virt="non-virtual"><scope>con::CBElement</scope><name>commitStruct</name></member>
      <member refid="classcon_1_1CBElement_aa660d68d6a37b667305ad93931e21dc8_1aa660d68d6a37b667305ad93931e21dc8" prot="private" virt="non-virtual"><scope>con::CBElement</scope><name>doesCrossBoundary</name></member>
      <member refid="classcon_1_1CBElement_ab9ca262c80934fdfea4294105e77633f_1ab9ca262c80934fdfea4294105e77633f" prot="private" virt="non-virtual"><scope>con::CBElement</scope><name>ExtraData</name></member>
      <member refid="classcon_1_1CBElement_a41e7f4ce7d974d6ebe38532ba6358ef4_1a41e7f4ce7d974d6ebe38532ba6358ef4" prot="public" virt="non-virtual"><scope>con::CBElement</scope><name>fetch</name></member>
      <member refid="classcon_1_1CBElement_a0a44b5a3ab00bdd02a7c9e56e251f5e2_1a0a44b5a3ab00bdd02a7c9e56e251f5e2" prot="private" virt="non-virtual"><scope>con::CBElement</scope><name>getEmptyElement</name></member>
      <member refid="classcon_1_1CBElement_abfcc38e1bcdc516d45c7b56c19b7a032_1abfcc38e1bcdc516d45c7b56c19b7a032" prot="public" virt="non-virtual"><scope>con::CBElement</scope><name>getOffsetBegin</name></member>
      <member refid="classcon_1_1CBElement_a5f530e1452487417567ea1bbdb28c07e_1a5f530e1452487417567ea1bbdb28c07e" prot="public" virt="non-virtual"><scope>con::CBElement</scope><name>getOffsetEnd</name></member>
      <member refid="classcon_1_1CBElement_a8aaf2878bfbd36368d13f7d4bf6e4805_1a8aaf2878bfbd36368d13f7d4bf6e4805" prot="private" virt="non-virtual"><scope>con::CBElement</scope><name>getSignatureForStruct</name></member>
      <member refid="classcon_1_1CBElement_a39ea03a517d27ee0ed154b9f167ca104_1a39ea03a517d27ee0ed154b9f167ca104" prot="public" virt="non-virtual"><scope>con::CBElement</scope><name>getSizeInBytes</name></member>
      <member refid="classcon_1_1CBElement_a3c31c032036577e4ff120b9df5363877_1a3c31c032036577e4ff120b9df5363877" prot="public" virt="non-virtual"><scope>con::CBElement</scope><name>isValid</name></member>
      <member refid="classcon_1_1CBElement_a4331e8b8e88042cc3f31d6c211905cf6_1a4331e8b8e88042cc3f31d6c211905cf6" prot="private" virt="non-virtual"><scope>con::CBElement</scope><name>m_offset</name></member>
      <member refid="classcon_1_1CBElement_a8255f8b646dcd4cdb770bc7d00171e72_1a8255f8b646dcd4cdb770bc7d00171e72" prot="private" virt="non-virtual"><scope>con::CBElement</scope><name>m_pExtraData</name></member>
      <member refid="classcon_1_1CBElement_a89f52c943b9001e904a3b46d2ff159e0_1a89f52c943b9001e904a3b46d2ff159e0" prot="private" virt="non-virtual"><scope>con::CBElement</scope><name>m_type</name></member>
      <member refid="classcon_1_1CBElement_a6d3aa5a18126043ef7e3851d6a4b7cc6_1a6d3aa5a18126043ef7e3851d6a4b7cc6" prot="public" virt="non-virtual"><scope>con::CBElement</scope><name>operator[]</name></member>
      <member refid="classcon_1_1CBElement_a110609bbe02e3794d1f45b46c63877fd_1a110609bbe02e3794d1f45b46c63877fd" prot="public" virt="non-virtual"><scope>con::CBElement</scope><name>operator[]</name></member>
      <member refid="classcon_1_1CBElement_ab225b44e351c3535f90ac0faa77c517f_1ab225b44e351c3535f90ac0faa77c517f" prot="private" virt="non-virtual"><scope>con::CBElement</scope><name>RawLayout</name></member>
      <member refid="classcon_1_1CBElement_a9706f2df6cef0aa0efccd615ef002334_1a9706f2df6cef0aa0efccd615ef002334" prot="public" virt="non-virtual"><scope>con::CBElement</scope><name>set</name></member>
      <member refid="classcon_1_1CBElement_a9899d0f0f1031e3804682f12e72a1c47_1a9899d0f0f1031e3804682f12e72a1c47" prot="public" virt="non-virtual"><scope>con::CBElement</scope><name>set</name></member>
      <member refid="classcon_1_1CBElement_a3dc600a60c844b48c3d4a24ff7783e78_1a3dc600a60c844b48c3d4a24ff7783e78" prot="public" virt="non-virtual"><scope>con::CBElement</scope><name>T</name></member>
      <member refid="classcon_1_1CBElement_ad229412309e3fdcee3400b35c6eba18a_1ad229412309e3fdcee3400b35c6eba18a" prot="public" virt="non-virtual"><scope>con::CBElement</scope><name>T</name></member>
      <member refid="classcon_1_1CBElement_ab9061a1808f74ab485346d776425a9ac_1ab9061a1808f74ab485346d776425a9ac" prot="private" virt="non-virtual"><scope>con::CBElement</scope><name>validateMemberName</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
