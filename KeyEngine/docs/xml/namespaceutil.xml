<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="namespaceutil" kind="namespace" language="C++">
    <compoundname>util</compoundname>
    <innerclass refid="classutil_1_1ByteSet" prot="public">util::ByteSet</innerclass>
    <sectiondef kind="var">
      <memberdef kind="variable" id="namespaceutil_a23ec3e810ff1d58d291e93e5b7153559_1a23ec3e810ff1d58d291e93e5b7153559" prot="public" static="yes" mutable="no">
        <type>auto</type>
        <definition>auto util::s_XMZero</definition>
        <argsstring></argsstring>
        <name>s_XMZero</name>
        <qualifiedname>util::s_XMZero</qualifiedname>
        <initializer>= DirectX::XMVectorZero()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/d3d_utils.h" line="31" column="13" bodyfile="inc/d3d_utils.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceutil_a9cb19702de08e7aca317e7a795f37040_1a9cb19702de08e7aca317e7a795f37040" prot="public" static="no" constexpr="yes" mutable="no">
        <type>float</type>
        <definition>float util::PI</definition>
        <argsstring></argsstring>
        <name>PI</name>
        <qualifiedname>util::PI</qualifiedname>
        <initializer>= 3.14159265f</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/math_utils.h" line="16" column="17" bodyfile="inc/math_utils.h" bodystart="16" bodyend="-1"/>
        <referencedby refid="classCamera_a60f0edb6285926aad69f4dfcbfa11896_1a60f0edb6285926aad69f4dfcbfa11896" compoundref="camera_8cpp" startline="24" endline="29">Camera::getShadowProjectionMatrix</referencedby>
        <referencedby refid="structGeometry_afafcbc076c42fa8fc3fa44592e755385_1afafcbc076c42fa8fc3fa44592e755385" compoundref="geometry_8cpp" startline="156" endline="252">Geometry::makeSphereTesselated</referencedby>
        <referencedby refid="classCamera_a6c7571eacc74a16f4ec5473afca8feaa_1a6c7571eacc74a16f4ec5473afca8feaa" compoundref="camera_8cpp" startline="375" endline="389">Camera::rotateRel</referencedby>
        <referencedby refid="namespaceutil_a80c74393452d6c7fb4ac1d854c905c8a_1a80c74393452d6c7fb4ac1d854c905c8a" compoundref="math__utils_8h" startline="330" endline="333">toDegrees</referencedby>
        <referencedby refid="namespaceutil_a9ae2547dbf481d93da2a600fcab91ffa_1a9ae2547dbf481d93da2a600fcab91ffa" compoundref="math__utils_8h" startline="323" endline="326">toRadians</referencedby>
      </memberdef>
      <memberdef kind="variable" id="namespaceutil_a1df469c258d832b8be26b2ca436ee115_1a1df469c258d832b8be26b2ca436ee115" prot="public" static="no" constexpr="yes" mutable="no">
        <type>double</type>
        <definition>double util::PI_D</definition>
        <argsstring></argsstring>
        <name>PI_D</name>
        <qualifiedname>util::PI_D</qualifiedname>
        <initializer>= 3.1415926535897932</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/math_utils.h" line="17" column="18" bodyfile="inc/math_utils.h" bodystart="17" bodyend="-1"/>
        <referencedby refid="namespaceutil_ac8a2092a72d02aa310e114fc79673f57_1ac8a2092a72d02aa310e114fc79673f57" compoundref="math__utils_8h" startline="354" endline="360">gaussian1d</referencedby>
        <referencedby refid="namespaceutil_a1810a179a19e611ea6d512b61b97a61b_1a1810a179a19e611ea6d512b61b97a61b" compoundref="math__utils_8h" startline="364" endline="370">gaussian2d</referencedby>
        <referencedby refid="namespaceutil_adb467cffbff18127cef94c3418dca920_1adb467cffbff18127cef94c3418dca920" compoundref="math__utils_8h" startline="376" endline="390">gaussianFilter</referencedby>
        <referencedby refid="namespaceutil_a4bb3661bd6981253daff0d4676749651_1a4bb3661bd6981253daff0d4676749651" compoundref="math__utils_8h" startline="313" endline="319">wrapAngle</referencedby>
      </memberdef>
      <memberdef kind="variable" id="namespaceutil_a1f46fe404f647e8e415ddd6e1e487b89_1a1f46fe404f647e8e415ddd6e1e487b89" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T util::Epsilon</definition>
        <argsstring></argsstring>
        <name>Epsilon</name>
        <qualifiedname>util::Epsilon</qualifiedname>
        <initializer>= std::numeric_limits&lt;T&gt;::epsilon()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/math_utils.h" line="19" column="13" bodyfile="inc/math_utils.h" bodystart="19" bodyend="-1"/>
        <referencedby refid="namespaceutil_a0ad004849a7e0c00352c9907f23bb198_1a0ad004849a7e0c00352c9907f23bb198" compoundref="math__utils_8h" startline="185" endline="189">isApproximatelyEqual</referencedby>
        <referencedby refid="namespaceutil_a1a6872147f0d950e184c0748908696ea_1a1a6872147f0d950e184c0748908696ea" compoundref="d3d__utils_8cpp" startline="13" endline="17">isNormalized</referencedby>
      </memberdef>
      <memberdef kind="variable" id="namespaceutil_a37a4ec65ea5148dae314ac426bc89591_1a37a4ec65ea5148dae314ac426bc89591" prot="public" static="yes" mutable="no">
        <type>HANDLE</type>
        <definition>HANDLE util::g_hThreadQuitcEvent</definition>
        <argsstring></argsstring>
        <name>g_hThreadQuitcEvent</name>
        <qualifiedname>util::g_hThreadQuitcEvent</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/os_utils.cpp" line="120" column="15" bodyfile="src/os_utils.cpp" bodystart="120" bodyend="-1"/>
        <referencedby refid="namespaceutil_a79a4c5df290b7c3f50617ad7ffa131b2_1a79a4c5df290b7c3f50617ad7ffa131b2" compoundref="os__utils_8cpp" startline="123" endline="128">setupDetachedThreadsVector</referencedby>
        <referencedby refid="namespaceutil_a3a780a09a3dffe65ca6df0ff68298fa9_1a3a780a09a3dffe65ca6df0ff68298fa9" compoundref="os__utils_8cpp" startline="131" endline="160">terminateDetachedThreads</referencedby>
      </memberdef>
      <memberdef kind="variable" id="namespaceutil_a3b9250df90bbf173c6e8ccca985f8162_1a3b9250df90bbf173c6e8ccca985f8162" prot="public" static="yes" mutable="no">
        <type>std::vector&lt; HANDLE &gt;</type>
        <definition>std::vector&lt;HANDLE&gt; util::g_detachedThreads</definition>
        <argsstring></argsstring>
        <name>g_detachedThreads</name>
        <qualifiedname>util::g_detachedThreads</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/os_utils.cpp" line="121" column="20" bodyfile="src/os_utils.cpp" bodystart="121" bodyend="-1"/>
        <referencedby refid="namespaceutil_a79a4c5df290b7c3f50617ad7ffa131b2_1a79a4c5df290b7c3f50617ad7ffa131b2" compoundref="os__utils_8cpp" startline="123" endline="128">setupDetachedThreadsVector</referencedby>
        <referencedby refid="namespaceutil_a3a780a09a3dffe65ca6df0ff68298fa9_1a3a780a09a3dffe65ca6df0ff68298fa9" compoundref="os__utils_8cpp" startline="131" endline="160">terminateDetachedThreads</referencedby>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespaceutil_a2ce92904b26fd12d493805d56e22b2b5_1a2ce92904b26fd12d493805d56e22b2b5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void util::comSafeRelease</definition>
        <argsstring>(T &amp;p)</argsstring>
        <name>comSafeRelease</name>
        <qualifiedname>util::comSafeRelease</qualifiedname>
        <param>
          <type>T &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>safely release a COM object <mdash/> deprecated </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/d3d_utils.h" line="22" column="13" bodyfile="inc/d3d_utils.h" bodystart="22" bodyend="29"/>
        <referencedby refid="namespaceutil_a8a4f9d906caa424fa6ccc4e13c90a211_1a8a4f9d906caa424fa6ccc4e13c90a211" compoundref="d3d__utils_8cpp" startline="349" endline="399">queryRefreshRate</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a1a6872147f0d950e184c0748908696ea_1a1a6872147f0d950e184c0748908696ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool util::isNormalized</definition>
        <argsstring>(const DirectX::XMFLOAT3 &amp;vec)</argsstring>
        <name>isNormalized</name>
        <qualifiedname>util::isNormalized</qualifiedname>
        <param>
          <type>const DirectX::XMFLOAT3 &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/d3d_utils.cpp" line="13" column="6" bodyfile="src/d3d_utils.cpp" bodystart="13" bodyend="17" declfile="inc/d3d_utils.h" declline="33" declcolumn="6"/>
        <referencedby refid="classCamera_acd1b1e7e17b69bdeb085b968e5793136_1acd1b1e7e17b69bdeb085b968e5793136" compoundref="camera_8cpp" startline="50" endline="57">Camera::computePitchYawInDegFromDirectionVector</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_ae26849bb1bda4eac523172bc3a907701_1ae26849bb1bda4eac523172bc3a907701" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DirectX::XMMATRIX XM_CALLCONV</type>
        <definition>DirectX::XMMATRIX XM_CALLCONV util::computeTransform</definition>
        <argsstring>(const DirectX::XMFLOAT3 &amp;scale, const DirectX::XMFLOAT3 &amp;pos, const DirectX::XMFLOAT3 &amp;rot)</argsstring>
        <name>computeTransform</name>
        <qualifiedname>util::computeTransform</qualifiedname>
        <param>
          <type>const DirectX::XMFLOAT3 &amp;</type>
          <declname>scale</declname>
        </param>
        <param>
          <type>const DirectX::XMFLOAT3 &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>const DirectX::XMFLOAT3 &amp;</type>
          <declname>rot</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/d3d_utils.cpp" line="19" column="31" bodyfile="src/d3d_utils.cpp" bodystart="19" bodyend="24" declfile="inc/d3d_utils.h" declline="34" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a3ab0e9aa541f40095802d685cceceb4f_1a3ab0e9aa541f40095802d685cceceb4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DirectX::XMFLOAT3</type>
        <definition>DirectX::XMFLOAT3 util::extractRotation</definition>
        <argsstring>(const DirectX::XMFLOAT4X4 &amp;mat)</argsstring>
        <name>extractRotation</name>
        <qualifiedname>util::extractRotation</qualifiedname>
        <param>
          <type>const DirectX::XMFLOAT4X4 &amp;</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
<para>builds a FLOAT3 of {x=pitch,y=yaw,z=roll} </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/d3d_utils.h" line="36" column="19" declfile="inc/d3d_utils.h" declline="36" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a7b6b384d293ea6bedd4aa4ac20f2d6be_1a7b6b384d293ea6bedd4aa4ac20f2d6be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>util::ALIAS_FUNCTION</definition>
        <argsstring>(extractRotation, extractEulerAngles)</argsstring>
        <name>ALIAS_FUNCTION</name>
        <qualifiedname>util::ALIAS_FUNCTION</qualifiedname>
        <param>
          <type><ref refid="namespaceutil_a3ab0e9aa541f40095802d685cceceb4f_1a3ab0e9aa541f40095802d685cceceb4f" kindref="member">extractRotation</ref></type>
        </param>
        <param>
          <type>extractEulerAngles</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/d3d_utils.h" line="37" column="1" declfile="inc/d3d_utils.h" declline="37" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a5785db0db8381f776de034c567315e31_1a5785db0db8381f776de034c567315e31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float util::getPitch</definition>
        <argsstring>(const DirectX::XMFLOAT4X4 &amp;mat)</argsstring>
        <name>getPitch</name>
        <qualifiedname>util::getPitch</qualifiedname>
        <param>
          <type>const DirectX::XMFLOAT4X4 &amp;</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/d3d_utils.h" line="38" column="7" declfile="inc/d3d_utils.h" declline="38" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a9d194ce78a245f0b4c7d331465b7e5d0_1a9d194ce78a245f0b4c7d331465b7e5d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float util::getYaw</definition>
        <argsstring>(const DirectX::XMFLOAT4X4 &amp;mat)</argsstring>
        <name>getYaw</name>
        <qualifiedname>util::getYaw</qualifiedname>
        <param>
          <type>const DirectX::XMFLOAT4X4 &amp;</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/d3d_utils.h" line="39" column="7" declfile="inc/d3d_utils.h" declline="39" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a2c4e88667d8b57d7f02a4e037e65db60_1a2c4e88667d8b57d7f02a4e037e65db60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float util::getRoll</definition>
        <argsstring>(const DirectX::XMFLOAT4X4 &amp;mat)</argsstring>
        <name>getRoll</name>
        <qualifiedname>util::getRoll</qualifiedname>
        <param>
          <type>const DirectX::XMFLOAT4X4 &amp;</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/d3d_utils.h" line="40" column="7" declfile="inc/d3d_utils.h" declline="40" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a3709f9c62166ae21f9726502db280054_1a3709f9c62166ae21f9726502db280054" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool util::operator==</definition>
        <argsstring>(const DirectX::XMFLOAT3 &amp;lhs, const DirectX::XMFLOAT3 &amp;rhs) noexcept</argsstring>
        <name>operator==</name>
        <qualifiedname>util::operator==</qualifiedname>
        <param>
          <type>const DirectX::XMFLOAT3 &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const DirectX::XMFLOAT3 &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/d3d_utils.cpp" line="84" column="6" bodyfile="src/d3d_utils.cpp" bodystart="84" bodyend="88" declfile="inc/d3d_utils.h" declline="41" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_ab2db49bbea86cf8dd87137ac46c36e5d_1ab2db49bbea86cf8dd87137ac46c36e5d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool util::operator!=</definition>
        <argsstring>(const DirectX::XMFLOAT3 &amp;lhs, const DirectX::XMFLOAT3 &amp;rhs) noexcept</argsstring>
        <name>operator!=</name>
        <qualifiedname>util::operator!=</qualifiedname>
        <param>
          <type>const DirectX::XMFLOAT3 &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const DirectX::XMFLOAT3 &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/d3d_utils.cpp" line="90" column="6" bodyfile="src/d3d_utils.cpp" bodystart="90" bodyend="94" declfile="inc/d3d_utils.h" declline="42" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a9f9207f5f0d05d26641ae05da362bd78_1a9f9207f5f0d05d26641ae05da362bd78" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool util::operator==</definition>
        <argsstring>(const DirectX::XMFLOAT4 &amp;lhs, const DirectX::XMFLOAT4 &amp;rhs) noexcept</argsstring>
        <name>operator==</name>
        <qualifiedname>util::operator==</qualifiedname>
        <param>
          <type>const DirectX::XMFLOAT4 &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const DirectX::XMFLOAT4 &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/d3d_utils.cpp" line="96" column="6" bodyfile="src/d3d_utils.cpp" bodystart="96" bodyend="100" declfile="inc/d3d_utils.h" declline="43" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a3d1b7f83857fdfe212fa765b1c2b820c_1a3d1b7f83857fdfe212fa765b1c2b820c" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool util::operator!=</definition>
        <argsstring>(const DirectX::XMFLOAT4 &amp;lhs, const DirectX::XMFLOAT4 &amp;rhs) noexcept</argsstring>
        <name>operator!=</name>
        <qualifiedname>util::operator!=</qualifiedname>
        <param>
          <type>const DirectX::XMFLOAT4 &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const DirectX::XMFLOAT4 &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/d3d_utils.cpp" line="102" column="6" bodyfile="src/d3d_utils.cpp" bodystart="102" bodyend="106" declfile="inc/d3d_utils.h" declline="44" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a90beb0a79cf9edd98fc23c440e8f1639_1a90beb0a79cf9edd98fc23c440e8f1639" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool util::operator==</definition>
        <argsstring>(const DirectX::XMVECTOR &amp;lhs, const DirectX::XMVECTOR &amp;rhs) noexcept</argsstring>
        <name>operator==</name>
        <qualifiedname>util::operator==</qualifiedname>
        <param>
          <type>const DirectX::XMVECTOR &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const DirectX::XMVECTOR &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/d3d_utils.cpp" line="108" column="6" bodyfile="src/d3d_utils.cpp" bodystart="108" bodyend="113" declfile="inc/d3d_utils.h" declline="45" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a37629dc27e62e78a1a1a0b6ace487b48_1a37629dc27e62e78a1a1a0b6ace487b48" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool util::operator!=</definition>
        <argsstring>(const DirectX::XMVECTOR &amp;lhs, const DirectX::XMVECTOR &amp;rhs) noexcept</argsstring>
        <name>operator!=</name>
        <qualifiedname>util::operator!=</qualifiedname>
        <param>
          <type>const DirectX::XMVECTOR &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const DirectX::XMVECTOR &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/d3d_utils.cpp" line="115" column="6" bodyfile="src/d3d_utils.cpp" bodystart="115" bodyend="119" declfile="inc/d3d_utils.h" declline="46" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_af15d17626ca9f2edfc7095d6a5ece7cd_1af15d17626ca9f2edfc7095d6a5ece7cd" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool util::operator==</definition>
        <argsstring>(const DirectX::XMMATRIX &amp;lhs, const DirectX::XMMATRIX &amp;rhs) noexcept</argsstring>
        <name>operator==</name>
        <qualifiedname>util::operator==</qualifiedname>
        <param>
          <type>const DirectX::XMMATRIX &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const DirectX::XMMATRIX &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/d3d_utils.cpp" line="121" column="6" bodyfile="src/d3d_utils.cpp" bodystart="121" bodyend="136" declfile="inc/d3d_utils.h" declline="47" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a88a94fbcada49ba4900f6f10092b720f_1a88a94fbcada49ba4900f6f10092b720f" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool util::operator!=</definition>
        <argsstring>(const DirectX::XMMATRIX &amp;lhs, const DirectX::XMMATRIX &amp;rhs) noexcept</argsstring>
        <name>operator!=</name>
        <qualifiedname>util::operator!=</qualifiedname>
        <param>
          <type>const DirectX::XMMATRIX &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const DirectX::XMMATRIX &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/d3d_utils.cpp" line="138" column="6" bodyfile="src/d3d_utils.cpp" bodystart="138" bodyend="142" declfile="inc/d3d_utils.h" declline="48" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a26b269c9ffa8b7895942433253d492b5_1a26b269c9ffa8b7895942433253d492b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DirectX::XMFLOAT3</type>
        <definition>DirectX::XMFLOAT3 util::extractTranslation</definition>
        <argsstring>(const DirectX::XMFLOAT4X4 &amp;mat)</argsstring>
        <name>extractTranslation</name>
        <qualifiedname>util::extractTranslation</qualifiedname>
        <param>
          <type>const DirectX::XMFLOAT4X4 &amp;</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/d3d_utils.h" line="49" column="19" declfile="inc/d3d_utils.h" declline="49" declcolumn="19"/>
        <referencedby refid="testing_8h_acd54f63bbbbb89229fb81663a0339b1b_1acd54f63bbbbb89229fb81663a0339b1b" compoundref="testing_8cpp" startline="70" endline="80">testScaleMatrixTranslation</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a79c4bd60f811604366ee28f6698aab24_1a79c4bd60f811604366ee28f6698aab24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DirectX::XMFLOAT3</type>
        <definition>DirectX::XMFLOAT3 util::extractTranslationColumnMatrix</definition>
        <argsstring>(const DirectX::XMFLOAT4X4 &amp;mat)</argsstring>
        <name>extractTranslationColumnMatrix</name>
        <qualifiedname>util::extractTranslationColumnMatrix</qualifiedname>
        <param>
          <type>const DirectX::XMFLOAT4X4 &amp;</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/d3d_utils.h" line="50" column="19" declfile="inc/d3d_utils.h" declline="50" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a66c68478c4448bcbe2eeee0bd09b4bd9_1a66c68478c4448bcbe2eeee0bd09b4bd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DirectX::XMMATRIX XM_CALLCONV</type>
        <definition>DirectX::XMMATRIX XM_CALLCONV util::scaleTranslation</definition>
        <argsstring>(const DirectX::XMMATRIX &amp;mat, const float scale)</argsstring>
        <name>scaleTranslation</name>
        <qualifiedname>util::scaleTranslation</qualifiedname>
        <param>
          <type>const DirectX::XMMATRIX &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>scale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/d3d_utils.h" line="51" column="31" declfile="inc/d3d_utils.h" declline="51" declcolumn="31"/>
        <referencedby refid="classModel_a2bb58287e2762dd3fbd905929b7a4c9c_1a2bb58287e2762dd3fbd905929b7a4c9c" compoundref="MODEL_8CPP" startline="69" endline="96">Model::Model</referencedby>
        <referencedby refid="classModel_af3dcc0a8bac832b284c12f479d88903e_1af3dcc0a8bac832b284c12f479d88903e" compoundref="MODEL_8CPP" startline="282" endline="318">Model::parseModelNodeGraph</referencedby>
        <referencedby refid="testing_8h_acd54f63bbbbb89229fb81663a0339b1b_1acd54f63bbbbb89229fb81663a0339b1b" compoundref="testing_8cpp" startline="70" endline="80">testScaleMatrixTranslation</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_acac5bfddefb43e62a0a5ea6e8fa6d0e2_1acac5bfddefb43e62a0a5ea6e8fa6d0e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DirectX::XMVECTOR XM_CALLCONV</type>
        <definition>DirectX::XMVECTOR XM_CALLCONV util::pitchYawRollToQuaternion</definition>
        <argsstring>(const DirectX::XMVECTOR &amp;pitchYawRollAnglesVec)</argsstring>
        <name>pitchYawRollToQuaternion</name>
        <qualifiedname>util::pitchYawRollToQuaternion</qualifiedname>
        <param>
          <type>const DirectX::XMVECTOR &amp;</type>
          <declname>pitchYawRollAnglesVec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/d3d_utils.h" line="52" column="31" declfile="inc/d3d_utils.h" declline="52" declcolumn="31"/>
        <referencedby refid="classNode_a22dfd767bbb91e603baf265377b2a888_1a22dfd767bbb91e603baf265377b2a888" compoundref="node_8cpp" startline="310" endline="313">Node::getRotationQuat</referencedby>
        <referencedby refid="classNode_a80faf48b135a1702a1811d40aec96e47_1a80faf48b135a1702a1811d40aec96e47" compoundref="node_8cpp" startline="243" endline="283">Node::updateLocalTransform</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_adfa0232e2ca9b4bd6323e560f0c4d27a_1adfa0232e2ca9b4bd6323e560f0c4d27a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DirectX::XMVECTOR XM_CALLCONV</type>
        <definition>DirectX::XMVECTOR XM_CALLCONV util::pitchYawRollToQuaternion</definition>
        <argsstring>(const DirectX::XMFLOAT3 &amp;pitchYawRollAngles)</argsstring>
        <name>pitchYawRollToQuaternion</name>
        <qualifiedname>util::pitchYawRollToQuaternion</qualifiedname>
        <param>
          <type>const DirectX::XMFLOAT3 &amp;</type>
          <declname>pitchYawRollAngles</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/d3d_utils.h" line="53" column="31" declfile="inc/d3d_utils.h" declline="53" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_ab2a0f4a4d11e44163436f57264702601_1ab2a0f4a4d11e44163436f57264702601" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>util::ALIAS_FUNCTION</definition>
        <argsstring>(pitchYawRollToQuaternion, eulerAnglesToQuaternion)</argsstring>
        <name>ALIAS_FUNCTION</name>
        <qualifiedname>util::ALIAS_FUNCTION</qualifiedname>
        <param>
          <type><ref refid="namespaceutil_acac5bfddefb43e62a0a5ea6e8fa6d0e2_1acac5bfddefb43e62a0a5ea6e8fa6d0e2" kindref="member">pitchYawRollToQuaternion</ref></type>
        </param>
        <param>
          <type>eulerAnglesToQuaternion</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/d3d_utils.h" line="54" column="1" declfile="inc/d3d_utils.h" declline="54" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a7dc0d9d7815903082f6007d6fed534ac_1a7dc0d9d7815903082f6007d6fed534ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void util::quaternionToEulerAngles</definition>
        <argsstring>(const DirectX::XMFLOAT4 &amp;quat, float &amp;pitch, float &amp;yaw, float &amp;roll)</argsstring>
        <name>quaternionToEulerAngles</name>
        <qualifiedname>util::quaternionToEulerAngles</qualifiedname>
        <param>
          <type>const DirectX::XMFLOAT4 &amp;</type>
          <declname>quat</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>pitch</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>yaw</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>roll</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/d3d_utils.cpp" line="175" column="6" bodyfile="src/d3d_utils.cpp" bodystart="175" bodyend="183" declfile="inc/d3d_utils.h" declline="55" declcolumn="6"/>
        <referencedby refid="namespaceutil_af6b582e52d9fbe95fb3c2123e4cf3d1d_1af6b582e52d9fbe95fb3c2123e4cf3d1d" compoundref="d3d__utils_8cpp" startline="197" endline="219">decomposeAffineMatrix</referencedby>
        <referencedby refid="classNode_afe80a694754e96b529d59e9c8ea72c07_1afe80a694754e96b529d59e9c8ea72c07" compoundref="node_8cpp" startline="151" endline="160">Node::setTransform</referencedby>
        <referencedby refid="classNode_a7521f7c7b62ae35229b89cae6f10d461_1a7521f7c7b62ae35229b89cae6f10d461" compoundref="node_8cpp" startline="162" endline="173">Node::setTransform</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_af94fe7e473f52f24900e7986773e72dd_1af94fe7e473f52f24900e7986773e72dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DirectX::XMFLOAT3</type>
        <definition>DirectX::XMFLOAT3 util::quaternionToEulerAngles</definition>
        <argsstring>(const DirectX::XMFLOAT4 &amp;quat)</argsstring>
        <name>quaternionToEulerAngles</name>
        <qualifiedname>util::quaternionToEulerAngles</qualifiedname>
        <param>
          <type>const DirectX::XMFLOAT4 &amp;</type>
          <declname>quat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/d3d_utils.cpp" line="185" column="19" bodyfile="src/d3d_utils.cpp" bodystart="185" bodyend="190" declfile="inc/d3d_utils.h" declline="56" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a0daed1a190b150f308e07625e5e2774b_1a0daed1a190b150f308e07625e5e2774b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::tuple&lt; DirectX::XMFLOAT3, DirectX::XMFLOAT3, DirectX::XMFLOAT3 &gt;</type>
        <definition>std::tuple&lt; DirectX::XMFLOAT3, DirectX::XMFLOAT3, DirectX::XMFLOAT3 &gt; util::decomposeAffineMatrix</definition>
        <argsstring>(const DirectX::XMFLOAT4X4 &amp;transform)</argsstring>
        <name>decomposeAffineMatrix</name>
        <qualifiedname>util::decomposeAffineMatrix</qualifiedname>
        <param>
          <type>const DirectX::XMFLOAT4X4 &amp;</type>
          <declname>transform</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/d3d_utils.cpp" line="192" column="12" bodyfile="src/d3d_utils.cpp" bodystart="192" bodyend="195" declfile="inc/d3d_utils.h" declline="57" declcolumn="12"/>
        <referencedby refid="classNode_a05f9d16dc2cfba19c76ca22e9b39b817_1a05f9d16dc2cfba19c76ca22e9b39b817" compoundref="node_8cpp" startline="12" endline="38">Node::Node</referencedby>
        <referencedby refid="namespaceutil_a0daed1a190b150f308e07625e5e2774b_1a0daed1a190b150f308e07625e5e2774b" compoundref="d3d__utils_8cpp" startline="192" endline="195">decomposeAffineMatrix</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_af6b582e52d9fbe95fb3c2123e4cf3d1d_1af6b582e52d9fbe95fb3c2123e4cf3d1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::tuple&lt; DirectX::XMFLOAT3, DirectX::XMFLOAT3, DirectX::XMFLOAT3 &gt;</type>
        <definition>std::tuple&lt; DirectX::XMFLOAT3, DirectX::XMFLOAT3, DirectX::XMFLOAT3 &gt; util::decomposeAffineMatrix</definition>
        <argsstring>(const DirectX::XMMATRIX &amp;transform)</argsstring>
        <name>decomposeAffineMatrix</name>
        <qualifiedname>util::decomposeAffineMatrix</qualifiedname>
        <param>
          <type>const DirectX::XMMATRIX &amp;</type>
          <declname>transform</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/d3d_utils.cpp" line="197" column="12" bodyfile="src/d3d_utils.cpp" bodystart="197" bodyend="219" declfile="inc/d3d_utils.h" declline="58" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a5abe679bcc16bb71dfeddc21b97174a6_1a5abe679bcc16bb71dfeddc21b97174a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void util::toDegrees3InPlace</definition>
        <argsstring>(DirectX::XMFLOAT3 &amp;rotAngles)</argsstring>
        <name>toDegrees3InPlace</name>
        <qualifiedname>util::toDegrees3InPlace</qualifiedname>
        <param>
          <type>DirectX::XMFLOAT3 &amp;</type>
          <declname>rotAngles</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/d3d_utils.cpp" line="221" column="6" bodyfile="src/d3d_utils.cpp" bodystart="221" bodyend="226" declfile="inc/d3d_utils.h" declline="60" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_acdd09a2c2e6a79bcf301f9a730d8940b_1acdd09a2c2e6a79bcf301f9a730d8940b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DirectX::XMFLOAT3</type>
        <definition>DirectX::XMFLOAT3 util::toDegrees3</definition>
        <argsstring>(const DirectX::XMFLOAT3 &amp;rotAngles)</argsstring>
        <name>toDegrees3</name>
        <qualifiedname>util::toDegrees3</qualifiedname>
        <param>
          <type>const DirectX::XMFLOAT3 &amp;</type>
          <declname>rotAngles</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/d3d_utils.cpp" line="228" column="19" bodyfile="src/d3d_utils.cpp" bodystart="228" bodyend="235" declfile="inc/d3d_utils.h" declline="61" declcolumn="19"/>
        <referencedby refid="classDirectionalLight_a58dfb8b06a26a8f85d398b998c86ac24_1a58dfb8b06a26a8f85d398b998c86ac24" compoundref="light__source_8cpp" startline="194" endline="232">DirectionalLight::displayImguiWidgets</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a21d707cff7734b663fce77167ab7a073_1a21d707cff7734b663fce77167ab7a073" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void util::toRadians3InPlace</definition>
        <argsstring>(DirectX::XMFLOAT3 &amp;rotAngles)</argsstring>
        <name>toRadians3InPlace</name>
        <qualifiedname>util::toRadians3InPlace</qualifiedname>
        <param>
          <type>DirectX::XMFLOAT3 &amp;</type>
          <declname>rotAngles</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/d3d_utils.cpp" line="237" column="6" bodyfile="src/d3d_utils.cpp" bodystart="237" bodyend="242" declfile="inc/d3d_utils.h" declline="62" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a31143b15ea9106b8e368acaff73d2aba_1a31143b15ea9106b8e368acaff73d2aba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DirectX::XMFLOAT3</type>
        <definition>DirectX::XMFLOAT3 util::toRadians3</definition>
        <argsstring>(const DirectX::XMFLOAT3 &amp;rotAngles)</argsstring>
        <name>toRadians3</name>
        <qualifiedname>util::toRadians3</qualifiedname>
        <param>
          <type>const DirectX::XMFLOAT3 &amp;</type>
          <declname>rotAngles</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/d3d_utils.cpp" line="244" column="19" bodyfile="src/d3d_utils.cpp" bodystart="244" bodyend="251" declfile="inc/d3d_utils.h" declline="63" declcolumn="19"/>
        <referencedby refid="classILightSource_a85ecc5940c66f9ef21277e3bab54276b_1a85ecc5940c66f9ef21277e3bab54276b" compoundref="light__source_8cpp" startline="21" endline="60">ILightSource::ILightSource</referencedby>
        <referencedby refid="classModel_a2bb58287e2762dd3fbd905929b7a4c9c_1a2bb58287e2762dd3fbd905929b7a4c9c" compoundref="MODEL_8CPP" startline="69" endline="96">Model::Model</referencedby>
        <referencedby refid="classDirectionalLight_a58dfb8b06a26a8f85d398b998c86ac24_1a58dfb8b06a26a8f85d398b998c86ac24" compoundref="light__source_8cpp" startline="194" endline="232">DirectionalLight::displayImguiWidgets</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a23d21fff47f4447887288a8b69f1a7b4_1a23d21fff47f4447887288a8b69f1a7b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DirectX::XMFLOAT3</type>
        <definition>DirectX::XMFLOAT3 util::quaternionToPitchYawRoll</definition>
        <argsstring>(DirectX::XMFLOAT4 &amp;quat)</argsstring>
        <name>quaternionToPitchYawRoll</name>
        <qualifiedname>util::quaternionToPitchYawRoll</qualifiedname>
        <param>
          <type>DirectX::XMFLOAT4 &amp;</type>
          <declname>quat</declname>
        </param>
        <briefdescription>
<para>same as quaternionToEulerAngles except this version returns the euler angles in a float3 vector </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/d3d_utils.h" line="66" column="19" declfile="inc/d3d_utils.h" declline="66" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a684f48a46c874a1482bf172146e3fa10_1a684f48a46c874a1482bf172146e3fa10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DirectX::XMVECTOR XM_CALLCONV</type>
        <definition>dx::XMVECTOR XM_CALLCONV util::pitchYawRollToVector</definition>
        <argsstring>(const float pitch, const float yaw, const float roll)</argsstring>
        <name>pitchYawRollToVector</name>
        <qualifiedname>util::pitchYawRollToVector</qualifiedname>
        <param>
          <type>const float</type>
          <declname>pitch</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>yaw</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>roll</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/d3d_utils.cpp" line="261" column="26" bodyfile="src/d3d_utils.cpp" bodystart="261" bodyend="267" declfile="inc/d3d_utils.h" declline="67" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a0e4b0d4b9f7d33bc40dc66b3e918ec01_1a0e4b0d4b9f7d33bc40dc66b3e918ec01" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>float</type>
        <definition>float util::distance</definition>
        <argsstring>(const DirectX::XMFLOAT3 &amp;v1, const DirectX::XMFLOAT3 &amp;v2) noexcept</argsstring>
        <name>distance</name>
        <qualifiedname>util::distance</qualifiedname>
        <param>
          <type>const DirectX::XMFLOAT3 &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const DirectX::XMFLOAT3 &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/d3d_utils.cpp" line="269" column="7" bodyfile="src/d3d_utils.cpp" bodystart="269" bodyend="280" declfile="inc/d3d_utils.h" declline="68" declcolumn="7"/>
        <referencedby refid="namespaceutil_a0e4b0d4b9f7d33bc40dc66b3e918ec01_1a0e4b0d4b9f7d33bc40dc66b3e918ec01" compoundref="d3d__utils_8cpp" startline="269" endline="280">distance</referencedby>
        <referencedby refid="classMesh_ac1a06f67124e572821e7fc985711c8dd_1ac1a06f67124e572821e7fc985711c8dd" compoundref="mesh_8cpp" startline="203" endline="207">Mesh::getDistanceFromActiveCamera</referencedby>
        <referencedby refid="classMesh_a8aeff98bfd0c764a8917047c98f9962f_1a8aeff98bfd0c764a8917047c98f9962f" compoundref="mesh_8cpp" startline="215" endline="220">Mesh::setDistanceFromActiveCamera</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a92d905c294e73ce63772b2ede1a2d5a6_1a92d905c294e73ce63772b2ede1a2d5a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>util::ALIAS_FUNCTION</definition>
        <argsstring>(distance, length)</argsstring>
        <name>ALIAS_FUNCTION</name>
        <qualifiedname>util::ALIAS_FUNCTION</qualifiedname>
        <param>
          <type><ref refid="namespaceutil_a0e4b0d4b9f7d33bc40dc66b3e918ec01_1a0e4b0d4b9f7d33bc40dc66b3e918ec01" kindref="member">distance</ref></type>
        </param>
        <param>
          <type>length</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/d3d_utils.h" line="69" column="1" declfile="inc/d3d_utils.h" declline="69" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a23ace71bfec034ec8399ea6925064c08_1a23ace71bfec034ec8399ea6925064c08" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>float</type>
        <definition>float util::distanceSquared</definition>
        <argsstring>(const DirectX::XMFLOAT3 &amp;v1, const DirectX::XMFLOAT3 &amp;v2) noexcept</argsstring>
        <name>distanceSquared</name>
        <qualifiedname>util::distanceSquared</qualifiedname>
        <param>
          <type>const DirectX::XMFLOAT3 &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const DirectX::XMFLOAT3 &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/d3d_utils.cpp" line="282" column="7" bodyfile="src/d3d_utils.cpp" bodystart="282" bodyend="293" declfile="inc/d3d_utils.h" declline="70" declcolumn="7"/>
        <referencedby refid="namespaceutil_a23ace71bfec034ec8399ea6925064c08_1a23ace71bfec034ec8399ea6925064c08" compoundref="d3d__utils_8cpp" startline="282" endline="293">distanceSquared</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a65b91ae41e312e6b3cd1dedae09fcfb8_1a65b91ae41e312e6b3cd1dedae09fcfb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>util::ALIAS_FUNCTION</definition>
        <argsstring>(distanceSquared, lengthSquared)</argsstring>
        <name>ALIAS_FUNCTION</name>
        <qualifiedname>util::ALIAS_FUNCTION</qualifiedname>
        <param>
          <type><ref refid="namespaceutil_a23ace71bfec034ec8399ea6925064c08_1a23ace71bfec034ec8399ea6925064c08" kindref="member">distanceSquared</ref></type>
        </param>
        <param>
          <type>lengthSquared</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/d3d_utils.h" line="71" column="1" declfile="inc/d3d_utils.h" declline="71" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a649582fa28b1ed6f2e6f36ff9c1963f0_1a649582fa28b1ed6f2e6f36ff9c1963f0" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>DirectX::XMVECTOR XM_CALLCONV</type>
        <definition>DirectX::XMVECTOR XM_CALLCONV util::addVectorWithScalar</definition>
        <argsstring>(const DirectX::XMVECTOR &amp;v, const float scalar) noexcept</argsstring>
        <name>addVectorWithScalar</name>
        <qualifiedname>util::addVectorWithScalar</qualifiedname>
        <param>
          <type>const DirectX::XMVECTOR &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>scalar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/d3d_utils.cpp" line="295" column="31" bodyfile="src/d3d_utils.cpp" bodystart="295" bodyend="305" declfile="inc/d3d_utils.h" declline="72" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_af76c79f3aed17a36e510532cfd6c49a0_1af76c79f3aed17a36e510532cfd6c49a0" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>DirectX::XMVECTOR XM_CALLCONV</type>
        <definition>DirectX::XMVECTOR XM_CALLCONV util::subtractScalarFromVector</definition>
        <argsstring>(const DirectX::XMVECTOR &amp;v, const float scalar) noexcept</argsstring>
        <name>subtractScalarFromVector</name>
        <qualifiedname>util::subtractScalarFromVector</qualifiedname>
        <param>
          <type>const DirectX::XMVECTOR &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>scalar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/d3d_utils.cpp" line="307" column="31" bodyfile="src/d3d_utils.cpp" bodystart="307" bodyend="317" declfile="inc/d3d_utils.h" declline="73" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a01d2b150c74377c3a18ed839579a12e1_1a01d2b150c74377c3a18ed839579a12e1" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>DirectX::XMVECTOR XM_CALLCONV</type>
        <definition>DirectX::XMVECTOR XM_CALLCONV util::multiplyVectorWithScalar</definition>
        <argsstring>(const DirectX::XMVECTOR &amp;v, const float scalar) noexcept</argsstring>
        <name>multiplyVectorWithScalar</name>
        <qualifiedname>util::multiplyVectorWithScalar</qualifiedname>
        <param>
          <type>const DirectX::XMVECTOR &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>scalar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/d3d_utils.cpp" line="319" column="31" bodyfile="src/d3d_utils.cpp" bodystart="319" bodyend="324" declfile="inc/d3d_utils.h" declline="74" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_aec653409b42dce8ff14151dd4061ed3c_1aec653409b42dce8ff14151dd4061ed3c" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>DirectX::XMVECTOR XM_CALLCONV</type>
        <definition>DirectX::XMVECTOR XM_CALLCONV util::divideVectorWithScalar</definition>
        <argsstring>(const DirectX::XMVECTOR &amp;v, const float scalar) noexcept</argsstring>
        <name>divideVectorWithScalar</name>
        <qualifiedname>util::divideVectorWithScalar</qualifiedname>
        <param>
          <type>const DirectX::XMVECTOR &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>scalar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/d3d_utils.cpp" line="326" column="31" bodyfile="src/d3d_utils.cpp" bodystart="326" bodyend="331" declfile="inc/d3d_utils.h" declline="75" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a05b02cc524a90915b96b6ad9fe9f33b9_1a05b02cc524a90915b96b6ad9fe9f33b9" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>DirectX::XMFLOAT3</type>
        <definition>DirectX::XMFLOAT3 util::getMidpointOfTriangle</definition>
        <argsstring>(const DirectX::XMFLOAT3 &amp;v0, const DirectX::XMFLOAT3 &amp;v1, const DirectX::XMFLOAT3 &amp;v2) noexcept</argsstring>
        <name>getMidpointOfTriangle</name>
        <qualifiedname>util::getMidpointOfTriangle</qualifiedname>
        <param>
          <type>const DirectX::XMFLOAT3 &amp;</type>
          <declname>v0</declname>
        </param>
        <param>
          <type>const DirectX::XMFLOAT3 &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const DirectX::XMFLOAT3 &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/d3d_utils.cpp" line="333" column="19" bodyfile="src/d3d_utils.cpp" bodystart="333" bodyend="338" declfile="inc/d3d_utils.h" declline="76" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_ac410281f44068ba2d4d1abc0ce4fc721_1ac410281f44068ba2d4d1abc0ce4fc721" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>DirectX::XMVECTOR</type>
        <definition>DirectX::XMVECTOR util::rotateVectorAroundAxisAngle</definition>
        <argsstring>(const DirectX::XMVECTOR &amp;v, const DirectX::XMVECTOR &amp;axis, const float theta) noexcept</argsstring>
        <name>rotateVectorAroundAxisAngle</name>
        <qualifiedname>util::rotateVectorAroundAxisAngle</qualifiedname>
        <param>
          <type>const DirectX::XMVECTOR &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const DirectX::XMVECTOR &amp;</type>
          <declname>axis</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>theta</declname>
        </param>
        <briefdescription>
<para>rotate a vector around an axis and an angle (in degrees) using Rodrigues&apos; rotation formula: </para>
        </briefdescription>
        <detaileddescription>
<para>axis * cos( theta ) + ( axis.Dot( v ) * v * ( 1 -cos( theta ) ) + ( v.Cross( axis ) * sin( theta ) ); </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/d3d_utils.cpp" line="340" column="19" bodyfile="src/d3d_utils.cpp" bodystart="340" bodyend="347" declfile="inc/d3d_utils.h" declline="80" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a8a4f9d906caa424fa6ccc4e13c90a211_1a8a4f9d906caa424fa6ccc4e13c90a211" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DXGI_RATIONAL</type>
        <definition>DXGI_RATIONAL util::queryRefreshRate</definition>
        <argsstring>(const unsigned screenWidth, const unsigned screenHeight, const bool bVsync)</argsstring>
        <name>queryRefreshRate</name>
        <qualifiedname>util::queryRefreshRate</qualifiedname>
        <param>
          <type>const unsigned</type>
          <declname>screenWidth</declname>
        </param>
        <param>
          <type>const unsigned</type>
          <declname>screenHeight</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>bVsync</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/d3d_utils.cpp" line="349" column="15" bodyfile="src/d3d_utils.cpp" bodystart="349" bodyend="399" declfile="inc/d3d_utils.h" declline="82" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a58f21c8e2825245b461233332efaa10f_1a58f21c8e2825245b461233332efaa10f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class TShader</type>
          </param>
        </templateparamlist>
        <type>TShader *</type>
        <definition>static TShader * util::createShaderObject</definition>
        <argsstring>(ID3D11Device *pD3dDevice, ID3DBlob *&amp;pShaderBlob, ID3D11ClassLinkage *pClassLinkage)</argsstring>
        <name>createShaderObject</name>
        <qualifiedname>util::createShaderObject</qualifiedname>
        <param>
          <type>ID3D11Device *</type>
          <declname>pD3dDevice</declname>
        </param>
        <param>
          <type>ID3DBlob *&amp;</type>
          <declname>pShaderBlob</declname>
        </param>
        <param>
          <type>ID3D11ClassLinkage *</type>
          <declname>pClassLinkage</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/d3d_utils.h" line="85" column="16" declfile="inc/d3d_utils.h" declline="85" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a7143dd1c73f1ce2a66400bb09f35cc25_1a7143dd1c73f1ce2a66400bb09f35cc25" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>ID3D11VertexShader *</type>
        <definition>static ID3D11VertexShader * util::createShaderObject&lt; ID3D11VertexShader &gt;</definition>
        <argsstring>(ID3D11Device *pD3dDevice, ID3DBlob *&amp;pShaderBlob, ID3D11ClassLinkage *pClassLinkage)</argsstring>
        <name>createShaderObject&lt; ID3D11VertexShader &gt;</name>
        <qualifiedname>util::createShaderObject&lt; ID3D11VertexShader &gt;</qualifiedname>
        <param>
          <type>ID3D11Device *</type>
          <declname>pD3dDevice</declname>
        </param>
        <param>
          <type>ID3DBlob *&amp;</type>
          <declname>pShaderBlob</declname>
        </param>
        <param>
          <type>ID3D11ClassLinkage *</type>
          <declname>pClassLinkage</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/d3d_utils.h" line="88" column="8" bodyfile="inc/d3d_utils.h" bodystart="88" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a2b15332a5aad569c0613bd1879441696_1a2b15332a5aad569c0613bd1879441696" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>ID3D11PixelShader *</type>
        <definition>static ID3D11PixelShader * util::createShaderObject&lt; ID3D11PixelShader &gt;</definition>
        <argsstring>(ID3D11Device *pD3dDevice, ID3DBlob *&amp;pShaderBlob, ID3D11ClassLinkage *pClassLinkage)</argsstring>
        <name>createShaderObject&lt; ID3D11PixelShader &gt;</name>
        <qualifiedname>util::createShaderObject&lt; ID3D11PixelShader &gt;</qualifiedname>
        <param>
          <type>ID3D11Device *</type>
          <declname>pD3dDevice</declname>
        </param>
        <param>
          <type>ID3DBlob *&amp;</type>
          <declname>pShaderBlob</declname>
        </param>
        <param>
          <type>ID3D11ClassLinkage *</type>
          <declname>pClassLinkage</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/d3d_utils.h" line="103" column="8" bodyfile="inc/d3d_utils.h" bodystart="103" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_ae95ff1a39d7f1ec063fb8b0496c5f937_1ae95ff1a39d7f1ec063fb8b0496c5f937" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class TShader</type>
          </param>
        </templateparamlist>
        <type>TShader *</type>
        <definition>TShader * util::loadShaderDynamically</definition>
        <argsstring>(ID3D11Device *pD3dDevice, const std::wstring &amp;fileName, const std::string &amp;entryPoint, const std::string &amp;profile, ID3DBlob *&amp;pShaderBlob, const std::vector&lt; D3D_SHADER_MACRO &gt; &amp;defines={})</argsstring>
        <name>loadShaderDynamically</name>
        <qualifiedname>util::loadShaderDynamically</qualifiedname>
        <param>
          <type>ID3D11Device *</type>
          <declname>pD3dDevice</declname>
        </param>
        <param>
          <type>const std::wstring &amp;</type>
          <declname>fileName</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>entryPoint</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>profile</declname>
        </param>
        <param>
          <type>ID3DBlob *&amp;</type>
          <declname>pShaderBlob</declname>
        </param>
        <param>
          <type>const std::vector&lt; D3D_SHADER_MACRO &gt; &amp;</type>
          <declname>defines</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>will be used to load and compile a shader at runtime </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/d3d_utils.h" line="119" column="9" bodyfile="inc/d3d_utils.h" bodystart="119" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a4b57c98e5652332571a9957b430f3dad_1a4b57c98e5652332571a9957b430f3dad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>util::ALIAS_FUNCTION</definition>
        <argsstring>(loadShaderDynamically, compileShaderDynamically)</argsstring>
        <name>ALIAS_FUNCTION</name>
        <qualifiedname>util::ALIAS_FUNCTION</qualifiedname>
        <param>
          <type><ref refid="namespaceutil_ae95ff1a39d7f1ec063fb8b0496c5f937_1ae95ff1a39d7f1ec063fb8b0496c5f937" kindref="member">loadShaderDynamically</ref></type>
        </param>
        <param>
          <type>compileShaderDynamically</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/d3d_utils.h" line="221" column="1" declfile="inc/d3d_utils.h" declline="221" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_ae14930f3301003255211479d9aa09fe6_1ae14930f3301003255211479d9aa09fe6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; DirectX::XMVECTORF32 &gt;</type>
        <definition>std::optional&lt; DirectX::XMVECTORF32 &gt; util::getDirectXColorFromString</definition>
        <argsstring>(const std::string &amp;dxColorString)</argsstring>
        <name>getDirectXColorFromString</name>
        <qualifiedname>util::getDirectXColorFromString</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>dxColorString</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/d3d_utils.cpp" line="401" column="15" bodyfile="src/d3d_utils.cpp" bodystart="401" bodyend="969" declfile="inc/d3d_utils.h" declline="223" declcolumn="15"/>
        <referencedby refid="structgui_1_1Component_1_1Component__State_a5093045ce8afda0f6b42a7ed54c33bdf_1a5093045ce8afda0f6b42a7ed54c33bdf" compoundref="ui__component_8cpp" startline="23" endline="87">gui::Component::Component_State::Component_State</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a2f35e9a833ee6296ceb09a39c5e17e37_1a2f35e9a833ee6296ceb09a39c5e17e37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool util::displayFileInfo</definition>
        <argsstring>(const std::filesystem::path &amp;targetPath)</argsstring>
        <name>displayFileInfo</name>
        <qualifiedname>util::displayFileInfo</qualifiedname>
        <param>
          <type>const std::filesystem::path &amp;</type>
          <declname>targetPath</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/file_utils.h" line="10" column="6" declfile="inc/file_utils.h" declline="10" declcolumn="6"/>
        <referencedby refid="namespaceutil_a297d24b04cadec6abe65baf8f600ae6b_1a297d24b04cadec6abe65baf8f600ae6b" compoundref="file__utils_8cpp" startline="28" endline="61">displayDirTree</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_aadda6b25733b82d6cb7805055f1dbfd6_1aadda6b25733b82d6cb7805055f1dbfd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void util::displayDirTree</definition>
        <argsstring>(const std::filesystem::path &amp;targetPath, int level)</argsstring>
        <name>displayDirTree</name>
        <qualifiedname>util::displayDirTree</qualifiedname>
        <param>
          <type>const std::filesystem::path &amp;</type>
          <declname>targetPath</declname>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/file_utils.h" line="11" column="6" declfile="inc/file_utils.h" declline="11" declcolumn="6"/>
        <referencedby refid="namespaceutil_a297d24b04cadec6abe65baf8f600ae6b_1a297d24b04cadec6abe65baf8f600ae6b" compoundref="file__utils_8cpp" startline="28" endline="61">displayDirTree</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a6aae50169362536df4f83073c785d903_1a6aae50169362536df4f83073c785d903" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t util::getFileSize</definition>
        <argsstring>(const std::filesystem::path &amp;pathToCheck)</argsstring>
        <name>getFileSize</name>
        <qualifiedname>util::getFileSize</qualifiedname>
        <param>
          <type>const std::filesystem::path &amp;</type>
          <declname>pathToCheck</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/file_utils.h" line="12" column="8" declfile="inc/file_utils.h" declline="12" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a45960dd1ee1d95202239a543b6e2b411_1a45960dd1ee1d95202239a543b6e2b411" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool util::displayTextFile</definition>
        <argsstring>(const std::filesystem::path &amp;targetPath)</argsstring>
        <name>displayTextFile</name>
        <qualifiedname>util::displayTextFile</qualifiedname>
        <param>
          <type>const std::filesystem::path &amp;</type>
          <declname>targetPath</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/file_utils.h" line="13" column="6" declfile="inc/file_utils.h" declline="13" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a9d0e06121107c707f017d559ecf5fb93_1a9d0e06121107c707f017d559ecf5fb93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool util::displayBinaryFile</definition>
        <argsstring>(const std::filesystem::path &amp;targetPath)</argsstring>
        <name>displayBinaryFile</name>
        <qualifiedname>util::displayBinaryFile</qualifiedname>
        <param>
          <type>const std::filesystem::path &amp;</type>
          <declname>targetPath</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/file_utils.h" line="14" column="6" declfile="inc/file_utils.h" declline="14" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_acf61f9dce593faa0b436d3a71a636f1e_1acf61f9dce593faa0b436d3a71a636f1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void util::writeFile</definition>
        <argsstring>(const std::filesystem::path &amp;path, const std::string &amp;data)</argsstring>
        <name>writeFile</name>
        <qualifiedname>util::writeFile</qualifiedname>
        <param>
          <type>const std::filesystem::path &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/file_utils.h" line="15" column="6" declfile="inc/file_utils.h" declline="15" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a7ede06505f05eae600a2aafd36b9a7a0_1a7ede06505f05eae600a2aafd36b9a7a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void util::deleteFile</definition>
        <argsstring>(const std::string &amp;filename)</argsstring>
        <name>deleteFile</name>
        <qualifiedname>util::deleteFile</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/file_utils.cpp" line="120" column="6" bodyfile="src/file_utils.cpp" bodystart="120" bodyend="137" declfile="inc/file_utils.h" declline="16" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a409210e412a728f055b1a4d0242c09ea_1a409210e412a728f055b1a4d0242c09ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void util::searchFile</definition>
        <argsstring>(const std::filesystem::path &amp;directory, const std::filesystem::path &amp;filename)</argsstring>
        <name>searchFile</name>
        <qualifiedname>util::searchFile</qualifiedname>
        <param>
          <type>const std::filesystem::path &amp;</type>
          <declname>directory</declname>
        </param>
        <param>
          <type>const std::filesystem::path &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/file_utils.h" line="17" column="6" declfile="inc/file_utils.h" declline="17" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_ad838668768b75674823d8ecd246eba62_1ad838668768b75674823d8ecd246eba62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool util::createDirectory</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>createDirectory</name>
        <qualifiedname>util::createDirectory</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/file_utils.cpp" line="157" column="6" bodyfile="src/file_utils.cpp" bodystart="157" bodyend="160" declfile="inc/file_utils.h" declline="18" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a2d2910be5640d89c43c3f053f85a05c6_1a2d2910be5640d89c43c3f053f85a05c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void util::setFilePermissions</definition>
        <argsstring>(const std::string &amp;path, std::filesystem::perms permsToSet, std::filesystem::perm_options permsAction)</argsstring>
        <name>setFilePermissions</name>
        <qualifiedname>util::setFilePermissions</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>std::filesystem::perms</type>
          <declname>permsToSet</declname>
        </param>
        <param>
          <type>std::filesystem::perm_options</type>
          <declname>permsAction</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/file_utils.h" line="19" column="6" declfile="inc/file_utils.h" declline="19" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a09750278284c9976b57d7ac45f3d625d_1a09750278284c9976b57d7ac45f3d625d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string util::getFilename</definition>
        <argsstring>(const std::string &amp;path)</argsstring>
        <name>getFilename</name>
        <qualifiedname>util::getFilename</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/file_utils.cpp" line="169" column="13" bodyfile="src/file_utils.cpp" bodystart="169" bodyend="173" declfile="inc/file_utils.h" declline="20" declcolumn="13"/>
        <referencedby refid="classModel_a0600c0c1f47a574ab81a6e0e73f3520e_1a0600c0c1f47a574ab81a6e0e73f3520e" compoundref="MODEL_8CPP" startline="17" endline="67">Model::Model</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a07e1161f3092d4c7a113c7cb8d9ad58d_1a07e1161f3092d4c7a113c7cb8d9ad58d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string util::getFileExtension</definition>
        <argsstring>(const std::string &amp;filename)</argsstring>
        <name>getFileExtension</name>
        <qualifiedname>util::getFileExtension</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/file_utils.cpp" line="175" column="13" bodyfile="src/file_utils.cpp" bodystart="175" bodyend="179" declfile="inc/file_utils.h" declline="21" declcolumn="13"/>
        <referencedby refid="classBitmap_ada5bff46e6270af0cbed7f8252af7956_1ada5bff46e6270af0cbed7f8252af7956" compoundref="bitmap_8cpp" startline="139" endline="165">Bitmap::save</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_ac18caaab1a0105409de01e8a21792922_1ac18caaab1a0105409de01e8a21792922" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool util::isFileBinary</definition>
        <argsstring>(const char *fname)</argsstring>
        <name>isFileBinary</name>
        <qualifiedname>util::isFileBinary</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>fname</declname>
        </param>
        <briefdescription>
<para>read 255 chars just to be sure </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/file_utils.cpp" line="181" column="6" bodyfile="src/file_utils.cpp" bodystart="181" bodyend="195" declfile="inc/file_utils.h" declline="23" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a46531fa60115067ae7c1afdb2e7222e6_1a46531fa60115067ae7c1afdb2e7222e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t util::countLinesOfFile</definition>
        <argsstring>(const char *fileName)</argsstring>
        <name>countLinesOfFile</name>
        <qualifiedname>util::countLinesOfFile</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>fileName</declname>
        </param>
        <briefdescription>
<para>count lines of a file </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/file_utils.cpp" line="197" column="8" bodyfile="src/file_utils.cpp" bodystart="197" bodyend="215" declfile="inc/file_utils.h" declline="25" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_aba57a5c93aea6fb1eb297fbdde976fac_1aba57a5c93aea6fb1eb297fbdde976fac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t util::countColumnsOfFile</definition>
        <argsstring>(const char *fileName)</argsstring>
        <name>countColumnsOfFile</name>
        <qualifiedname>util::countColumnsOfFile</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>fileName</declname>
        </param>
        <briefdescription>
<para>calculate columns of a file (assuming that the file has equal ammount of columns - maximum ammount of columns in any given line) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/file_utils.cpp" line="217" column="8" bodyfile="src/file_utils.cpp" bodystart="217" bodyend="232" declfile="inc/file_utils.h" declline="27" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a2e4fe9aa4716394e2805e543799fc447_1a2e4fe9aa4716394e2805e543799fc447" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if_t&lt;std::is_arithmetic_v&lt;T&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T util::abs</definition>
        <argsstring>(const T val)</argsstring>
        <name>abs</name>
        <qualifiedname>util::abs</qualifiedname>
        <param>
          <type>const T</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/math_utils.h" line="24" column="13" bodyfile="inc/math_utils.h" bodystart="24" bodyend="29"/>
        <referencedby refid="namespaceutil_aeda13ee8a3f52a650523b8c6bfd2b61b_1aeda13ee8a3f52a650523b8c6bfd2b61b" compoundref="math__utils_8h" startline="103" endline="107">getFractionalPart</referencedby>
        <referencedby refid="namespaceutil_a1a6872147f0d950e184c0748908696ea_1a1a6872147f0d950e184c0748908696ea" compoundref="d3d__utils_8cpp" startline="13" endline="17">isNormalized</referencedby>
        <referencedby refid="namespaceutil_a17b3c735495491f3781a50b216438caf_1a17b3c735495491f3781a50b216438caf" compoundref="math__utils_8h" startline="209" endline="233">squareRoot</referencedby>
        <referencedby refid="namespaceutil_ac97480a5df1556320ccc259c914c1c33_1ac97480a5df1556320ccc259c914c1c33" compoundref="math__utils_8h" startline="33" endline="36">truncate</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_ac97480a5df1556320ccc259c914c1c33_1ac97480a5df1556320ccc259c914c1c33" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>int util::truncate</definition>
        <argsstring>(const T val)</argsstring>
        <name>truncate</name>
        <qualifiedname>util::truncate</qualifiedname>
        <param>
          <type>const T</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>truncate the supplied number val; handles negative numbers as well </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/math_utils.h" line="33" column="15" bodyfile="inc/math_utils.h" bodystart="33" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a5613c348b3692b0253e342a1b13555ef_1a5613c348b3692b0253e342a1b13555ef" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if_t&lt;std::is_arithmetic_v&lt;T&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T util::modulus</definition>
        <argsstring>(const T divident, const T divisor) noexcept</argsstring>
        <name>modulus</name>
        <qualifiedname>util::modulus</qualifiedname>
        <param>
          <type>const T</type>
          <declname>divident</declname>
        </param>
        <param>
          <type>const T</type>
          <declname>divisor</declname>
        </param>
        <briefdescription>
<para>&apos;fmod()&apos; === &apos;&apos; : returns the signed floating point remainder of a division (divident / divisor) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/math_utils.h" line="48" column="13" bodyfile="inc/math_utils.h" bodystart="48" bodyend="59"/>
        <referencedby refid="namespaceutil_a42d2ccb619f95403446082ae98138a5c_1a42d2ccb619f95403446082ae98138a5c" compoundref="math__utils_8h" startline="63" endline="66">ceil</referencedby>
        <referencedby refid="namespaceutil_a58e7805f849ad738fcc0d637ecb77919_1a58e7805f849ad738fcc0d637ecb77919" compoundref="math__utils_8h" startline="71" endline="74">floor</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a42d2ccb619f95403446082ae98138a5c_1a42d2ccb619f95403446082ae98138a5c" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if_t&lt;std::is_arithmetic_v&lt;T&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>int util::ceil</definition>
        <argsstring>(const T val) noexcept</argsstring>
        <name>ceil</name>
        <qualifiedname>util::ceil</qualifiedname>
        <param>
          <type>const T</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/math_utils.h" line="63" column="15" bodyfile="inc/math_utils.h" bodystart="63" bodyend="66"/>
        <referencedby refid="classTerrain_af5a4ec6ff724b557052dd12be7f0de0c_1af5a4ec6ff724b557052dd12be7f0de0c" compoundref="terrain_8cpp" startline="24" endline="158">Terrain::Terrain</referencedby>
        <referencedby refid="namespaceutil_adb467cffbff18127cef94c3418dca920_1adb467cffbff18127cef94c3418dca920" compoundref="math__utils_8h" startline="376" endline="390">gaussianFilter</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a58e7805f849ad738fcc0d637ecb77919_1a58e7805f849ad738fcc0d637ecb77919" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if_t&lt;std::is_arithmetic_v&lt;T&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>int util::floor</definition>
        <argsstring>(const T val) noexcept</argsstring>
        <name>floor</name>
        <qualifiedname>util::floor</qualifiedname>
        <param>
          <type>const T</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/math_utils.h" line="71" column="15" bodyfile="inc/math_utils.h" bodystart="71" bodyend="74"/>
        <referencedby refid="structGeometry_a79e26ca18bc0353a8c700025cde4fb73_1a79e26ca18bc0353a8c700025cde4fb73" compoundref="geometry_8cpp" startline="404" endline="510">Geometry::makePlanarGridTexturedFromHeighmap</referencedby>
        <referencedby refid="namespaceutil_a6069b6178e28e74632539744d6057427_1a6069b6178e28e74632539744d6057427" compoundref="utils_8cpp" startline="332" endline="335">mapToByte</referencedby>
        <referencedby refid="namespaceutil_a231ff37a555718ffa5cbaa39694b0025_1a231ff37a555718ffa5cbaa39694b0025" compoundref="utils_8cpp" startline="327" endline="330">mapToByte</referencedby>
        <referencedby refid="namespaceutil_a5db2cb4938195122f9929c8358024ff3_1a5db2cb4938195122f9929c8358024ff3" compoundref="math__utils_8h" startline="137" endline="156">numberToCoord</referencedby>
        <referencedby refid="namespaceutil_a9af4afdb82a7b89d7ff477feb683947d_1a9af4afdb82a7b89d7ff477feb683947d" compoundref="math__utils_8h" startline="78" endline="81">round</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a9af4afdb82a7b89d7ff477feb683947d_1a9af4afdb82a7b89d7ff477feb683947d" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if_t&lt;std::is_arithmetic_v&lt;T&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>int util::round</definition>
        <argsstring>(const T val) noexcept</argsstring>
        <name>round</name>
        <qualifiedname>util::round</qualifiedname>
        <param>
          <type>const T</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/math_utils.h" line="78" column="15" bodyfile="inc/math_utils.h" bodystart="78" bodyend="81"/>
        <referencedby refid="classGraphics_ad5811b30333f3f4918b4d8d52fe19002_1ad5811b30333f3f4918b4d8d52fe19002" compoundref="graphics_8cpp" startline="99" endline="252">Graphics::Graphics</referencedby>
        <referencedby refid="namespaceutil_aea61d2ef154830ad1294ac3cc6776628_1aea61d2ef154830ad1294ac3cc6776628" compoundref="math__utils_8h" startline="110" endline="116">getFractionalPartAsInt</referencedby>
        <referencedby refid="namespaceutil_a3fb577feda44ff7eba9c92b53e673f1b_1a3fb577feda44ff7eba9c92b53e673f1b" compoundref="math__utils_8h" startline="159" endline="167">mapRangeRounded</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_ad0d0cc222ef61a720cf2a5cc1aec8ff8_1ad0d0cc222ef61a720cf2a5cc1aec8ff8" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename J</type>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if_t&lt;std::is_arithmetic_v&lt;T&gt;&gt;</defval>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if_t&lt;std::is_arithmetic_v&lt;J&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T util::powerOf</definition>
        <argsstring>(T x, J n)</argsstring>
        <name>powerOf</name>
        <qualifiedname>util::powerOf</qualifiedname>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <param>
          <type>J</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>calculate x^n, n &gt; 1 </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/math_utils.h" line="85" column="13" bodyfile="inc/math_utils.h" bodystart="85" bodyend="99"/>
        <referencedby refid="namespaceutil_a65a18284a43416d037ebb1552998268c_1a65a18284a43416d037ebb1552998268c" compoundref="math__utils_8cpp" startline="117" endline="133">cosine</referencedby>
        <referencedby refid="namespaceutil_aea61d2ef154830ad1294ac3cc6776628_1aea61d2ef154830ad1294ac3cc6776628" compoundref="math__utils_8h" startline="110" endline="116">getFractionalPartAsInt</referencedby>
        <referencedby refid="namespaceutil_a877f952aa1d6672af06e84ac66a6bfd1_1a877f952aa1d6672af06e84ac66a6bfd1" compoundref="math__utils_8cpp" startline="92" endline="105">isPrime</referencedby>
        <referencedby refid="namespaceutil_a4f336975ca420f87d54fa60fcbcaa8ef_1a4f336975ca420f87d54fa60fcbcaa8ef" compoundref="math__utils_8cpp" startline="135" endline="151">sine</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_aeda13ee8a3f52a650523b8c6bfd2b61b_1aeda13ee8a3f52a650523b8c6bfd2b61b" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if_t&lt;std::is_floating_point_v&lt;T&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T util::getFractionalPart</definition>
        <argsstring>(T val)</argsstring>
        <name>getFractionalPart</name>
        <qualifiedname>util::getFractionalPart</qualifiedname>
        <param>
          <type>T</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>works like std::modf which decomposes given floating point value num into integral and fractional parts </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/math_utils.h" line="103" column="13" bodyfile="inc/math_utils.h" bodystart="103" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_aea61d2ef154830ad1294ac3cc6776628_1aea61d2ef154830ad1294ac3cc6776628" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if_t&lt;std::is_floating_point_v&lt;T&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>std::uint64_t</type>
        <definition>std::uint64_t util::getFractionalPartAsInt</definition>
        <argsstring>(const T val, const int numberOfDecimalPlaces)</argsstring>
        <name>getFractionalPartAsInt</name>
        <qualifiedname>util::getFractionalPartAsInt</qualifiedname>
        <param>
          <type>const T</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>numberOfDecimalPlaces</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/math_utils.h" line="110" column="25" bodyfile="inc/math_utils.h" bodystart="110" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_abbef8e9194b651fe51e9b998c26739e7_1abbef8e9194b651fe51e9b998c26739e7" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if_t&lt;std::is_arithmetic_v&lt;T&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T util::clamp</definition>
        <argsstring>(T number, T minimum, T maximum)</argsstring>
        <name>clamp</name>
        <qualifiedname>util::clamp</qualifiedname>
        <param>
          <type>T</type>
          <declname>number</declname>
        </param>
        <param>
          <type>T</type>
          <declname>minimum</declname>
        </param>
        <param>
          <type>T</type>
          <declname>maximum</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/math_utils.h" line="119" column="13" bodyfile="inc/math_utils.h" bodystart="119" bodyend="132"/>
        <referencedby refid="classSettingsManager_a5e4c7dd1554609fe8ac4fac171e3c4a5_1a5e4c7dd1554609fe8ac4fac171e3c4a5" compoundref="settings__manager_8cpp" startline="20" endline="70">SettingsManager::loadFromFile</referencedby>
        <referencedby refid="namespaceutil_a5db2cb4938195122f9929c8358024ff3_1a5db2cb4938195122f9929c8358024ff3" compoundref="math__utils_8h" startline="137" endline="156">numberToCoord</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a5db2cb4938195122f9929c8358024ff3_1a5db2cb4938195122f9929c8358024ff3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if_t&lt;std::is_arithmetic_v&lt;T&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>int util::numberToCoord</definition>
        <argsstring>(T number, int amountPerGradation, int nGradations, bool is_x_axis)</argsstring>
        <name>numberToCoord</name>
        <qualifiedname>util::numberToCoord</qualifiedname>
        <param>
          <type>T</type>
          <declname>number</declname>
        </param>
        <param>
          <type>int</type>
          <declname>amountPerGradation</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nGradations</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_x_axis</declname>
        </param>
        <briefdescription>
<para>transformation of a scalar (1D) to a Cartesian coordinate </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/math_utils.h" line="137" column="5" bodyfile="inc/math_utils.h" bodystart="137" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a3fb577feda44ff7eba9c92b53e673f1b_1a3fb577feda44ff7eba9c92b53e673f1b" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if_t&lt;std::is_arithmetic_v&lt;T&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T util::mapRangeRounded</definition>
        <argsstring>(const T val, const T inFirst, const T inLast, const T outFirst, const T outLast) noexcept</argsstring>
        <name>mapRangeRounded</name>
        <qualifiedname>util::mapRangeRounded</qualifiedname>
        <param>
          <type>const T</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const T</type>
          <declname>inFirst</declname>
        </param>
        <param>
          <type>const T</type>
          <declname>inLast</declname>
        </param>
        <param>
          <type>const T</type>
          <declname>outFirst</declname>
        </param>
        <param>
          <type>const T</type>
          <declname>outLast</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/math_utils.h" line="159" column="13" bodyfile="inc/math_utils.h" bodystart="159" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a7972d7da89f87d143aa9097a2f83c9d4_1a7972d7da89f87d143aa9097a2f83c9d4" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if_t&lt;std::is_arithmetic_v&lt;T&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T util::mapRange</definition>
        <argsstring>(const T val, const T inFirst, const T inLast, const T outFirst, const T outLast) noexcept</argsstring>
        <name>mapRange</name>
        <qualifiedname>util::mapRange</qualifiedname>
        <param>
          <type>const T</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const T</type>
          <declname>inFirst</declname>
        </param>
        <param>
          <type>const T</type>
          <declname>inLast</declname>
        </param>
        <param>
          <type>const T</type>
          <declname>outFirst</declname>
        </param>
        <param>
          <type>const T</type>
          <declname>outLast</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/math_utils.h" line="170" column="13" bodyfile="inc/math_utils.h" bodystart="170" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a0ad004849a7e0c00352c9907f23bb198_1a0ad004849a7e0c00352c9907f23bb198" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if_t&lt;std::is_floating_point_v&lt;T&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool util::isApproximatelyEqual</definition>
        <argsstring>(const T x, const T y)</argsstring>
        <name>isApproximatelyEqual</name>
        <qualifiedname>util::isApproximatelyEqual</qualifiedname>
        <param>
          <type>const T</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const T</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>checks for approximate equality between floating point numbers </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/math_utils.h" line="185" column="16" bodyfile="inc/math_utils.h" bodystart="185" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a36f24693be7541930204513fba53095f_1a36f24693be7541930204513fba53095f" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if_t&lt;std::is_arithmetic_v&lt;T&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T util::mult10</definition>
        <argsstring>(const T num)</argsstring>
        <name>mult10</name>
        <qualifiedname>util::mult10</qualifiedname>
        <param>
          <type>const T</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/math_utils.h" line="193" column="13" bodyfile="inc/math_utils.h" bodystart="193" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a4d3114ad4b2572880992732ff3aff6a6_1a4d3114ad4b2572880992732ff3aff6a6" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if_t&lt;std::is_arithmetic_v&lt;T&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T util::div10</definition>
        <argsstring>(const T dividend)</argsstring>
        <name>div10</name>
        <qualifiedname>util::div10</qualifiedname>
        <param>
          <type>const T</type>
          <declname>dividend</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/math_utils.h" line="201" column="13" bodyfile="inc/math_utils.h" bodystart="201" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a17b3c735495491f3781a50b216438caf_1a17b3c735495491f3781a50b216438caf" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if_t&lt;std::is_arithmetic_v&lt;T&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T util::squareRoot</definition>
        <argsstring>(const T x) noexcept</argsstring>
        <name>squareRoot</name>
        <qualifiedname>util::squareRoot</qualifiedname>
        <param>
          <type>const T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>calculates the square root of a number </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/math_utils.h" line="209" column="13" bodyfile="inc/math_utils.h" bodystart="209" bodyend="233"/>
        <referencedby refid="namespaceutil_a6f7ed38c6cb8770246dbd82f30bcde7f_1a6f7ed38c6cb8770246dbd82f30bcde7f" compoundref="math__utils_8h" startline="236" endline="260">quadratic</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a6f7ed38c6cb8770246dbd82f30bcde7f_1a6f7ed38c6cb8770246dbd82f30bcde7f" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if_t&lt;std::is_arithmetic_v&lt;T&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void util::quadratic</definition>
        <argsstring>(const T a, const T b, const T c)</argsstring>
        <name>quadratic</name>
        <qualifiedname>util::quadratic</qualifiedname>
        <param>
          <type>const T</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const T</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const T</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/math_utils.h" line="236" column="16" bodyfile="inc/math_utils.h" bodystart="236" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a5d636960b2782b61ea876609328470d4_1a5d636960b2782b61ea876609328470d4" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if_t&lt;std::is_arithmetic_v&lt;T&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T util::square</definition>
        <argsstring>(const T x)</argsstring>
        <name>square</name>
        <qualifiedname>util::square</qualifiedname>
        <param>
          <type>const T</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/math_utils.h" line="263" column="13" bodyfile="inc/math_utils.h" bodystart="263" bodyend="266"/>
        <referencedby refid="namespaceutil_ac8a2092a72d02aa310e114fc79673f57_1ac8a2092a72d02aa310e114fc79673f57" compoundref="math__utils_8h" startline="354" endline="360">gaussian1d</referencedby>
        <referencedby refid="namespaceutil_a1810a179a19e611ea6d512b61b97a61b_1a1810a179a19e611ea6d512b61b97a61b" compoundref="math__utils_8h" startline="364" endline="370">gaussian2d</referencedby>
        <referencedby refid="namespaceutil_adb467cffbff18127cef94c3418dca920_1adb467cffbff18127cef94c3418dca920" compoundref="math__utils_8h" startline="376" endline="390">gaussianFilter</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a8da9df39bac50860c8b13dbea7166b71_1a8da9df39bac50860c8b13dbea7166b71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string util::toHexString</definition>
        <argsstring>(const T i)</argsstring>
        <name>toHexString</name>
        <qualifiedname>util::toHexString</qualifiedname>
        <param>
          <type>const T</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/math_utils.h" line="269" column="13" bodyfile="inc/math_utils.h" bodystart="269" bodyend="278"/>
        <referencedby refid="classWindow_1_1WindowClass_aa826fd2bfebc907f2ae0d3226b919480_1aa826fd2bfebc907f2ae0d3226b919480" compoundref="window_8cpp" startline="32" endline="91">Window::WindowClass::WindowClass</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_aa1410673520251e8adac7cc3bb6b53ec_1aa1410673520251e8adac7cc3bb6b53ec" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if_t&lt;std::is_arithmetic_v&lt;T&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T util::normalizeTo01</definition>
        <argsstring>(const T val, const T min, const T max)</argsstring>
        <name>normalizeTo01</name>
        <qualifiedname>util::normalizeTo01</qualifiedname>
        <param>
          <type>const T</type>
          <declname>val</declname>
        </param>
        <param>
          <type>const T</type>
          <declname>min</declname>
        </param>
        <param>
          <type>const T</type>
          <declname>max</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/math_utils.h" line="281" column="13" bodyfile="inc/math_utils.h" bodystart="281" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_add4d8b0dd31847872bc5aecd1f9c307a_1add4d8b0dd31847872bc5aecd1f9c307a" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if_t&lt;std::is_arithmetic_v&lt;T&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T util::convertRange</definition>
        <argsstring>(const T valueInRange, const T oldMin, const T oldMax, const T newMin, const T newMax)</argsstring>
        <name>convertRange</name>
        <qualifiedname>util::convertRange</qualifiedname>
        <param>
          <type>const T</type>
          <declname>valueInRange</declname>
        </param>
        <param>
          <type>const T</type>
          <declname>oldMin</declname>
        </param>
        <param>
          <type>const T</type>
          <declname>oldMax</declname>
        </param>
        <param>
          <type>const T</type>
          <declname>newMin</declname>
        </param>
        <param>
          <type>const T</type>
          <declname>newMax</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/math_utils.h" line="291" column="13" bodyfile="inc/math_utils.h" bodystart="291" bodyend="309"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a4bb3661bd6981253daff0d4676749651_1a4bb3661bd6981253daff0d4676749651" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if_t&lt;std::is_arithmetic_v&lt;T&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T util::wrapAngle</definition>
        <argsstring>(const T angleRad)</argsstring>
        <name>wrapAngle</name>
        <qualifiedname>util::wrapAngle</qualifiedname>
        <param>
          <type>const T</type>
          <declname>angleRad</declname>
        </param>
        <briefdescription>
<para>wrap angle (in radians) in the range -pi to pi </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/math_utils.h" line="313" column="13" bodyfile="inc/math_utils.h" bodystart="313" bodyend="319"/>
        <referencedby refid="classCamera_a6c7571eacc74a16f4ec5473afca8feaa_1a6c7571eacc74a16f4ec5473afca8feaa" compoundref="camera_8cpp" startline="375" endline="389">Camera::rotateRel</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a9ae2547dbf481d93da2a600fcab91ffa_1a9ae2547dbf481d93da2a600fcab91ffa" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if_t&lt;std::is_arithmetic_v&lt;T&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T util::toRadians</definition>
        <argsstring>(const T deg)</argsstring>
        <name>toRadians</name>
        <qualifiedname>util::toRadians</qualifiedname>
        <param>
          <type>const T</type>
          <declname>deg</declname>
        </param>
        <briefdescription>
<para>convert angle in degrees to radians </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/math_utils.h" line="323" column="13" bodyfile="inc/math_utils.h" bodystart="323" bodyend="326"/>
        <referencedby refid="classCamera_aaa6c4ca43fa06f9995d961d805fd4de3_1aaa6c4ca43fa06f9995d961d805fd4de3" compoundref="camera_8cpp" startline="31" endline="48">Camera::computeTargetVector</referencedby>
        <referencedby refid="namespaceutil_ac410281f44068ba2d4d1abc0ce4fc721_1ac410281f44068ba2d4d1abc0ce4fc721" compoundref="d3d__utils_8cpp" startline="340" endline="347">rotateVectorAroundAxisAngle</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a80c74393452d6c7fb4ac1d854c905c8a_1a80c74393452d6c7fb4ac1d854c905c8a" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if_t&lt;std::is_arithmetic_v&lt;T&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T util::toDegrees</definition>
        <argsstring>(const T rad)</argsstring>
        <name>toDegrees</name>
        <qualifiedname>util::toDegrees</qualifiedname>
        <param>
          <type>const T</type>
          <declname>rad</declname>
        </param>
        <briefdescription>
<para>convert angle in radians to degrees </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/math_utils.h" line="330" column="13" bodyfile="inc/math_utils.h" bodystart="330" bodyend="333"/>
        <referencedby refid="classCamera_acd1b1e7e17b69bdeb085b968e5793136_1acd1b1e7e17b69bdeb085b968e5793136" compoundref="camera_8cpp" startline="50" endline="57">Camera::computePitchYawInDegFromDirectionVector</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a4333f2f85b482976f011e521728d23aa_1a4333f2f85b482976f011e521728d23aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void util::normalizeAngleDeg</definition>
        <argsstring>(float &amp;angleDeg)</argsstring>
        <name>normalizeAngleDeg</name>
        <qualifiedname>util::normalizeAngleDeg</qualifiedname>
        <param>
          <type>float &amp;</type>
          <declname>angleDeg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math_utils.cpp" line="12" column="6" bodyfile="src/math_utils.cpp" bodystart="12" bodyend="22" declfile="inc/math_utils.h" declline="335" declcolumn="6"/>
        <referencedby refid="namespaceutil_a1c89c4b84e6c94896fd73ca1d3821faa_1a1c89c4b84e6c94896fd73ca1d3821faa" compoundref="math__utils_8cpp" startline="24" endline="37">isAngleDegWithinRange</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a1c89c4b84e6c94896fd73ca1d3821faa_1a1c89c4b84e6c94896fd73ca1d3821faa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool util::isAngleDegWithinRange</definition>
        <argsstring>(float angleDeg, float a, float b)</argsstring>
        <name>isAngleDegWithinRange</name>
        <qualifiedname>util::isAngleDegWithinRange</qualifiedname>
        <param>
          <type>float</type>
          <declname>angleDeg</declname>
        </param>
        <param>
          <type>float</type>
          <declname>a</declname>
        </param>
        <param>
          <type>float</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math_utils.cpp" line="24" column="6" bodyfile="src/math_utils.cpp" bodystart="24" bodyend="37" declfile="inc/math_utils.h" declline="336" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a1fabcee5cfce6935f5525a672110face_1a1fabcee5cfce6935f5525a672110face" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if_t&lt;std::is_arithmetic_v&lt;T&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T util::interpolate</definition>
        <argsstring>(const T &amp;src, const T &amp;dst, const double alpha)</argsstring>
        <name>interpolate</name>
        <qualifiedname>util::interpolate</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const double</type>
          <declname>alpha</declname>
        </param>
        <briefdescription>
<para>linear interpolation from src to dst value using alpha provided, interpolates any two Types that support the operations +, -, * </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/math_utils.h" line="340" column="13" bodyfile="inc/math_utils.h" bodystart="340" bodyend="345"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a62c80b402cab4b59e95be83a68faacb2_1a62c80b402cab4b59e95be83a68faacb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>util::ALIAS_FUNCTION</definition>
        <argsstring>(interpolate, lerp)</argsstring>
        <name>ALIAS_FUNCTION</name>
        <qualifiedname>util::ALIAS_FUNCTION</qualifiedname>
        <param>
          <type><ref refid="namespaceutil_a1fabcee5cfce6935f5525a672110face_1a1fabcee5cfce6935f5525a672110face" kindref="member">interpolate</ref></type>
        </param>
        <param>
          <type>lerp</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/math_utils.h" line="346" column="1" declfile="inc/math_utils.h" declline="346" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_ac8a2092a72d02aa310e114fc79673f57_1ac8a2092a72d02aa310e114fc79673f57" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T util::gaussian1d</definition>
        <argsstring>(const T x, const T sigma, const T mean=(T) 0) noexcept</argsstring>
        <name>gaussian1d</name>
        <qualifiedname>util::gaussian1d</qualifiedname>
        <param>
          <type>const T</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const T</type>
          <declname>sigma</declname>
        </param>
        <param>
          <type>const T</type>
          <declname>mean</declname>
          <defval>(T) 0</defval>
        </param>
        <briefdescription>
<para>1d Gaussian distribution </para>
        </briefdescription>
        <detaileddescription>
<para>&lt;image url=&quot;C:/Users/nikla/pictures/gaussian function distribution.png&quot; scale=&quot;.4&quot; &gt; </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/math_utils.h" line="354" column="13" bodyfile="inc/math_utils.h" bodystart="354" bodyend="360"/>
        <referencedby refid="classren_1_1Renderer3d_a4fdb00f4231e140956203b65b13555f2_1a4fdb00f4231e140956203b65b13555f2" compoundref="renderer_8cpp" startline="567" endline="590">ren::Renderer3d::setKernelGauss</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a1810a179a19e611ea6d512b61b97a61b_1a1810a179a19e611ea6d512b61b97a61b" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T util::gaussian2d</definition>
        <argsstring>(const T x, const T y, const T sigma) noexcept</argsstring>
        <name>gaussian2d</name>
        <qualifiedname>util::gaussian2d</qualifiedname>
        <param>
          <type>const T</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const T</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const T</type>
          <declname>sigma</declname>
        </param>
        <briefdescription>
<para>Isotropic (mean = 0) 2d Gaussian distribution. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/math_utils.h" line="364" column="13" bodyfile="inc/math_utils.h" bodystart="364" bodyend="370"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_adb467cffbff18127cef94c3418dca920_1adb467cffbff18127cef94c3418dca920" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T util::gaussianFilter</definition>
        <argsstring>(const T x, const T y, const int kernelSize=5) noexcept</argsstring>
        <name>gaussianFilter</name>
        <qualifiedname>util::gaussianFilter</qualifiedname>
        <param>
          <type>const T</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const T</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>kernelSize</declname>
          <defval>5</defval>
        </param>
        <briefdescription>
<para>Isotropic (mean = 0) 2d Gaussian distribution. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/math_utils.h" line="376" column="13" bodyfile="inc/math_utils.h" bodystart="376" bodyend="390"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_ad75839159c882b952ed1bb8e7a742697_1ad75839159c882b952ed1bb8e7a742697" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if_t&lt;std::is_arithmetic_v&lt;T&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T util::randomInRange</definition>
        <argsstring>(const T start, const T end)</argsstring>
        <name>randomInRange</name>
        <qualifiedname>util::randomInRange</qualifiedname>
        <param>
          <type>const T</type>
          <declname>start</declname>
        </param>
        <param>
          <type>const T</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/math_utils.h" line="393" column="13" bodyfile="inc/math_utils.h" bodystart="393" bodyend="397"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a2a1ad5fba27ae51e668d2f9eb0f5e91c_1a2a1ad5fba27ae51e668d2f9eb0f5e91c" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if_t&lt;std::is_arithmetic_v&lt;T&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>int util::signum</definition>
        <argsstring>(const T val)</argsstring>
        <name>signum</name>
        <qualifiedname>util::signum</qualifiedname>
        <param>
          <type>const T</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/math_utils.h" line="400" column="15" bodyfile="inc/math_utils.h" bodystart="400" bodyend="405"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a7cea5ffdc34b4aac2eb8bbbcef6734c0_1a7cea5ffdc34b4aac2eb8bbbcef6734c0" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if_t&lt;std::is_arithmetic_v&lt;T&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T util::nthMultipleOf</definition>
        <argsstring>(const T number, const int n)</argsstring>
        <name>nthMultipleOf</name>
        <qualifiedname>util::nthMultipleOf</qualifiedname>
        <param>
          <type>const T</type>
          <declname>number</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/math_utils.h" line="408" column="13" bodyfile="inc/math_utils.h" bodystart="408" bodyend="417"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a1211fa8e894591a77f7486f478d77fc6_1a1211fa8e894591a77f7486f478d77fc6" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int util::nextPowerOf2</definition>
        <argsstring>(int n)</argsstring>
        <name>nextPowerOf2</name>
        <qualifiedname>util::nextPowerOf2</qualifiedname>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>find smallest power of 2 greater than or equal to n </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math_utils.cpp" line="39" column="15" bodyfile="src/math_utils.cpp" bodystart="39" bodyend="60" declfile="inc/math_utils.h" declline="420" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a758a63b46e99a774a19e9ddd520bc65a_1a758a63b46e99a774a19e9ddd520bc65a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int util::gcd</definition>
        <argsstring>(int divident, int divisor)</argsstring>
        <name>gcd</name>
        <qualifiedname>util::gcd</qualifiedname>
        <param>
          <type>int</type>
          <declname>divident</declname>
        </param>
        <param>
          <type>int</type>
          <declname>divisor</declname>
        </param>
        <briefdescription>
<para>prints Greatest Common Divisor of numbers </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math_utils.cpp" line="62" column="5" bodyfile="src/math_utils.cpp" bodystart="62" bodyend="80" declfile="inc/math_utils.h" declline="423" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_aec3b656d9b57d19b7606c42a5fc867e2_1aec3b656d9b57d19b7606c42a5fc867e2" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>int</type>
        <definition>int util::factorialOf</definition>
        <argsstring>(int n) noexcept</argsstring>
        <name>factorialOf</name>
        <qualifiedname>util::factorialOf</qualifiedname>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math_utils.cpp" line="82" column="15" bodyfile="src/math_utils.cpp" bodystart="82" bodyend="90" declfile="inc/math_utils.h" declline="424" declcolumn="15"/>
        <referencedby refid="namespaceutil_a65a18284a43416d037ebb1552998268c_1a65a18284a43416d037ebb1552998268c" compoundref="math__utils_8cpp" startline="117" endline="133">cosine</referencedby>
        <referencedby refid="namespaceutil_a4f336975ca420f87d54fa60fcbcaa8ef_1a4f336975ca420f87d54fa60fcbcaa8ef" compoundref="math__utils_8cpp" startline="135" endline="151">sine</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a877f952aa1d6672af06e84ac66a6bfd1_1a877f952aa1d6672af06e84ac66a6bfd1" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool util::isPrime</definition>
        <argsstring>(const int number) noexcept</argsstring>
        <name>isPrime</name>
        <qualifiedname>util::isPrime</qualifiedname>
        <param>
          <type>const int</type>
          <declname>number</declname>
        </param>
        <briefdescription>
<para>trial division method </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math_utils.cpp" line="92" column="16" bodyfile="src/math_utils.cpp" bodystart="92" bodyend="105" declfile="inc/math_utils.h" declline="426" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a7f606e49e4a62fef3cd258e61ed52b36_1a7f606e49e4a62fef3cd258e61ed52b36" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t util::computeTriangularNumber</definition>
        <argsstring>(const int number) noexcept</argsstring>
        <name>computeTriangularNumber</name>
        <qualifiedname>util::computeTriangularNumber</qualifiedname>
        <param>
          <type>const int</type>
          <declname>number</declname>
        </param>
        <briefdescription>
<para>Triangular numbers represent the number of dots that can form an equilateral triangle. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math_utils.cpp" line="107" column="18" bodyfile="src/math_utils.cpp" bodystart="107" bodyend="110" declfile="inc/math_utils.h" declline="429" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a0e934fb844bf60cb5c0e211141162ede_1a0e934fb844bf60cb5c0e211141162ede" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool util::isPowerOfTwo</definition>
        <argsstring>(const std::size_t value) noexcept</argsstring>
        <name>isPowerOfTwo</name>
        <qualifiedname>util::isPowerOfTwo</qualifiedname>
        <param>
          <type>const std::size_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math_utils.cpp" line="112" column="16" bodyfile="src/math_utils.cpp" bodystart="112" bodyend="115" declfile="inc/math_utils.h" declline="431" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a65a18284a43416d037ebb1552998268c_1a65a18284a43416d037ebb1552998268c" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>float</type>
        <definition>float util::cosine</definition>
        <argsstring>(float x) noexcept</argsstring>
        <name>cosine</name>
        <qualifiedname>util::cosine</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math_utils.cpp" line="117" column="7" bodyfile="src/math_utils.cpp" bodystart="117" bodyend="133" declfile="inc/math_utils.h" declline="432" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a4f336975ca420f87d54fa60fcbcaa8ef_1a4f336975ca420f87d54fa60fcbcaa8ef" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>float</type>
        <definition>float util::sine</definition>
        <argsstring>(float x) noexcept</argsstring>
        <name>sine</name>
        <qualifiedname>util::sine</qualifiedname>
        <param>
          <type>float</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math_utils.cpp" line="135" column="7" bodyfile="src/math_utils.cpp" bodystart="135" bodyend="151" declfile="inc/math_utils.h" declline="433" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_af2b18232aad377b0f849e261c667b192_1af2b18232aad377b0f849e261c667b192" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int util::linearSearch</definition>
        <argsstring>(const int *A, const int n, const int x)</argsstring>
        <name>linearSearch</name>
        <qualifiedname>util::linearSearch</qualifiedname>
        <param>
          <type>const int *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math_utils.cpp" line="153" column="15" bodyfile="src/math_utils.cpp" bodystart="153" bodyend="166" declfile="inc/math_utils.h" declline="435" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_ac106a29bc8c2019999bac178dc1d4f9e_1ac106a29bc8c2019999bac178dc1d4f9e" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int util::binarySearch</definition>
        <argsstring>(const int *A, int low, int high, const int x)</argsstring>
        <name>binarySearch</name>
        <qualifiedname>util::binarySearch</qualifiedname>
        <param>
          <type>const int *</type>
          <declname>A</declname>
        </param>
        <param>
          <type>int</type>
          <declname>low</declname>
        </param>
        <param>
          <type>int</type>
          <declname>high</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math_utils.cpp" line="168" column="15" bodyfile="src/math_utils.cpp" bodystart="168" bodyend="192" declfile="inc/math_utils.h" declline="436" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a051e42270e861e705165662e98ef3a5f_1a051e42270e861e705165662e98ef3a5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int util::toDecimal</definition>
        <argsstring>(const int hex)</argsstring>
        <name>toDecimal</name>
        <qualifiedname>util::toDecimal</qualifiedname>
        <param>
          <type>const int</type>
          <declname>hex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math_utils.cpp" line="194" column="5" bodyfile="src/math_utils.cpp" bodystart="194" bodyend="202" declfile="inc/math_utils.h" declline="438" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a383c13af9a1086f2f2e7925379644974_1a383c13af9a1086f2f2e7925379644974" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int util::toHex</definition>
        <argsstring>(const int dec)</argsstring>
        <name>toHex</name>
        <qualifiedname>util::toHex</qualifiedname>
        <param>
          <type>const int</type>
          <declname>dec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math_utils.cpp" line="204" column="5" bodyfile="src/math_utils.cpp" bodystart="204" bodyend="212" declfile="inc/math_utils.h" declline="439" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a70abed632e50f5ad83dc9a60ac0ffa3d_1a70abed632e50f5ad83dc9a60ac0ffa3d" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void util::printDec2Bin</definition>
        <argsstring>(const size_t size, void const *const ptr) noexcept</argsstring>
        <name>printDec2Bin</name>
        <qualifiedname>util::printDec2Bin</qualifiedname>
        <param>
          <type>const size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>void const *const</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>prints given datatype to binary </para>
        </briefdescription>
        <detaileddescription>
<para>bitwise ops </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math_utils.cpp" line="216" column="6" bodyfile="src/math_utils.cpp" bodystart="216" bodyend="232" declfile="inc/math_utils.h" declline="443" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a46c4bb08aa780e556c6f79c7fa366366_1a46c4bb08aa780e556c6f79c7fa366366" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void util::printDecToBin</definition>
        <argsstring>(const int num) noexcept</argsstring>
        <name>printDecToBin</name>
        <qualifiedname>util::printDecToBin</qualifiedname>
        <param>
          <type>const int</type>
          <declname>num</declname>
        </param>
        <briefdescription>
<para>print binary conversion of supplied decimal number </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math_utils.cpp" line="235" column="6" bodyfile="src/math_utils.cpp" bodystart="235" bodyend="249" declfile="inc/math_utils.h" declline="445" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_ac6adf3c3c73d7fc30a415812897d8730_1ac6adf3c3c73d7fc30a415812897d8730" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool util::haveOppositeSigns</definition>
        <argsstring>(int x, int y) noexcept</argsstring>
        <name>haveOppositeSigns</name>
        <qualifiedname>util::haveOppositeSigns</qualifiedname>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math_utils.cpp" line="251" column="16" bodyfile="src/math_utils.cpp" bodystart="251" bodyend="255" declfile="inc/math_utils.h" declline="446" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a9c07badeeb1f276700aa07d6f9c67e98_1a9c07badeeb1f276700aa07d6f9c67e98" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>int</type>
        <definition>int util::msbIndexOfDec</definition>
        <argsstring>(int num) noexcept</argsstring>
        <name>msbIndexOfDec</name>
        <qualifiedname>util::msbIndexOfDec</qualifiedname>
        <param>
          <type>int</type>
          <declname>num</declname>
        </param>
        <briefdescription>
<para>finds MSB index in decimal number (counting from 0) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math_utils.cpp" line="258" column="15" bodyfile="src/math_utils.cpp" bodystart="258" bodyend="268" declfile="inc/math_utils.h" declline="448" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a7be47189cc4f7a85c57b999a1c27ec3a_1a7be47189cc4f7a85c57b999a1c27ec3a" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>int</type>
        <definition>int util::countSetBits</definition>
        <argsstring>(int num) noexcept</argsstring>
        <name>countSetBits</name>
        <qualifiedname>util::countSetBits</qualifiedname>
        <param>
          <type>int</type>
          <declname>num</declname>
        </param>
        <briefdescription>
<para>count number of Ones in a given number </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math_utils.cpp" line="271" column="15" bodyfile="src/math_utils.cpp" bodystart="271" bodyend="280" declfile="inc/math_utils.h" declline="450" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_ab1362dfa9d3fdb70aa9622ce7b25bc68_1ab1362dfa9d3fdb70aa9622ce7b25bc68" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>int</type>
        <definition>int util::isPowerOf2</definition>
        <argsstring>(const int num) noexcept</argsstring>
        <name>isPowerOf2</name>
        <qualifiedname>util::isPowerOf2</qualifiedname>
        <param>
          <type>const int</type>
          <declname>num</declname>
        </param>
        <briefdescription>
<para>checks whether a number is a power of 2 </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math_utils.cpp" line="282" column="15" bodyfile="src/math_utils.cpp" bodystart="282" bodyend="293" declfile="inc/math_utils.h" declline="452" declcolumn="15"/>
        <referencedby refid="namespaceutil_a71f689b172e5d8012806cf3f9b652fa3_1a71f689b172e5d8012806cf3f9b652fa3" compoundref="math__utils_8cpp" startline="354" endline="369">isSetByNumber</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a4a013cbf3a9e8a69632005c8eb05f30c_1a4a013cbf3a9e8a69632005c8eb05f30c" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>void</type>
        <definition>void util::convertToBase</definition>
        <argsstring>(int number, const int base) noexcept</argsstring>
        <name>convertToBase</name>
        <qualifiedname>util::convertToBase</qualifiedname>
        <param>
          <type>int</type>
          <declname>number</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>base</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math_utils.cpp" line="295" column="16" bodyfile="src/math_utils.cpp" bodystart="295" bodyend="306" declfile="inc/math_utils.h" declline="453" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a3ff14b6402beee2193fd266c9dd38b4c_1a3ff14b6402beee2193fd266c9dd38b4c" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool util::isNthBitSet</definition>
        <argsstring>(const int value, const int posOfTestBit)</argsstring>
        <name>isNthBitSet</name>
        <qualifiedname>util::isNthBitSet</qualifiedname>
        <param>
          <type>const int</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>posOfTestBit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math_utils.cpp" line="308" column="16" bodyfile="src/math_utils.cpp" bodystart="308" bodyend="312" declfile="inc/math_utils.h" declline="454" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a3b5279060c8cf1e37d66efb1c5713827_1a3b5279060c8cf1e37d66efb1c5713827" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>int</type>
        <definition>int util::swapBits</definition>
        <argsstring>(int num, const int i, const int j) noexcept</argsstring>
        <name>swapBits</name>
        <qualifiedname>util::swapBits</qualifiedname>
        <param>
          <type>int</type>
          <declname>num</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>swap the bits at position i and j of given number iff they are different </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math_utils.cpp" line="314" column="15" bodyfile="src/math_utils.cpp" bodystart="314" bodyend="325" declfile="inc/math_utils.h" declline="456" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_abe9d79bee6ce10a21eb1df3284e34739_1abe9d79bee6ce10a21eb1df3284e34739" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>int</type>
        <definition>int util::setNthBit</definition>
        <argsstring>(int num, const unsigned n) noexcept</argsstring>
        <name>setNthBit</name>
        <qualifiedname>util::setNthBit</qualifiedname>
        <param>
          <type>int</type>
          <declname>num</declname>
        </param>
        <param>
          <type>const unsigned</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math_utils.cpp" line="327" column="15" bodyfile="src/math_utils.cpp" bodystart="327" bodyend="332" declfile="inc/math_utils.h" declline="457" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a8a10339f6981abedeca3d91e0417e3ee_1a8a10339f6981abedeca3d91e0417e3ee" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>int</type>
        <definition>int util::clearNthBit</definition>
        <argsstring>(int num, const unsigned n) noexcept</argsstring>
        <name>clearNthBit</name>
        <qualifiedname>util::clearNthBit</qualifiedname>
        <param>
          <type>int</type>
          <declname>num</declname>
        </param>
        <param>
          <type>const unsigned</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math_utils.cpp" line="334" column="15" bodyfile="src/math_utils.cpp" bodystart="334" bodyend="339" declfile="inc/math_utils.h" declline="458" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a3ab679991f6532514ef070142d9b5e01_1a3ab679991f6532514ef070142d9b5e01" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>int</type>
        <definition>int util::toggleNthBit</definition>
        <argsstring>(int num, const unsigned n) noexcept</argsstring>
        <name>toggleNthBit</name>
        <qualifiedname>util::toggleNthBit</qualifiedname>
        <param>
          <type>int</type>
          <declname>num</declname>
        </param>
        <param>
          <type>const unsigned</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math_utils.cpp" line="341" column="15" bodyfile="src/math_utils.cpp" bodystart="341" bodyend="346" declfile="inc/math_utils.h" declline="459" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_acd548992752c40870a8ccbb50a155a8f_1acd548992752c40870a8ccbb50a155a8f" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>int</type>
        <definition>int util::isSet</definition>
        <argsstring>(int num, const unsigned bitPos) noexcept</argsstring>
        <name>isSet</name>
        <qualifiedname>util::isSet</qualifiedname>
        <param>
          <type>int</type>
          <declname>num</declname>
        </param>
        <param>
          <type>const unsigned</type>
          <declname>bitPos</declname>
        </param>
        <briefdescription>
<para>check num&apos;s bitPos state and return the value (0 or 1) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math_utils.cpp" line="348" column="15" bodyfile="src/math_utils.cpp" bodystart="348" bodyend="352" declfile="inc/math_utils.h" declline="461" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a71f689b172e5d8012806cf3f9b652fa3_1a71f689b172e5d8012806cf3f9b652fa3" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool util::isSetByNumber</definition>
        <argsstring>(int num, int bitFlag) noexcept</argsstring>
        <name>isSetByNumber</name>
        <qualifiedname>util::isSetByNumber</qualifiedname>
        <param>
          <type>int</type>
          <declname>num</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bitFlag</declname>
        </param>
        <briefdescription>
<para>check if num has bit indicated by bitFlag set. bitFlag must be a power of 2. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math_utils.cpp" line="354" column="6" bodyfile="src/math_utils.cpp" bodystart="354" bodyend="369" declfile="inc/math_utils.h" declline="463" declcolumn="6"/>
        <referencedby refid="classGraphics_a9a6ad2b28b7f765c6c7ed63b664754d8_1a9a6ad2b28b7f765c6c7ed63b664754d8" compoundref="graphics_8cpp" startline="719" endline="746">Graphics::bindBackBufferAsInput</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a36c6964cf7808d1afb0909c42fe05d5c_1a36c6964cf7808d1afb0909c42fe05d5c" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>int</type>
        <definition>int util::changeNthBit</definition>
        <argsstring>(int num, const unsigned n, const bool bitVal) noexcept</argsstring>
        <name>changeNthBit</name>
        <qualifiedname>util::changeNthBit</qualifiedname>
        <param>
          <type>int</type>
          <declname>num</declname>
        </param>
        <param>
          <type>const unsigned</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>bitVal</declname>
        </param>
        <briefdescription>
<para>change nth bit to bitVal </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math_utils.cpp" line="372" column="15" bodyfile="src/math_utils.cpp" bodystart="372" bodyend="378" declfile="inc/math_utils.h" declline="465" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a3cb6f8f22822b4670fa970bce585e52a_1a3cb6f8f22822b4670fa970bce585e52a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string util::printHresultErrorDescription</definition>
        <argsstring>(const HRESULT hres)</argsstring>
        <name>printHresultErrorDescription</name>
        <qualifiedname>util::printHresultErrorDescription</qualifiedname>
        <param>
          <type>const HRESULT</type>
          <declname>hres</declname>
        </param>
        <briefdescription>
<para>print HRESULT errors in understandable English </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/os_utils.cpp" line="12" column="13" bodyfile="src/os_utils.cpp" bodystart="12" bodyend="16" declfile="inc/os_utils.h" declline="22" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a742e4cf7eec6ab440f6a51fa98cdb42b_1a742e4cf7eec6ab440f6a51fa98cdb42b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::wstring</type>
        <definition>std::wstring util::printHresultErrorDescriptionW</definition>
        <argsstring>(const HRESULT hres)</argsstring>
        <name>printHresultErrorDescriptionW</name>
        <qualifiedname>util::printHresultErrorDescriptionW</qualifiedname>
        <param>
          <type>const HRESULT</type>
          <declname>hres</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/os_utils.cpp" line="18" column="14" bodyfile="src/os_utils.cpp" bodystart="18" bodyend="22" declfile="inc/os_utils.h" declline="23" declcolumn="14"/>
        <referencedby refid="classKeyConsole_aa6bd64862829ab2d730a3550cbe6f4d2_1aa6bd64862829ab2d730a3550cbe6f4d2" compoundref="console_8cpp" startline="52" endline="97">KeyConsole::KeyConsole</referencedby>
        <referencedby refid="classKeyConsole_af7772005e337dd86efe5b99b13965534_1af7772005e337dd86efe5b99b13965534" compoundref="console_8cpp" startline="284" endline="301">KeyConsole::setColor</referencedby>
        <referencedby refid="classKeyConsole_ad425f5f4cad73ac80f7a6d004b3ede87_1ad425f5f4cad73ac80f7a6d004b3ede87" compoundref="console_8cpp" startline="341" endline="352">KeyConsole::setDefaultColor</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a566f2bbc4b5cafc9971186f0d707bf3e_1a566f2bbc4b5cafc9971186f0d707bf3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string util::getLastErrorAsString</definition>
        <argsstring>()</argsstring>
        <name>getLastErrorAsString</name>
        <qualifiedname>util::getLastErrorAsString</qualifiedname>
        <briefdescription>
<para>Returns the last Win32 error, in string format. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/os_utils.cpp" line="24" column="13" bodyfile="src/os_utils.cpp" bodystart="24" bodyend="41" declfile="inc/os_utils.h" declline="26" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a9a0b0bfad82a59556195c73d4d2cda5e_1a9a0b0bfad82a59556195c73d4d2cda5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string util::getLastNtErrorAsString</definition>
        <argsstring>(const DWORD ntStatusCode)</argsstring>
        <name>getLastNtErrorAsString</name>
        <qualifiedname>util::getLastNtErrorAsString</qualifiedname>
        <param>
          <type>const DWORD</type>
          <declname>ntStatusCode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/os_utils.cpp" line="43" column="13" bodyfile="src/os_utils.cpp" bodystart="43" bodyend="59" declfile="inc/os_utils.h" declline="27" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a35e258ec68cdc2634e69fad1574f982b_1a35e258ec68cdc2634e69fad1574f982b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::wstring</type>
        <definition>std::wstring util::bstrToStr</definition>
        <argsstring>(const BSTR &amp;bstr)</argsstring>
        <name>bstrToStr</name>
        <qualifiedname>util::bstrToStr</qualifiedname>
        <param>
          <type>const BSTR &amp;</type>
          <declname>bstr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/os_utils.cpp" line="61" column="14" bodyfile="src/os_utils.cpp" bodystart="61" bodyend="66" declfile="inc/os_utils.h" declline="29" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a525e6245d3b2156e2d85aaedb8f7bb2e_1a525e6245d3b2156e2d85aaedb8f7bb2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BSTR</type>
        <definition>BSTR util::strToBstr</definition>
        <argsstring>(const std::wstring &amp;str)</argsstring>
        <name>strToBstr</name>
        <qualifiedname>util::strToBstr</qualifiedname>
        <param>
          <type>const std::wstring &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/os_utils.cpp" line="69" column="6" bodyfile="src/os_utils.cpp" bodystart="69" bodyend="74" declfile="inc/os_utils.h" declline="30" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a3e3c5eab6a6d57d880fd94d44f599cb4_1a3e3c5eab6a6d57d880fd94d44f599cb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__int64</type>
        <definition>__int64 util::filetimeToInt64</definition>
        <argsstring>(const FILETIME &amp;fileTime)</argsstring>
        <name>filetimeToInt64</name>
        <qualifiedname>util::filetimeToInt64</qualifiedname>
        <param>
          <type>const FILETIME &amp;</type>
          <declname>fileTime</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/os_utils.cpp" line="77" column="9" bodyfile="src/os_utils.cpp" bodystart="77" bodyend="83" declfile="inc/os_utils.h" declline="32" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a12eed248853b800635a584152eda83a5_1a12eed248853b800635a584152eda83a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DWORD_PTR</type>
        <definition>DWORD_PTR util::pinThreadToCore</definition>
        <argsstring>(const HANDLE hThread, const DWORD core)</argsstring>
        <name>pinThreadToCore</name>
        <qualifiedname>util::pinThreadToCore</qualifiedname>
        <param>
          <type>const HANDLE</type>
          <declname>hThread</declname>
        </param>
        <param>
          <type>const DWORD</type>
          <declname>core</declname>
        </param>
        <briefdescription>
<para>returns the thread&apos;s previous affinity mask </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/os_utils.cpp" line="85" column="11" bodyfile="src/os_utils.cpp" bodystart="85" bodyend="93" declfile="inc/os_utils.h" declline="34" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a26eb5943c9263e29706bf7ea9817bd26_1a26eb5943c9263e29706bf7ea9817bd26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void util::setCurrentThreadName</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>setCurrentThreadName</name>
        <qualifiedname>util::setCurrentThreadName</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/os_utils.cpp" line="95" column="6" bodyfile="src/os_utils.cpp" bodystart="95" bodyend="102" declfile="inc/os_utils.h" declline="35" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a08c4e4a29b0a0e5157b152b140bc094e_1a08c4e4a29b0a0e5157b152b140bc094e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string util::getKnownFolderPath</definition>
        <argsstring>(const int id=CSIDL_PERSONAL)</argsstring>
        <name>getKnownFolderPath</name>
        <qualifiedname>util::getKnownFolderPath</qualifiedname>
        <param>
          <type>const int</type>
          <declname>id</declname>
          <defval>CSIDL_PERSONAL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/os_utils.cpp" line="104" column="13" bodyfile="src/os_utils.cpp" bodystart="104" bodyend="116" declfile="inc/os_utils.h" declline="37" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a79a4c5df290b7c3f50617ad7ffa131b2_1a79a4c5df290b7c3f50617ad7ffa131b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void util::setupDetachedThreadsVector</definition>
        <argsstring>(const unsigned nThreads)</argsstring>
        <name>setupDetachedThreadsVector</name>
        <qualifiedname>util::setupDetachedThreadsVector</qualifiedname>
        <param>
          <type>const unsigned</type>
          <declname>nThreads</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/os_utils.cpp" line="123" column="6" bodyfile="src/os_utils.cpp" bodystart="123" bodyend="128" declfile="inc/os_utils.h" declline="40" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a3a780a09a3dffe65ca6df0ff68298fa9_1a3a780a09a3dffe65ca6df0ff68298fa9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void util::terminateDetachedThreads</definition>
        <argsstring>()</argsstring>
        <name>terminateDetachedThreads</name>
        <qualifiedname>util::terminateDetachedThreads</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>WARNING: There&apos;s no way to cleanly terminate a detached thread. Join them instead in main, or use a thread pool.</para>
<para>WARNING: There&apos;s no way to cleanly terminate a detached thread. Join them instead in main, or use a thread pool.</para>
        </inbodydescription>
        <location file="src/os_utils.cpp" line="131" column="6" bodyfile="src/os_utils.cpp" bodystart="131" bodyend="160" declfile="inc/os_utils.h" declline="41" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a2e444da6f9f3edb24cbdfdd3acd8eef5_1a2e444da6f9f3edb24cbdfdd3acd8eef5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; DWORD &gt;</type>
        <definition>std::optional&lt; DWORD &gt; util::registryGetDword</definition>
        <argsstring>(const HKEY hKey, const std::wstring &amp;regName)</argsstring>
        <name>registryGetDword</name>
        <qualifiedname>util::registryGetDword</qualifiedname>
        <param>
          <type>const HKEY</type>
          <declname>hKey</declname>
        </param>
        <param>
          <type>const std::wstring &amp;</type>
          <declname>regName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/os_utils.cpp" line="165" column="15" bodyfile="src/os_utils.cpp" bodystart="165" bodyend="176" declfile="inc/os_utils.h" declline="44" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a461bbc2dfa40d2dae1639cce3f6db772_1a461bbc2dfa40d2dae1639cce3f6db772" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::optional&lt; std::wstring &gt;</type>
        <definition>std::optional&lt; std::wstring &gt; util::registryGetString</definition>
        <argsstring>(const HKEY hKey, const std::wstring &amp;regName)</argsstring>
        <name>registryGetString</name>
        <qualifiedname>util::registryGetString</qualifiedname>
        <param>
          <type>const HKEY</type>
          <declname>hKey</declname>
        </param>
        <param>
          <type>const std::wstring &amp;</type>
          <declname>regName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/os_utils.cpp" line="178" column="15" bodyfile="src/os_utils.cpp" bodystart="178" bodyend="190" declfile="inc/os_utils.h" declline="45" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a833373d99efbf126ccbb44456500085f_1a833373d99efbf126ccbb44456500085f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void util::suspendAllThreads</definition>
        <argsstring>()</argsstring>
        <name>suspendAllThreads</name>
        <qualifiedname>util::suspendAllThreads</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/os_utils.h" line="47" column="13" declfile="inc/os_utils.h" declline="47" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a49087246809a040488fc33d84239de83_1a49087246809a040488fc33d84239de83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void util::launchProcess</definition>
        <argsstring>(const std::string &amp;path)</argsstring>
        <name>launchProcess</name>
        <qualifiedname>util::launchProcess</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/os_utils.cpp" line="221" column="6" bodyfile="src/os_utils.cpp" bodystart="221" bodyend="250" declfile="inc/os_utils.h" declline="49" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_ad7c794e52973c3fe00e125e69d29a011_1ad7c794e52973c3fe00e125e69d29a011" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TCallback</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>TArgs</declname>
            <defname>TArgs</defname>
          </param>
        </templateparamlist>
        <type>decltype(auto)</type>
        <definition>decltype(auto) util::askForCredentials</definition>
        <argsstring>(TCallback &amp;&amp;f, TArgs &amp;&amp;... args)</argsstring>
        <name>askForCredentials</name>
        <qualifiedname>util::askForCredentials</qualifiedname>
        <param>
          <type>TCallback &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>TArgs &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/os_utils.h" line="52" column="10" bodyfile="inc/os_utils.h" bodystart="52" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a49d694f983612063981f0a3f27c9ab9b_1a49d694f983612063981f0a3f27c9ab9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t util::combineUnsignedInt32to64</definition>
        <argsstring>(const unsigned int high32Bit, const unsigned int low32Bit)</argsstring>
        <name>combineUnsignedInt32to64</name>
        <qualifiedname>util::combineUnsignedInt32to64</qualifiedname>
        <param>
          <type>const unsigned int</type>
          <declname>high32Bit</declname>
        </param>
        <param>
          <type>const unsigned int</type>
          <declname>low32Bit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utils.cpp" line="15" column="10" bodyfile="src/utils.cpp" bodystart="15" bodyend="19" declfile="inc/utils.h" declline="25" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a16725a1ddd3cd0f473a0c915e9e7aa31_1a16725a1ddd3cd0f473a0c915e9e7aa31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void util::safeDelete</definition>
        <argsstring>(T *&amp;p)</argsstring>
        <name>safeDelete</name>
        <qualifiedname>util::safeDelete</qualifiedname>
        <param>
          <type>T *&amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils.h" line="28" column="6" bodyfile="inc/utils.h" bodystart="28" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_aa985df3270c6bf1cbd444decbc648d23_1aa985df3270c6bf1cbd444decbc648d23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if_t&lt;<ref refid="key__type__traits_8h_a556f47159c3a3ebdcc381eb8d68a18fb_1a556f47159c3a3ebdcc381eb8d68a18fb" kindref="member">is_pointer_wrapper_v</ref>&lt;T&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void util::safeDelete</definition>
        <argsstring>(T &amp;pSm)</argsstring>
        <name>safeDelete</name>
        <qualifiedname>util::safeDelete</qualifiedname>
        <param>
          <type>T &amp;</type>
          <declname>pSm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils.h" line="38" column="6" bodyfile="inc/utils.h" bodystart="38" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a109becba16ea1005edf128d5486b8608_1a109becba16ea1005edf128d5486b8608" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T util::sum</definition>
        <argsstring>(std::initializer_list&lt; T &gt; lst)</argsstring>
        <name>sum</name>
        <qualifiedname>util::sum</qualifiedname>
        <param>
          <type>std::initializer_list&lt; T &gt;</type>
          <declname>lst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils.h" line="47" column="3" bodyfile="inc/utils.h" bodystart="47" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a8b28c4afe12b8516b7e88d2c0162ab58_1a8b28c4afe12b8516b7e88d2c0162ab58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool util::isFutureReady</definition>
        <argsstring>(const std::future&lt; T &gt; &amp;fu)</argsstring>
        <name>isFutureReady</name>
        <qualifiedname>util::isFutureReady</qualifiedname>
        <param>
          <type>const std::future&lt; T &gt; &amp;</type>
          <declname>fu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils.h" line="58" column="6" bodyfile="inc/utils.h" bodystart="58" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_ad5fc31a90c5660d5e200f2ced161da84_1ad5fc31a90c5660d5e200f2ced161da84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; util::tokenizeQuotedString</definition>
        <argsstring>(const std::string &amp;input)</argsstring>
        <name>tokenizeQuotedString</name>
        <qualifiedname>util::tokenizeQuotedString</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
<para>converts a string input into a vector of strings </para>
        </briefdescription>
        <detaileddescription>
<para>separation into vector element &quot;tokens&quot; is based on spaces or quotes &apos; </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utils.cpp" line="21" column="13" bodyfile="src/utils.cpp" bodystart="21" bodyend="33" declfile="inc/utils.h" declline="65" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a6f14f660ccbdb1435f227700fa1dfd94_1a6f14f660ccbdb1435f227700fa1dfd94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::wstring</type>
        <definition>std::wstring util::s2ws</definition>
        <argsstring>(const std::string &amp;narrow)</argsstring>
        <name>s2ws</name>
        <qualifiedname>util::s2ws</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>narrow</declname>
        </param>
        <briefdescription>
<para>convert from strings/chars to wide strings/wchar_ts, or std::wstring( s.begin(), s.end() ); </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utils.cpp" line="35" column="14" bodyfile="src/utils.cpp" bodystart="35" bodyend="53" declfile="inc/utils.h" declline="67" declcolumn="14"/>
        <referencedby refid="classKeyConsole_aa6bd64862829ab2d730a3550cbe6f4d2_1aa6bd64862829ab2d730a3550cbe6f4d2" compoundref="console_8cpp" startline="52" endline="97">KeyConsole::KeyConsole</referencedby>
        <referencedby refid="classPixelShader_ac750a7663474f02dcd624648faec9c49_1ac750a7663474f02dcd624648faec9c49" compoundref="pixel__shader_8cpp" startline="9" endline="20">PixelShader::PixelShader</referencedby>
        <referencedby refid="classSound_a14ac6aede2a2992054c848975f8062b5_1a14ac6aede2a2992054c848975f8062b5" compoundref="key__sound_8cpp" startline="390" endline="465">Sound::Sound</referencedby>
        <referencedby refid="classVertexShader_a81c5a569be4260566322efdbcc28f58e_1a81c5a569be4260566322efdbcc28f58e" compoundref="vertex__shader_8cpp" startline="9" endline="20">VertexShader::VertexShader</referencedby>
        <referencedby refid="classWindow_a69f83cc5dc2d4f9807e4d11d2b2623e1_1a69f83cc5dc2d4f9807e4d11d2b2623e1" compoundref="window_8cpp" startline="118" endline="270">Window::Window</referencedby>
        <referencedby refid="classWindow_1_1WindowClass_aa826fd2bfebc907f2ae0d3226b919480_1aa826fd2bfebc907f2ae0d3226b919480" compoundref="window_8cpp" startline="32" endline="91">Window::WindowClass::WindowClass</referencedby>
        <referencedby refid="classWindow_1_1WindowClass_a4c052246d032ab5956e6fa027f1cd9e5_1a4c052246d032ab5956e6fa027f1cd9e5" compoundref="window_8cpp" startline="93" endline="96">Window::WindowClass::~WindowClass</referencedby>
        <referencedby refid="classWindow_a466dc023c98b22fdc026c2d70bca1fb9_1a466dc023c98b22fdc026c2d70bca1fb9" compoundref="window_8cpp" startline="418" endline="425">Window::displayMessageBoxOkCancel</referencedby>
        <referencedby refid="classWindow_ab8b32cdcbc931c83c777887df83c5a13_1ab8b32cdcbc931c83c777887df83c5a13" compoundref="window_8cpp" startline="409" endline="416">Window::displayMessageBoxYesNo</referencedby>
        <referencedby refid="main_8cpp_a8da9a292561783f58a4971af8e3e6c2d_1a8da9a292561783f58a4971af8e3e6c2d" compoundref="main_8cpp" startline="166" endline="200">finally</referencedby>
        <referencedby refid="classKeyConsole_a7276b2615dd1194e8890036b67399740_1a7276b2615dd1194e8890036b67399740" compoundref="console_8cpp" startline="185" endline="199">KeyConsole::getWindowHandle</referencedby>
        <referencedby refid="namespaceutil_a49087246809a040488fc33d84239de83_1a49087246809a040488fc33d84239de83" compoundref="os__utils_8cpp" startline="221" endline="250">launchProcess</referencedby>
        <referencedby refid="classBitmap_a6e287dc135d2267f1ec28766b54f58ac_1a6e287dc135d2267f1ec28766b54f58ac" compoundref="bitmap_8cpp" startline="92" endline="116">Bitmap::loadFromFile</referencedby>
        <referencedby refid="classSettingsManager_a5e4c7dd1554609fe8ac4fac171e3c4a5_1a5e4c7dd1554609fe8ac4fac171e3c4a5" compoundref="settings__manager_8cpp" startline="20" endline="70">SettingsManager::loadFromFile</referencedby>
        <referencedby refid="classgui_1_1UIPass_a020ffc12ad8cc707ffa8e427361831ae_1a020ffc12ad8cc707ffa8e427361831ae" compoundref="ui__pass_8cpp" startline="29" endline="85">gui::UIPass::recreate</referencedby>
        <referencedby refid="classBitmap_ada5bff46e6270af0cbed7f8252af7956_1ada5bff46e6270af0cbed7f8252af7956" compoundref="bitmap_8cpp" startline="139" endline="165">Bitmap::save</referencedby>
        <referencedby refid="classKeyConsole_a6b7b65eadae9f29b29e89d13b888d326_1a6b7b65eadae9f29b29e89d13b888d326" compoundref="console_8cpp" startline="261" endline="277">KeyConsole::setFont</referencedby>
        <referencedby refid="classWindow_ace4b47e72c96be743531236e6c632fa6_1ace4b47e72c96be743531236e6c632fa6" compoundref="window_8cpp" startline="1687" endline="1695">Window::setFont</referencedby>
        <referencedby refid="classKeyConsole_a358d2be06a04f716b9832999243c83a9_1a358d2be06a04f716b9832999243c83a9" compoundref="console_8cpp" startline="168" endline="171">KeyConsole::setTitle</referencedby>
        <referencedby refid="classWindow_a6d03fd6c9fbfcaf4aba92e6b4d08123e_1a6d03fd6c9fbfcaf4aba92e6b4d08123e" compoundref="window_8cpp" startline="366" endline="370">Window::setTitle</referencedby>
        <referencedby refid="main_8cpp_afe0d6866f7c067e4b3768107caa40799_1afe0d6866f7c067e4b3768107caa40799" compoundref="main_8cpp" startline="54" endline="131">wWinMain</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a81e6fd9c125b3f26fb70d1847f6ff517_1a81e6fd9c125b3f26fb70d1847f6ff517" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string util::ws2s</definition>
        <argsstring>(const std::wstring &amp;wide)</argsstring>
        <name>ws2s</name>
        <qualifiedname>util::ws2s</qualifiedname>
        <param>
          <type>const std::wstring &amp;</type>
          <declname>wide</declname>
        </param>
        <briefdescription>
<para>convert wide strings/wchar_ts to strings/chars </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utils.cpp" line="55" column="13" bodyfile="src/utils.cpp" bodystart="55" bodyend="73" declfile="inc/utils.h" declline="69" declcolumn="13"/>
        <referencedby refid="classWindow_a69f83cc5dc2d4f9807e4d11d2b2623e1_1a69f83cc5dc2d4f9807e4d11d2b2623e1" compoundref="window_8cpp" startline="118" endline="270">Window::Window</referencedby>
        <referencedby refid="main_8cpp_a8da9a292561783f58a4971af8e3e6c2d_1a8da9a292561783f58a4971af8e3e6c2d" compoundref="main_8cpp" startline="166" endline="200">finally</referencedby>
        <referencedby refid="namespaceutil_a08c4e4a29b0a0e5157b152b140bc094e_1a08c4e4a29b0a0e5157b152b140bc094e" compoundref="os__utils_8cpp" startline="104" endline="116">getKnownFolderPath</referencedby>
        <referencedby refid="classKeyConsole_aa28378b6ec6d05deba73ecc4118ba9e1_1aa28378b6ec6d05deba73ecc4118ba9e1" compoundref="console_8cpp" startline="243" endline="249">KeyConsole::getTitle</referencedby>
        <referencedby refid="classGraphics_1_1Adapter_ad40a2841488cf71cbee71eb9eeb12c72_1ad40a2841488cf71cbee71eb9eeb12c72" compoundref="graphics_8cpp" startline="69" endline="88">Graphics::Adapter::getVRamDetails</referencedby>
        <referencedby refid="namespaceutil_a3cb6f8f22822b4670fa970bce585e52a_1a3cb6f8f22822b4670fa970bce585e52a" compoundref="os__utils_8cpp" startline="12" endline="16">printHresultErrorDescription</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a25793b6d04ffa8c86a51f8f82338fba3_1a25793b6d04ffa8c86a51f8f82338fba3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void util::removeSubstring</definition>
        <argsstring>(std::string &amp;str, const std::string &amp;substring)</argsstring>
        <name>removeSubstring</name>
        <qualifiedname>util::removeSubstring</qualifiedname>
        <param>
          <type>std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>substring</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utils.cpp" line="75" column="6" bodyfile="src/utils.cpp" bodystart="75" bodyend="83" declfile="inc/utils.h" declline="71" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_ad0a21d01322ceda52938b313f3cc6aaa_1ad0a21d01322ceda52938b313f3cc6aaa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string util::trimStringFromStart</definition>
        <argsstring>(const std::string &amp;str, const int nChars)</argsstring>
        <name>trimStringFromStart</name>
        <qualifiedname>util::trimStringFromStart</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>nChars</declname>
        </param>
        <briefdescription>
<para>trim nChars from the start of the string </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utils.cpp" line="85" column="13" bodyfile="src/utils.cpp" bodystart="85" bodyend="90" declfile="inc/utils.h" declline="73" declcolumn="13"/>
        <referencedby refid="classMesh_a2e68eeb89cb2cb8b1caa45911f569ed4_1a2e68eeb89cb2cb8b1caa45911f569ed4" compoundref="mesh_8cpp" startline="189" endline="196">Mesh::getName</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a15cfe5cd27162872c90d985d87d7333d_1a15cfe5cd27162872c90d985d87d7333d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string util::trimStringFromEnd</definition>
        <argsstring>(const std::string &amp;str, const int nChars)</argsstring>
        <name>trimStringFromEnd</name>
        <qualifiedname>util::trimStringFromEnd</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>nChars</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utils.cpp" line="92" column="13" bodyfile="src/utils.cpp" bodystart="92" bodyend="97" declfile="inc/utils.h" declline="74" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a64cd915f6693db8debb42c8bb38448ad_1a64cd915f6693db8debb42c8bb38448ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void util::trimStringFromStartInPlace</definition>
        <argsstring>(std ::string &amp;str, const int nChars)</argsstring>
        <name>trimStringFromStartInPlace</name>
        <qualifiedname>util::trimStringFromStartInPlace</qualifiedname>
        <param>
          <type>std ::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>nChars</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utils.cpp" line="99" column="6" bodyfile="src/utils.cpp" bodystart="99" bodyend="106" declfile="inc/utils.h" declline="75" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a3118ce20ff29552b5ac2926733ff4217_1a3118ce20ff29552b5ac2926733ff4217" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void util::trimStringFromEndInPlace</definition>
        <argsstring>(std::string &amp;str, const int nChars)</argsstring>
        <name>trimStringFromEndInPlace</name>
        <qualifiedname>util::trimStringFromEndInPlace</qualifiedname>
        <param>
          <type>std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>nChars</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utils.cpp" line="108" column="6" bodyfile="src/utils.cpp" bodystart="108" bodyend="112" declfile="inc/utils.h" declline="76" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a348a3ef87044b01682ceed43343b68f9_1a348a3ef87044b01682ceed43343b68f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; util::splitDelimitedString</definition>
        <argsstring>(const std::string &amp;str, const char delimiter)</argsstring>
        <name>splitDelimitedString</name>
        <qualifiedname>util::splitDelimitedString</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const char</type>
          <declname>delimiter</declname>
        </param>
        <briefdescription>
<para>example: splitDelimitedString( sea_horde_faction_keys, &quot;;&quot; ); </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utils.cpp" line="114" column="13" bodyfile="src/utils.cpp" bodystart="114" bodyend="136" declfile="inc/utils.h" declline="78" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a73e42b8129fee18fa3a3b5695fe73ea4_1a73e42b8129fee18fa3a3b5695fe73ea4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string util::assembleDelimitedString</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;delimitedString, const char delimiter)</argsstring>
        <name>assembleDelimitedString</name>
        <qualifiedname>util::assembleDelimitedString</qualifiedname>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>delimitedString</declname>
        </param>
        <param>
          <type>const char</type>
          <declname>delimiter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utils.cpp" line="138" column="13" bodyfile="src/utils.cpp" bodystart="138" bodyend="148" declfile="inc/utils.h" declline="79" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_aa845e36a4114a586437cc5900b2c0025_1aa845e36a4114a586437cc5900b2c0025" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void util::removeFromDelimitedString</definition>
        <argsstring>(std::vector&lt; std::string &gt; &amp;delimitedString, const char delimiter, const std::string &amp;str)</argsstring>
        <name>removeFromDelimitedString</name>
        <qualifiedname>util::removeFromDelimitedString</qualifiedname>
        <param>
          <type>std::vector&lt; std::string &gt; &amp;</type>
          <declname>delimitedString</declname>
        </param>
        <param>
          <type>const char</type>
          <declname>delimiter</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>removes all occurrences of str from delimited_string </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utils.cpp" line="150" column="6" bodyfile="src/utils.cpp" bodystart="150" bodyend="156" declfile="inc/utils.h" declline="81" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a0ab06e57f9acb28ffd209902e9226731_1a0ab06e57f9acb28ffd209902e9226731" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool util::stringContains</definition>
        <argsstring>(std::string_view haystack, std::string_view needle)</argsstring>
        <name>stringContains</name>
        <qualifiedname>util::stringContains</qualifiedname>
        <param>
          <type>std::string_view</type>
          <declname>haystack</declname>
        </param>
        <param>
          <type>std::string_view</type>
          <declname>needle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utils.cpp" line="158" column="6" bodyfile="src/utils.cpp" bodystart="158" bodyend="162" declfile="inc/utils.h" declline="82" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a8ea22a55ee940e9d5aab2b939875ba4a_1a8ea22a55ee940e9d5aab2b939875ba4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string &amp;</type>
        <definition>std::string &amp; util::capitalizeFirstLetter</definition>
        <argsstring>(std::string &amp;str)</argsstring>
        <name>capitalizeFirstLetter</name>
        <qualifiedname>util::capitalizeFirstLetter</qualifiedname>
        <param>
          <type>std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utils.cpp" line="164" column="13" bodyfile="src/utils.cpp" bodystart="164" bodyend="168" declfile="inc/utils.h" declline="83" declcolumn="13"/>
        <referencedby refid="classImguiConstantBufferVisitorShowcase_a5527d99456f1106040fdfdd737953e12_1a5527d99456f1106040fdfdd737953e12" compoundref="imgui__visitors_8cpp" startline="250" endline="258">ImguiConstantBufferVisitorShowcase::onSetMaterial</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_ae0282ca7ffdf3652129705fe58eb6e5f_1ae0282ca7ffdf3652129705fe58eb6e5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string util::capitalizeFirstLetter</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>capitalizeFirstLetter</name>
        <qualifiedname>util::capitalizeFirstLetter</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utils.cpp" line="170" column="13" bodyfile="src/utils.cpp" bodystart="170" bodyend="175" declfile="inc/utils.h" declline="84" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_ac8acfdbbacd733b86b68949387ba8ad8_1ac8acfdbbacd733b86b68949387ba8ad8" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string util::intToStr</definition>
        <argsstring>(int integer) noexcept</argsstring>
        <name>intToStr</name>
        <qualifiedname>util::intToStr</qualifiedname>
        <param>
          <type>int</type>
          <declname>integer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utils.cpp" line="177" column="13" bodyfile="src/utils.cpp" bodystart="177" bodyend="206" declfile="inc/utils.h" declline="85" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a77530f53a3b13566c5ac366f48ca3470_1a77530f53a3b13566c5ac366f48ca3470" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>int</type>
        <definition>int util::stringToInt</definition>
        <argsstring>(const std::string &amp;str) noexcept</argsstring>
        <name>stringToInt</name>
        <qualifiedname>util::stringToInt</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utils.cpp" line="208" column="5" bodyfile="src/utils.cpp" bodystart="208" bodyend="218" declfile="inc/utils.h" declline="86" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_ad8703794d925cf6667c7e524d2c0a1e1_1ad8703794d925cf6667c7e524d2c0a1e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void util::trimSpacesLeft</definition>
        <argsstring>(std::string &amp;s)</argsstring>
        <name>trimSpacesLeft</name>
        <qualifiedname>util::trimSpacesLeft</qualifiedname>
        <param>
          <type>std::string &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>trimSpaces from start (in place) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utils.cpp" line="220" column="6" bodyfile="src/utils.cpp" bodystart="220" bodyend="227" declfile="inc/utils.h" declline="89" declcolumn="6"/>
        <referencedby refid="namespaceutil_aa45ff2feb5b66709c315b058656cd53a_1aa45ff2feb5b66709c315b058656cd53a" compoundref="utils_8cpp" startline="238" endline="242">trimSpaces</referencedby>
        <referencedby refid="namespaceutil_a24e5bc723978ad1a06075f9544c2ca9a_1a24e5bc723978ad1a06075f9544c2ca9a" compoundref="utils_8cpp" startline="250" endline="254">trimSpacesLCopy</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_aeb3e149c28bc70655000566622273613_1aeb3e149c28bc70655000566622273613" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void util::trimSpacesRight</definition>
        <argsstring>(std::string &amp;s)</argsstring>
        <name>trimSpacesRight</name>
        <qualifiedname>util::trimSpacesRight</qualifiedname>
        <param>
          <type>std::string &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>trimSpaces from end (in place) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utils.cpp" line="229" column="6" bodyfile="src/utils.cpp" bodystart="229" bodyend="236" declfile="inc/utils.h" declline="91" declcolumn="6"/>
        <referencedby refid="namespaceutil_aa45ff2feb5b66709c315b058656cd53a_1aa45ff2feb5b66709c315b058656cd53a" compoundref="utils_8cpp" startline="238" endline="242">trimSpaces</referencedby>
        <referencedby refid="namespaceutil_adab26c60ceda7aef0d2ed9c8a53ea024_1adab26c60ceda7aef0d2ed9c8a53ea024" compoundref="utils_8cpp" startline="256" endline="260">trimSpacesRightCopy</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_aa45ff2feb5b66709c315b058656cd53a_1aa45ff2feb5b66709c315b058656cd53a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void util::trimSpaces</definition>
        <argsstring>(std::string &amp;s)</argsstring>
        <name>trimSpaces</name>
        <qualifiedname>util::trimSpaces</qualifiedname>
        <param>
          <type>std::string &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>trimSpaces from both ends (in place) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utils.cpp" line="238" column="6" bodyfile="src/utils.cpp" bodystart="238" bodyend="242" declfile="inc/utils.h" declline="93" declcolumn="6"/>
        <referencedby refid="namespaceutil_a8d38081987502aa8d2c6fcd96ce808fe_1a8d38081987502aa8d2c6fcd96ce808fe" compoundref="utils_8cpp" startline="244" endline="248">trimSpacesCopy</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a8d38081987502aa8d2c6fcd96ce808fe_1a8d38081987502aa8d2c6fcd96ce808fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string util::trimSpacesCopy</definition>
        <argsstring>(std::string s)</argsstring>
        <name>trimSpacesCopy</name>
        <qualifiedname>util::trimSpacesCopy</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>trimSpaces from both ends (copying) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utils.cpp" line="244" column="13" bodyfile="src/utils.cpp" bodystart="244" bodyend="248" declfile="inc/utils.h" declline="95" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a24e5bc723978ad1a06075f9544c2ca9a_1a24e5bc723978ad1a06075f9544c2ca9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string util::trimSpacesLCopy</definition>
        <argsstring>(std::string s)</argsstring>
        <name>trimSpacesLCopy</name>
        <qualifiedname>util::trimSpacesLCopy</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>trimSpaces from start (copying) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utils.cpp" line="250" column="13" bodyfile="src/utils.cpp" bodystart="250" bodyend="254" declfile="inc/utils.h" declline="97" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_adab26c60ceda7aef0d2ed9c8a53ea024_1adab26c60ceda7aef0d2ed9c8a53ea024" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string util::trimSpacesRightCopy</definition>
        <argsstring>(std::string s)</argsstring>
        <name>trimSpacesRightCopy</name>
        <qualifiedname>util::trimSpacesRightCopy</qualifiedname>
        <param>
          <type>std::string</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>trimSpaces from end (copying) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utils.cpp" line="256" column="13" bodyfile="src/utils.cpp" bodystart="256" bodyend="260" declfile="inc/utils.h" declline="99" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_acc9930a5ac52bb184d7605a05a9a2ba2_1acc9930a5ac52bb184d7605a05a9a2ba2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string util::toString</definition>
        <argsstring>(const T &amp;t)</argsstring>
        <name>toString</name>
        <qualifiedname>util::toString</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils.h" line="102" column="13" bodyfile="inc/utils.h" bodystart="102" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a9f5c13636a731d3784dd09cb9a4e5d36_1a9f5c13636a731d3784dd09cb9a4e5d36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if_t&lt;std::is_integral_v&lt;T&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void util::printBinary</definition>
        <argsstring>(const T val)</argsstring>
        <name>printBinary</name>
        <qualifiedname>util::printBinary</qualifiedname>
        <param>
          <type>const T</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils.h" line="110" column="6" bodyfile="inc/utils.h" bodystart="110" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_aa6b8fb4c8d30e5b2f82e8b2aaceaa541_1aa6b8fb4c8d30e5b2f82e8b2aaceaa541" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::tuple&lt; int, int, int &gt;</type>
        <definition>std::tuple&lt; int, int, int &gt; util::timeToHms</definition>
        <argsstring>(const float time)</argsstring>
        <name>timeToHms</name>
        <qualifiedname>util::timeToHms</qualifiedname>
        <param>
          <type>const float</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utils.cpp" line="263" column="12" bodyfile="src/utils.cpp" bodystart="263" bodyend="271" declfile="inc/utils.h" declline="116" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_aa594e46f7f551ca6c16364ea1d1fda35_1aa594e46f7f551ca6c16364ea1d1fda35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::tuple&lt; int, int, int &gt;</type>
        <definition>std::tuple&lt; int, int, int &gt; util::secondsToHms</definition>
        <argsstring>(const int totalSecs)</argsstring>
        <name>secondsToHms</name>
        <qualifiedname>util::secondsToHms</qualifiedname>
        <param>
          <type>const int</type>
          <declname>totalSecs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utils.cpp" line="273" column="12" bodyfile="src/utils.cpp" bodystart="273" bodyend="280" declfile="inc/utils.h" declline="117" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a5974fc1551b19ddb73b26a08a44d34c1_1a5974fc1551b19ddb73b26a08a44d34c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>time_t</type>
        <definition>time_t util::secondsToTimeT</definition>
        <argsstring>(const int s)</argsstring>
        <name>secondsToTimeT</name>
        <qualifiedname>util::secondsToTimeT</qualifiedname>
        <param>
          <type>const int</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>convert seconds to time_t </para>
        </briefdescription>
        <detaileddescription>
<para>Although not defined, time_t is implementation defined, it is almost always an integral value holding the number of seconds (not counting leap seconds) since 00:00, Jan 1 1970 UTC, corresponding to POSIX time. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utils.cpp" line="282" column="8" bodyfile="src/utils.cpp" bodystart="282" bodyend="285" declfile="inc/utils.h" declline="121" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_ab7bc28dff3d367e7cf9c472f42112628_1ab7bc28dff3d367e7cf9c472f42112628" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long int</type>
        <definition>long int util::timeTtoSeconds</definition>
        <argsstring>(const time_t t)</argsstring>
        <name>timeTtoSeconds</name>
        <qualifiedname>util::timeTtoSeconds</qualifiedname>
        <param>
          <type>const time_t</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>convert time_t to seconds <mdash/> time_t can be acquired as if by means of time(nullptr) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utils.cpp" line="287" column="10" bodyfile="src/utils.cpp" bodystart="287" bodyend="290" declfile="inc/utils.h" declline="123" declcolumn="10"/>
        <referencedby refid="classPerlinNoise_af5eca66a372d3ff89584383685b729ce_1af5eca66a372d3ff89584383685b729ce" compoundref="perlin__noise_8cpp" startline="9" endline="29">PerlinNoise::PerlinNoise</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a3d18d29fbb21273515e6b38ff2b47109_1a3d18d29fbb21273515e6b38ff2b47109" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::uintptr_t</type>
        <definition>std::uintptr_t util::pointerToInt</definition>
        <argsstring>(const void *p)</argsstring>
        <name>pointerToInt</name>
        <qualifiedname>util::pointerToInt</qualifiedname>
        <param>
          <type>const void *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utils.cpp" line="292" column="16" bodyfile="src/utils.cpp" bodystart="292" bodyend="295" declfile="inc/utils.h" declline="125" declcolumn="16"/>
        <referencedby refid="namespaceutil_af3e0fba53fdf2642e7e7b847f293c278_1af3e0fba53fdf2642e7e7b847f293c278" compoundref="utils_8cpp" startline="302" endline="306">addPointers</referencedby>
        <referencedby refid="classTexture_a72e33b3324d9429f293e843b517ac357_1a72e33b3324d9429f293e843b517ac357" compoundref="texture_8cpp" startline="168" endline="174">Texture::calcUid</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a37236425a39502bc2364fe09e185d262_1a37236425a39502bc2364fe09e185d262" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * util::intToPointer</definition>
        <argsstring>(const uintptr_t i)</argsstring>
        <name>intToPointer</name>
        <qualifiedname>util::intToPointer</qualifiedname>
        <param>
          <type>const uintptr_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utils.cpp" line="297" column="6" bodyfile="src/utils.cpp" bodystart="297" bodyend="300" declfile="inc/utils.h" declline="126" declcolumn="6"/>
        <referencedby refid="namespaceutil_af3e0fba53fdf2642e7e7b847f293c278_1af3e0fba53fdf2642e7e7b847f293c278" compoundref="utils_8cpp" startline="302" endline="306">addPointers</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_af3e0fba53fdf2642e7e7b847f293c278_1af3e0fba53fdf2642e7e7b847f293c278" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * util::addPointers</definition>
        <argsstring>(const void *p1, const void *p2)</argsstring>
        <name>addPointers</name>
        <qualifiedname>util::addPointers</qualifiedname>
        <param>
          <type>const void *</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utils.cpp" line="302" column="6" bodyfile="src/utils.cpp" bodystart="302" bodyend="306" declfile="inc/utils.h" declline="127" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a46c3e4ce9bbbdf7785ac019134080adb_1a46c3e4ce9bbbdf7785ac019134080adb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string util::operator+</definition>
        <argsstring>(const std::string_view &amp;sv1, const std::string_view &amp;sv2)</argsstring>
        <name>operator+</name>
        <qualifiedname>util::operator+</qualifiedname>
        <param>
          <type>const std::string_view &amp;</type>
          <declname>sv1</declname>
        </param>
        <param>
          <type>const std::string_view &amp;</type>
          <declname>sv2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utils.cpp" line="308" column="13" bodyfile="src/utils.cpp" bodystart="308" bodyend="312" declfile="inc/utils.h" declline="129" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a03db4e23a89578616a42638fcae43646_1a03db4e23a89578616a42638fcae43646" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if_t&lt;std::is_arithmetic_v&lt;T&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string util::getNumberString</definition>
        <argsstring>(const T num)</argsstring>
        <name>getNumberString</name>
        <qualifiedname>util::getNumberString</qualifiedname>
        <param>
          <type>const T</type>
          <declname>num</declname>
        </param>
        <briefdescription>
<para>print a comma every 3 decimal places </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils.h" line="133" column="13" bodyfile="inc/utils.h" bodystart="133" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_aeb767cc44dedcd141e63a057cc250ca7_1aeb767cc44dedcd141e63a057cc250ca7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string util::generateCaptcha</definition>
        <argsstring>(int len)</argsstring>
        <name>generateCaptcha</name>
        <qualifiedname>util::generateCaptcha</qualifiedname>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utils.cpp" line="314" column="13" bodyfile="src/utils.cpp" bodystart="314" bodyend="325" declfile="inc/utils.h" declline="142" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a231ff37a555718ffa5cbaa39694b0025_1a231ff37a555718ffa5cbaa39694b0025" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned char</type>
        <definition>unsigned char util::mapToByte</definition>
        <argsstring>(const float value)</argsstring>
        <name>mapToByte</name>
        <qualifiedname>util::mapToByte</qualifiedname>
        <param>
          <type>const float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utils.cpp" line="327" column="15" bodyfile="src/utils.cpp" bodystart="327" bodyend="330" declfile="inc/utils.h" declline="144" declcolumn="15"/>
        <referencedby refid="classBmpLoader_aeef90c16086d9134cb1724f28688dce7_1aeef90c16086d9134cb1724f28688dce7" compoundref="bmp__loader_8cpp" startline="248" endline="331">BmpLoader::generateData</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a6069b6178e28e74632539744d6057427_1a6069b6178e28e74632539744d6057427" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned char</type>
        <definition>unsigned char util::mapToByte</definition>
        <argsstring>(const double value)</argsstring>
        <name>mapToByte</name>
        <qualifiedname>util::mapToByte</qualifiedname>
        <param>
          <type>const double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utils.cpp" line="332" column="15" bodyfile="src/utils.cpp" bodystart="332" bodyend="335" declfile="inc/utils.h" declline="145" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a58bf66e63af566389408f9b12cdb066f_1a58bf66e63af566389408f9b12cdb066f" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool util::isAligned</definition>
        <argsstring>(const volatile void *p, const std::size_t alignment) noexcept</argsstring>
        <name>isAligned</name>
        <qualifiedname>util::isAligned</qualifiedname>
        <param>
          <type>const volatile void *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const std::size_t</type>
          <declname>alignment</declname>
        </param>
        <briefdescription>
<para>check whether the address is aligned to <computeroutput>alignment</computeroutput> boundary </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utils.cpp" line="337" column="6" bodyfile="src/utils.cpp" bodystart="337" bodyend="341" declfile="inc/utils.h" declline="148" declcolumn="6"/>
        <referencedby refid="namespaceutil_aee781f7c6f96423d9c888e1b1cc0e8e4_1aee781f7c6f96423d9c888e1b1cc0e8e4" compoundref="utils_8h" startline="178" endline="186">alignPtr</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a4149475be88bee44ab63b28885c19981_1a4149475be88bee44ab63b28885c19981" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool util::isAligned</definition>
        <argsstring>(const std::uintptr_t pi, const std::size_t alignment) noexcept</argsstring>
        <name>isAligned</name>
        <qualifiedname>util::isAligned</qualifiedname>
        <param>
          <type>const std::uintptr_t</type>
          <declname>pi</declname>
        </param>
        <param>
          <type>const std::size_t</type>
          <declname>alignment</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utils.cpp" line="343" column="6" bodyfile="src/utils.cpp" bodystart="343" bodyend="347" declfile="inc/utils.h" declline="149" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a93f7209e8be0722fb528788aa9942b53_1a93f7209e8be0722fb528788aa9942b53" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const int</type>
        <definition>const int util::is4ByteAligned</definition>
        <argsstring>(const intptr_t *addr)</argsstring>
        <name>is4ByteAligned</name>
        <qualifiedname>util::is4ByteAligned</qualifiedname>
        <param>
          <type>const intptr_t *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utils.cpp" line="350" column="21" bodyfile="src/utils.cpp" bodystart="350" bodyend="357" declfile="inc/utils.h" declline="150" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a9c9724666639b7f1c138eb0c4bddd75b_1a9c9724666639b7f1c138eb0c4bddd75b" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T *</type>
        <definition>T * util::alignForward</definition>
        <argsstring>(const T *p, const std::size_t alignment) noexcept</argsstring>
        <name>alignForward</name>
        <qualifiedname>util::alignForward</qualifiedname>
        <param>
          <type>const T *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const std::size_t</type>
          <declname>alignment</declname>
        </param>
        <briefdescription>
<para>align pointer forward with given alignment </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils.h" line="154" column="3" bodyfile="inc/utils.h" bodystart="154" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a105de072219f189de8e532bdae001f55_1a105de072219f189de8e532bdae001f55" prot="public" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>std::uintptr_t</type>
        <definition>std::uintptr_t util::alignForward</definition>
        <argsstring>(const std::uintptr_t ip, const std::size_t alignment) noexcept</argsstring>
        <name>alignForward</name>
        <qualifiedname>util::alignForward</qualifiedname>
        <param>
          <type>const std::uintptr_t</type>
          <declname>ip</declname>
        </param>
        <param>
          <type>const std::size_t</type>
          <declname>alignment</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utils.cpp" line="360" column="16" bodyfile="src/utils.cpp" bodystart="360" bodyend="373" declfile="inc/utils.h" declline="170" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_ad035326969b82db340b760d38f06b68f_1ad035326969b82db340b760d38f06b68f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t util::calcAlignedSize</definition>
        <argsstring>(const std::size_t size, const std::size_t alignment)</argsstring>
        <name>calcAlignedSize</name>
        <qualifiedname>util::calcAlignedSize</qualifiedname>
        <param>
          <type>const std::size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const std::size_t</type>
          <declname>alignment</declname>
        </param>
        <briefdescription>
<para>calculates alignment in bits supposedly </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utils.cpp" line="375" column="13" bodyfile="src/utils.cpp" bodystart="375" bodyend="379" declfile="inc/utils.h" declline="172" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a61142bea7d10f60b833c4380abeba43e_1a61142bea7d10f60b833c4380abeba43e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t util::getForwardPadding</definition>
        <argsstring>(const std::size_t p, const std::size_t alignment)</argsstring>
        <name>getForwardPadding</name>
        <qualifiedname>util::getForwardPadding</qualifiedname>
        <param>
          <type>const std::size_t</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const std::size_t</type>
          <declname>alignment</declname>
        </param>
        <briefdescription>
<para>calculate padding bytes needed to align address p forward given the alignment </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utils.cpp" line="381" column="13" bodyfile="src/utils.cpp" bodystart="381" bodyend="388" declfile="inc/utils.h" declline="174" declcolumn="13"/>
        <referencedby refid="namespaceutil_add2671cb84bf5dbb46e11970804b154b_1add2671cb84bf5dbb46e11970804b154b" compoundref="utils_8cpp" startline="390" endline="413">getForwardPaddingWithHeader</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_add2671cb84bf5dbb46e11970804b154b_1add2671cb84bf5dbb46e11970804b154b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t util::getForwardPaddingWithHeader</definition>
        <argsstring>(const std::size_t p, const std::size_t alignment, const std::size_t headerSize)</argsstring>
        <name>getForwardPaddingWithHeader</name>
        <qualifiedname>util::getForwardPaddingWithHeader</qualifiedname>
        <param>
          <type>const std::size_t</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const std::size_t</type>
          <declname>alignment</declname>
        </param>
        <param>
          <type>const std::size_t</type>
          <declname>headerSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utils.cpp" line="390" column="13" bodyfile="src/utils.cpp" bodystart="390" bodyend="413" declfile="inc/utils.h" declline="175" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_aee781f7c6f96423d9c888e1b1cc0e8e4_1aee781f7c6f96423d9c888e1b1cc0e8e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T *</type>
        <definition>T * util::alignPtr</definition>
        <argsstring>(const T *ptr, const std::size_t alignment)</argsstring>
        <name>alignPtr</name>
        <qualifiedname>util::alignPtr</qualifiedname>
        <param>
          <type>const T *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>const std::size_t</type>
          <declname>alignment</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils.h" line="178" column="3" bodyfile="inc/utils.h" bodystart="178" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a6564cc9d8da8d8b046599547c73abdb5_1a6564cc9d8da8d8b046599547c73abdb5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned int volatile &amp;</type>
        <definition>unsigned int volatile  &amp; util::readMEM</definition>
        <argsstring>(unsigned int memoryAddress)</argsstring>
        <name>readMEM</name>
        <qualifiedname>util::readMEM</qualifiedname>
        <param>
          <type>unsigned int</type>
          <declname>memoryAddress</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils.h" line="193" column="30" bodyfile="inc/utils.h" bodystart="193" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_aef4aca946c9ba9c6f9a90078e2318ce0_1aef4aca946c9ba9c6f9a90078e2318ce0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned long long int volatile &amp;</type>
        <definition>unsigned long long int volatile  &amp; util::readMEM</definition>
        <argsstring>(unsigned long long int memoryAddress)</argsstring>
        <name>readMEM</name>
        <qualifiedname>util::readMEM</qualifiedname>
        <param>
          <type>unsigned long long int</type>
          <declname>memoryAddress</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils.h" line="200" column="40" bodyfile="inc/utils.h" bodystart="200" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_ab67eedf6aa91b69039e0b9b670d83c6d_1ab67eedf6aa91b69039e0b9b670d83c6d" prot="public" static="no" nodiscard="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>restricted noaliasing void *</type>
        <definition>restricted noaliasing void * util::getUniqueMemory</definition>
        <argsstring>(const std::size_t bytes)</argsstring>
        <name>getUniqueMemory</name>
        <qualifiedname>util::getUniqueMemory</qualifiedname>
        <param>
          <type>const std::size_t</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
<para>if you allocate an object on the heap, it will be given a unique address within that process; nothing else will be assigned that address until you free the object </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils.h" line="207" column="36" bodyfile="inc/utils.h" bodystart="207" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_ab305fd67d4668cd0e46468fe31accb20_1ab305fd67d4668cd0e46468fe31accb20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T &amp;</type>
        <definition>T &amp; util::deconst</definition>
        <argsstring>(const T &amp;obj)</argsstring>
        <name>deconst</name>
        <qualifiedname>util::deconst</qualifiedname>
        <param>
          <type>const T &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils.h" line="213" column="3" bodyfile="inc/utils.h" bodystart="213" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a3f2b31d531a438ac0a59071a4d2cab20_1a3f2b31d531a438ac0a59071a4d2cab20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T *</type>
        <definition>T * util::deconst</definition>
        <argsstring>(const T *obj)</argsstring>
        <name>deconst</name>
        <qualifiedname>util::deconst</qualifiedname>
        <param>
          <type>const T *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils.h" line="219" column="3" bodyfile="inc/utils.h" bodystart="219" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_af7a54da6af4a424b6d67d21d68ec09ec_1af7a54da6af4a424b6d67d21d68ec09ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TContainer</type>
          </param>
          <param>
            <type>typename TP</type>
          </param>
        </templateparamlist>
        <type>decltype(auto)</type>
        <definition>decltype(auto) util::pointerToIterator</definition>
        <argsstring>(TContainer &amp;c, TP pElem)</argsstring>
        <name>pointerToIterator</name>
        <qualifiedname>util::pointerToIterator</qualifiedname>
        <param>
          <type>TContainer &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>TP</type>
          <declname>pElem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils.h" line="231" column="10" bodyfile="inc/utils.h" bodystart="231" bodyend="238"/>
        <referencedby refid="namespaceutil_a9857a3a40e4aff93d01dcacf6a202224_1a9857a3a40e4aff93d01dcacf6a202224" compoundref="utils_8h" startline="257" endline="267">removeByBackSwap</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a036a8b413dc66470ab317df5efe86e74_1a036a8b413dc66470ab317df5efe86e74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TContainer</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void util::removeByBackSwap</definition>
        <argsstring>(TContainer &amp;container, typename TContainer::size_type index)</argsstring>
        <name>removeByBackSwap</name>
        <qualifiedname>util::removeByBackSwap</qualifiedname>
        <param>
          <type>TContainer &amp;</type>
          <declname>container</declname>
        </param>
        <param>
          <type>typename TContainer::size_type</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils.h" line="241" column="6" bodyfile="inc/utils.h" bodystart="241" bodyend="246"/>
        <referencedby refid="classgui_1_1Component_a00da0705235d6624e30876ecdb62633b_1a00da0705235d6624e30876ecdb62633b" compoundref="ui__component_8cpp" startline="349" endline="382">gui::Component::~Component</referencedby>
        <referencedby refid="classgui_1_1Component_ac11c4364bb9b91ac80ba31b55b0aae7e_1ac11c4364bb9b91ac80ba31b55b0aae7e" compoundref="ui__component_8cpp" startline="741" endline="751">gui::Component::set_enable_top_most</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a3ff21d733c678e940c5eb027bd98c06a_1a3ff21d733c678e940c5eb027bd98c06a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TContainer</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void util::removeByBackSwap</definition>
        <argsstring>(TContainer &amp;container, typename TContainer::iterator iter)</argsstring>
        <name>removeByBackSwap</name>
        <qualifiedname>util::removeByBackSwap</qualifiedname>
        <param>
          <type>TContainer &amp;</type>
          <declname>container</declname>
        </param>
        <param>
          <type>typename TContainer::iterator</type>
          <declname>iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils.h" line="249" column="6" bodyfile="inc/utils.h" bodystart="249" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a9857a3a40e4aff93d01dcacf6a202224_1a9857a3a40e4aff93d01dcacf6a202224" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>class Alloc</type>
            <defval>std::allocator&lt;T&gt;</defval>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if_t&lt;std::is_pointer_v&lt;T&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void util::removeByBackSwap</definition>
        <argsstring>(std::vector&lt; T, Alloc &gt; &amp;v, T p)</argsstring>
        <name>removeByBackSwap</name>
        <qualifiedname>util::removeByBackSwap</qualifiedname>
        <param>
          <type>std::vector&lt; T, Alloc &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>T</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils.h" line="257" column="6" bodyfile="inc/utils.h" bodystart="257" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a5484eeb515a00225f06c63ddcdb789ed_1a5484eeb515a00225f06c63ddcdb789ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TContainer</type>
          </param>
          <param>
            <type>typename Predicate</type>
          </param>
          <param>
            <type>typename</type>
            <defval>std::enable_if_t&lt;std::is_function_v&lt;Predicate&gt;&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void util::removeByBackSwap</definition>
        <argsstring>(TContainer &amp;c, Predicate pred)</argsstring>
        <name>removeByBackSwap</name>
        <qualifiedname>util::removeByBackSwap</qualifiedname>
        <param>
          <type>TContainer &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>Predicate</type>
          <declname>pred</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils.h" line="270" column="6" bodyfile="inc/utils.h" bodystart="270" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a67fe6fa3794ebffb16979bb6dee51796_1a67fe6fa3794ebffb16979bb6dee51796" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>class Alloc</type>
            <defval>std::allocator&lt;T&gt;</defval>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void util::shrinkCapacity</definition>
        <argsstring>(std::vector&lt; T, Alloc &gt; &amp;v)</argsstring>
        <name>shrinkCapacity</name>
        <qualifiedname>util::shrinkCapacity</qualifiedname>
        <param>
          <type>std::vector&lt; T, Alloc &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>shrink vector&apos;s capacity to its size </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils.h" line="279" column="6" bodyfile="inc/utils.h" bodystart="279" bodyend="282"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_aed7f0709400954da58ff6957685bf016_1aed7f0709400954da58ff6957685bf016" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class InputIt</type>
          </param>
          <param>
            <type>class OutputIt</type>
          </param>
          <param>
            <type>class TPredicate</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void util::moveIf</definition>
        <argsstring>(InputIt srcFirst, InputIt srcLast, OutputIt *destFirst, TPredicate predicate)</argsstring>
        <name>moveIf</name>
        <qualifiedname>util::moveIf</qualifiedname>
        <param>
          <type>InputIt</type>
          <declname>srcFirst</declname>
        </param>
        <param>
          <type>InputIt</type>
          <declname>srcLast</declname>
        </param>
        <param>
          <type>OutputIt *</type>
          <declname>destFirst</declname>
        </param>
        <param>
          <type>TPredicate</type>
          <declname>predicate</declname>
        </param>
        <briefdescription>
<para>note that there is std::move(inIt1, inIt2, outIt); </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils.h" line="286" column="6" bodyfile="inc/utils.h" bodystart="286" bodyend="292"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a6b96830b7748a3066f44445b1924509e_1a6b96830b7748a3066f44445b1924509e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Container</type>
          </param>
          <param>
            <type>class TPredicate</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void util::splitMovePartition</definition>
        <argsstring>(Container &amp;src, Container &amp;dest, TPredicate p)</argsstring>
        <name>splitMovePartition</name>
        <qualifiedname>util::splitMovePartition</qualifiedname>
        <param>
          <type>Container &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>Container &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>TPredicate</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>like partition_move - puts the second group of an std::partition to another container removing them from the source container </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils.h" line="296" column="6" bodyfile="inc/utils.h" bodystart="296" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a58dd24c8b09761efb10fc993c89bc05e_1a58dd24c8b09761efb10fc993c89bc05e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TContainer</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void util::printContainer</definition>
        <argsstring>(const TContainer &amp;cont, const char *delimiter=&quot; &quot;)</argsstring>
        <name>printContainer</name>
        <qualifiedname>util::printContainer</qualifiedname>
        <param>
          <type>const TContainer &amp;</type>
          <declname>cont</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>delimiter</declname>
          <defval>&quot; &quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils.h" line="305" column="6" bodyfile="inc/utils.h" bodystart="305" bodyend="309"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_ad3b133a1c662a66bf659eea11d75eb58_1ad3b133a1c662a66bf659eea11d75eb58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void util::regexSearch</definition>
        <argsstring>(const std::regex &amp;pattern)</argsstring>
        <name>regexSearch</name>
        <qualifiedname>util::regexSearch</qualifiedname>
        <param>
          <type>const std::regex &amp;</type>
          <declname>pattern</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/utils.cpp" line="421" column="6" bodyfile="src/utils.cpp" bodystart="421" bodyend="436" declfile="inc/utils.h" declline="311" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a877a49123c9b34454e4cc00bcf38656f_1a877a49123c9b34454e4cc00bcf38656f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TContainer</type>
          </param>
          <param>
            <type>typename Func</type>
          </param>
        </templateparamlist>
        <type>decltype(auto)</type>
        <definition>decltype(auto) util::doForAll</definition>
        <argsstring>(TContainer &amp;c, Func f)</argsstring>
        <name>doForAll</name>
        <qualifiedname>util::doForAll</qualifiedname>
        <param>
          <type>TContainer &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>Func</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils.h" line="314" column="10" bodyfile="inc/utils.h" bodystart="314" bodyend="321"/>
        <referencedby refid="classgui_1_1Component_a730733a4badb1d79d41ba54006c4ec9d_1a730733a4badb1d79d41ba54006c4ec9d" compoundref="ui__component_8cpp" startline="803" endline="859">gui::Component::set_user_property</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a6ac2760c082e6c54ba90f23a4eed04d0_1a6ac2760c082e6c54ba90f23a4eed04d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Container</type>
          </param>
          <param>
            <type>class FilterFunction</type>
          </param>
        </templateparamlist>
        <type>decltype(auto)</type>
        <definition>decltype(auto) util::filterContainer</definition>
        <argsstring>(Container &amp;c, const FilterFunction &amp;&amp;f)</argsstring>
        <name>filterContainer</name>
        <qualifiedname>util::filterContainer</qualifiedname>
        <param>
          <type>Container &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const FilterFunction &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils.h" line="324" column="10" bodyfile="inc/utils.h" bodystart="324" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a2ef5892f48b68ba6b7bb511acb0f3d11_1a2ef5892f48b68ba6b7bb511acb0f3d11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TContainer</type>
          </param>
        </templateparamlist>
        <type>TContainer::iterator</type>
        <definition>TContainer::iterator util::erase</definition>
        <argsstring>(TContainer &amp;container, typename TContainer::const_reference element_to_erase)</argsstring>
        <name>erase</name>
        <qualifiedname>util::erase</qualifiedname>
        <param>
          <type>TContainer &amp;</type>
          <declname>container</declname>
        </param>
        <param>
          <type>typename TContainer::const_reference</type>
          <declname>element_to_erase</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils.h" line="334" column="31" bodyfile="inc/utils.h" bodystart="334" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a5b404ca0691f2398dc871913e83889b0_1a5b404ca0691f2398dc871913e83889b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TContainer</type>
          </param>
          <param>
            <type>typename TPredicate</type>
          </param>
        </templateparamlist>
        <type>TContainer::iterator</type>
        <definition>TContainer::iterator util::eraseIf</definition>
        <argsstring>(TContainer &amp;container, TPredicate &amp;&amp;predicate)</argsstring>
        <name>eraseIf</name>
        <qualifiedname>util::eraseIf</qualifiedname>
        <param>
          <type>TContainer &amp;</type>
          <declname>container</declname>
        </param>
        <param>
          <type>TPredicate &amp;&amp;</type>
          <declname>predicate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils.h" line="341" column="31" bodyfile="inc/utils.h" bodystart="341" bodyend="348"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_ac80bfe48c9a68a400561a202412881b7_1ac80bfe48c9a68a400561a202412881b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TContainer</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool util::containerContains</definition>
        <argsstring>(const TContainer &amp;container, const T &amp;val)</argsstring>
        <name>containerContains</name>
        <qualifiedname>util::containerContains</qualifiedname>
        <param>
          <type>const TContainer &amp;</type>
          <declname>container</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils.h" line="351" column="6" bodyfile="inc/utils.h" bodystart="351" bodyend="356"/>
        <referencedby refid="namespaceutil_acbc2b82ea3979bb100d92ece91f7f3db_1acbc2b82ea3979bb100d92ece91f7f3db" compoundref="utils_8h" startline="394" endline="404">insertUnique</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a38fdd47f119e081602b54f1d0655495c_1a38fdd47f119e081602b54f1d0655495c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TIt</type>
          </param>
          <param>
            <type>typename TPredicate</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool util::atLeastNOfRange</definition>
        <argsstring>(TIt begin, TIt end, size_t n, TPredicate &amp;&amp;predicate)</argsstring>
        <name>atLeastNOfRange</name>
        <qualifiedname>util::atLeastNOfRange</qualifiedname>
        <param>
          <type>TIt</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>TIt</type>
          <declname>end</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>TPredicate &amp;&amp;</type>
          <declname>predicate</declname>
        </param>
        <briefdescription>
<para>test if at least N elements of an iterator range match a predicate </para>
        </briefdescription>
        <detaileddescription>
<para>earlies out and returns once the required amount of elements have been matched </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils.h" line="361" column="6" bodyfile="inc/utils.h" bodystart="361" bodyend="373"/>
        <referencedby refid="namespaceutil_adb3cafa314ce4c8b575ec76fe6fe18b2_1adb3cafa314ce4c8b575ec76fe6fe18b2" compoundref="utils_8h" startline="376" endline="381">atLeastNOfRange</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_adb3cafa314ce4c8b575ec76fe6fe18b2_1adb3cafa314ce4c8b575ec76fe6fe18b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TContainer</type>
          </param>
          <param>
            <type>typename TPredicate</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool util::atLeastNOfRange</definition>
        <argsstring>(const TContainer &amp;container, size_t n, TPredicate &amp;&amp;predicate)</argsstring>
        <name>atLeastNOfRange</name>
        <qualifiedname>util::atLeastNOfRange</qualifiedname>
        <param>
          <type>const TContainer &amp;</type>
          <declname>container</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>TPredicate &amp;&amp;</type>
          <declname>predicate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils.h" line="376" column="6" bodyfile="inc/utils.h" bodystart="376" bodyend="381"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a960806e3d8cd482b70e3e05c86029298_1a960806e3d8cd482b70e3e05c86029298" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TContainer</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>unsigned</type>
        <definition>unsigned util::indexOf</definition>
        <argsstring>(const TContainer &amp;container, const T &amp;val)</argsstring>
        <name>indexOf</name>
        <qualifiedname>util::indexOf</qualifiedname>
        <param>
          <type>const TContainer &amp;</type>
          <declname>container</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils.h" line="384" column="10" bodyfile="inc/utils.h" bodystart="384" bodyend="391"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_acbc2b82ea3979bb100d92ece91f7f3db_1acbc2b82ea3979bb100d92ece91f7f3db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TContainer</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename TInserter</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool util::insertUnique</definition>
        <argsstring>(const TContainer &amp;container, T &amp;&amp;val, TInserter &amp;&amp;inserter)</argsstring>
        <name>insertUnique</name>
        <qualifiedname>util::insertUnique</qualifiedname>
        <param>
          <type>const TContainer &amp;</type>
          <declname>container</declname>
        </param>
        <param>
          <type>T &amp;&amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>TInserter &amp;&amp;</type>
          <declname>inserter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils.h" line="394" column="6" bodyfile="inc/utils.h" bodystart="394" bodyend="404"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a5de5007ffb79d6aee3610259de1d9f85_1a5de5007ffb79d6aee3610259de1d9f85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>util::ALIAS_FUNCTION</definition>
        <argsstring>(insertUnique, emplaceBackUnique)</argsstring>
        <name>ALIAS_FUNCTION</name>
        <qualifiedname>util::ALIAS_FUNCTION</qualifiedname>
        <param>
          <type><ref refid="namespaceutil_acbc2b82ea3979bb100d92ece91f7f3db_1acbc2b82ea3979bb100d92ece91f7f3db" kindref="member">insertUnique</ref></type>
        </param>
        <param>
          <type>emplaceBackUnique</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils.h" line="405" column="1" declfile="inc/utils.h" declline="405" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_af6c387c95398dd84b0b28bb6a249d8e1_1af6c387c95398dd84b0b28bb6a249d8e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TContainer</type>
          </param>
          <param>
            <type>typename TPredicate</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>TArgs</declname>
            <defname>TArgs</defname>
          </param>
        </templateparamlist>
        <type>TContainer::iterator</type>
        <definition>TContainer::iterator util::insertUniqueAndReturnIt</definition>
        <argsstring>(TContainer &amp;container, TPredicate &amp;&amp;predicate, TArgs &amp;&amp;... args)</argsstring>
        <name>insertUniqueAndReturnIt</name>
        <qualifiedname>util::insertUniqueAndReturnIt</qualifiedname>
        <param>
          <type>TContainer &amp;</type>
          <declname>container</declname>
        </param>
        <param>
          <type>TPredicate &amp;&amp;</type>
          <declname>predicate</declname>
        </param>
        <param>
          <type>TArgs &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils.h" line="408" column="31" bodyfile="inc/utils.h" bodystart="408" bodyend="420"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a9ba383f0a8a3a1bc98251bc9779a9447_1a9ba383f0a8a3a1bc98251bc9779a9447" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>util::ALIAS_FUNCTION</definition>
        <argsstring>(insertUniqueAndReturnIt, emplaceBackUniqueAndReturnIt)</argsstring>
        <name>ALIAS_FUNCTION</name>
        <qualifiedname>util::ALIAS_FUNCTION</qualifiedname>
        <param>
          <type><ref refid="namespaceutil_af6c387c95398dd84b0b28bb6a249d8e1_1af6c387c95398dd84b0b28bb6a249d8e1" kindref="member">insertUniqueAndReturnIt</ref></type>
        </param>
        <param>
          <type>emplaceBackUniqueAndReturnIt</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils.h" line="421" column="1" declfile="inc/utils.h" declline="421" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a03de7de71598df04ee509baa662ca4bb_1a03de7de71598df04ee509baa662ca4bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TContainer</type>
          </param>
          <param>
            <type>typename TComparator</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool util::hasDuplicates</definition>
        <argsstring>(const TContainer &amp;container, const TComparator &amp;comparator)</argsstring>
        <name>hasDuplicates</name>
        <qualifiedname>util::hasDuplicates</qualifiedname>
        <param>
          <type>const TContainer &amp;</type>
          <declname>container</declname>
        </param>
        <param>
          <type>const TComparator &amp;</type>
          <declname>comparator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils.h" line="424" column="6" bodyfile="inc/utils.h" bodystart="424" bodyend="457"/>
        <referencedby refid="namespaceutil_a789527bc816c768125c4a0a27d17ecc5_1a789527bc816c768125c4a0a27d17ecc5" compoundref="utils_8h" startline="460" endline="463">hasDuplicates</referencedby>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a789527bc816c768125c4a0a27d17ecc5_1a789527bc816c768125c4a0a27d17ecc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TContainer</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool util::hasDuplicates</definition>
        <argsstring>(const TContainer &amp;container)</argsstring>
        <name>hasDuplicates</name>
        <qualifiedname>util::hasDuplicates</qualifiedname>
        <param>
          <type>const TContainer &amp;</type>
          <declname>container</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils.h" line="460" column="6" bodyfile="inc/utils.h" bodystart="460" bodyend="463"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_ae4e48cd44f98e109329f1cf1a165bc56_1ae4e48cd44f98e109329f1cf1a165bc56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TContainer</type>
          </param>
        </templateparamlist>
        <type>std::set&lt; typename TContainer::value_type &gt;</type>
        <definition>std::set&lt; typename TContainer::value_type &gt; util::uniquefy</definition>
        <argsstring>(const TContainer &amp;container)</argsstring>
        <name>uniquefy</name>
        <qualifiedname>util::uniquefy</qualifiedname>
        <param>
          <type>const TContainer &amp;</type>
          <declname>container</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/utils.h" line="466" column="10" bodyfile="inc/utils.h" bodystart="466" bodyend="474"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a3ef300bbff3aa4bc392883f59ec9a005_1a3ef300bbff3aa4bc392883f59ec9a005" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>dx::XMFLOAT3</type>
        <definition>dx::XMFLOAT3 util::extractRotation</definition>
        <argsstring>(const dx::XMFLOAT4X4 &amp;mat)</argsstring>
        <name>extractRotation</name>
        <qualifiedname>util::extractRotation</qualifiedname>
        <param>
          <type>const dx::XMFLOAT4X4 &amp;</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/d3d_utils.cpp" line="26" column="14" bodyfile="src/d3d_utils.cpp" bodystart="26" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a2a711d3fa68443e8e43abad24636d4f4_1a2a711d3fa68443e8e43abad24636d4f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float util::getPitch</definition>
        <argsstring>(const dx::XMFLOAT4X4 &amp;mat)</argsstring>
        <name>getPitch</name>
        <qualifiedname>util::getPitch</qualifiedname>
        <param>
          <type>const dx::XMFLOAT4X4 &amp;</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/d3d_utils.cpp" line="45" column="7" bodyfile="src/d3d_utils.cpp" bodystart="45" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a620090e3680f97357354950960db9aac_1a620090e3680f97357354950960db9aac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float util::getYaw</definition>
        <argsstring>(const dx::XMFLOAT4X4 &amp;mat)</argsstring>
        <name>getYaw</name>
        <qualifiedname>util::getYaw</qualifiedname>
        <param>
          <type>const dx::XMFLOAT4X4 &amp;</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/d3d_utils.cpp" line="50" column="7" bodyfile="src/d3d_utils.cpp" bodystart="50" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_adadf4648d3a66222630f4e5620efa7d0_1adadf4648d3a66222630f4e5620efa7d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float util::getRoll</definition>
        <argsstring>(const dx::XMFLOAT4X4 &amp;mat)</argsstring>
        <name>getRoll</name>
        <qualifiedname>util::getRoll</qualifiedname>
        <param>
          <type>const dx::XMFLOAT4X4 &amp;</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/d3d_utils.cpp" line="67" column="7" bodyfile="src/d3d_utils.cpp" bodystart="67" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a07d0b1bf3a75d03e3186fd7238fe0c69_1a07d0b1bf3a75d03e3186fd7238fe0c69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>dx::XMFLOAT3</type>
        <definition>dx::XMFLOAT3 util::extractTranslation</definition>
        <argsstring>(const dx::XMFLOAT4X4 &amp;mat)</argsstring>
        <name>extractTranslation</name>
        <qualifiedname>util::extractTranslation</qualifiedname>
        <param>
          <type>const dx::XMFLOAT4X4 &amp;</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/d3d_utils.cpp" line="144" column="14" bodyfile="src/d3d_utils.cpp" bodystart="144" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a9c269ecc8d38d262b95be0d7f42f790c_1a9c269ecc8d38d262b95be0d7f42f790c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>dx::XMFLOAT3</type>
        <definition>dx::XMFLOAT3 util::extractTranslationColumnMatrix</definition>
        <argsstring>(const dx::XMFLOAT4X4 &amp;mat)</argsstring>
        <name>extractTranslationColumnMatrix</name>
        <qualifiedname>util::extractTranslationColumnMatrix</qualifiedname>
        <param>
          <type>const dx::XMFLOAT4X4 &amp;</type>
          <declname>mat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/d3d_utils.cpp" line="149" column="14" bodyfile="src/d3d_utils.cpp" bodystart="149" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_ac187dfcab61c2806836a306124b8bae9_1ac187dfcab61c2806836a306124b8bae9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>dx::XMMATRIX XM_CALLCONV</type>
        <definition>dx::XMMATRIX XM_CALLCONV util::scaleTranslation</definition>
        <argsstring>(const dx::XMMATRIX &amp;mat, const float scale)</argsstring>
        <name>scaleTranslation</name>
        <qualifiedname>util::scaleTranslation</qualifiedname>
        <param>
          <type>const dx::XMMATRIX &amp;</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>scale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/d3d_utils.cpp" line="154" column="26" bodyfile="src/d3d_utils.cpp" bodystart="154" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_aea5f3c3708d305c61054347137280c2f_1aea5f3c3708d305c61054347137280c2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>dx::XMVECTOR XM_CALLCONV</type>
        <definition>dx::XMVECTOR XM_CALLCONV util::pitchYawRollToQuaternion</definition>
        <argsstring>(const dx::XMVECTOR &amp;pitchYawRollAnglesVec)</argsstring>
        <name>pitchYawRollToQuaternion</name>
        <qualifiedname>util::pitchYawRollToQuaternion</qualifiedname>
        <param>
          <type>const dx::XMVECTOR &amp;</type>
          <declname>pitchYawRollAnglesVec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/d3d_utils.cpp" line="164" column="26" bodyfile="src/d3d_utils.cpp" bodystart="164" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a9b371ba57329a867219f3c812943058e_1a9b371ba57329a867219f3c812943058e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>dx::XMVECTOR XM_CALLCONV</type>
        <definition>dx::XMVECTOR XM_CALLCONV util::pitchYawRollToQuaternion</definition>
        <argsstring>(const dx::XMFLOAT3 &amp;pitchYawRollAngles)</argsstring>
        <name>pitchYawRollToQuaternion</name>
        <qualifiedname>util::pitchYawRollToQuaternion</qualifiedname>
        <param>
          <type>const dx::XMFLOAT3 &amp;</type>
          <declname>pitchYawRollAngles</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/d3d_utils.cpp" line="169" column="26" bodyfile="src/d3d_utils.cpp" bodystart="169" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a94f5921fa84b43f7e23aea7300e7dd3a_1a94f5921fa84b43f7e23aea7300e7dd3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>DirectX::XMFLOAT3</type>
        <definition>DirectX::XMFLOAT3 util::quaternionToPitchYawRoll</definition>
        <argsstring>(dx::XMFLOAT4 &amp;quat)</argsstring>
        <name>quaternionToPitchYawRoll</name>
        <qualifiedname>util::quaternionToPitchYawRoll</qualifiedname>
        <param>
          <type>dx::XMFLOAT4 &amp;</type>
          <declname>quat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/d3d_utils.cpp" line="253" column="19" bodyfile="src/d3d_utils.cpp" bodystart="253" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a8e6dec2e4e1e57a351d801bf564aa986_1a8e6dec2e4e1e57a351d801bf564aa986" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool util::displayFileInfo</definition>
        <argsstring>(const fs::path &amp;targetPath)</argsstring>
        <name>displayFileInfo</name>
        <qualifiedname>util::displayFileInfo</qualifiedname>
        <param>
          <type>const fs::path &amp;</type>
          <declname>targetPath</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/file_utils.cpp" line="12" column="6" bodyfile="src/file_utils.cpp" bodystart="12" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a297d24b04cadec6abe65baf8f600ae6b_1a297d24b04cadec6abe65baf8f600ae6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void util::displayDirTree</definition>
        <argsstring>(const fs::path &amp;targetPath, int level)</argsstring>
        <name>displayDirTree</name>
        <qualifiedname>util::displayDirTree</qualifiedname>
        <param>
          <type>const fs::path &amp;</type>
          <declname>targetPath</declname>
        </param>
        <param>
          <type>int</type>
          <declname>level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/file_utils.cpp" line="28" column="6" bodyfile="src/file_utils.cpp" bodystart="28" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a3ca3fb081b7e73b28c80a744b556941c_1a3ca3fb081b7e73b28c80a744b556941c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t util::getFileSize</definition>
        <argsstring>(const fs::path &amp;pathToCheck)</argsstring>
        <name>getFileSize</name>
        <qualifiedname>util::getFileSize</qualifiedname>
        <param>
          <type>const fs::path &amp;</type>
          <declname>pathToCheck</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/file_utils.cpp" line="63" column="8" bodyfile="src/file_utils.cpp" bodystart="63" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a3d0be309f1f6e51b00975dba4c6dd218_1a3d0be309f1f6e51b00975dba4c6dd218" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool util::displayTextFile</definition>
        <argsstring>(const fs::path &amp;targetPath)</argsstring>
        <name>displayTextFile</name>
        <qualifiedname>util::displayTextFile</qualifiedname>
        <param>
          <type>const fs::path &amp;</type>
          <declname>targetPath</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/file_utils.cpp" line="79" column="6" bodyfile="src/file_utils.cpp" bodystart="79" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a03520b0ff482dbb2cb7699a0ede85cac_1a03520b0ff482dbb2cb7699a0ede85cac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool util::displayBinaryFile</definition>
        <argsstring>(const fs::path &amp;targetPath)</argsstring>
        <name>displayBinaryFile</name>
        <qualifiedname>util::displayBinaryFile</qualifiedname>
        <param>
          <type>const fs::path &amp;</type>
          <declname>targetPath</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/file_utils.cpp" line="94" column="6" bodyfile="src/file_utils.cpp" bodystart="94" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a8389e2cba822dbfd1b2904c87c59733b_1a8389e2cba822dbfd1b2904c87c59733b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void util::writeFile</definition>
        <argsstring>(const fs::path &amp;path, const std::string &amp;data)</argsstring>
        <name>writeFile</name>
        <qualifiedname>util::writeFile</qualifiedname>
        <param>
          <type>const fs::path &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/file_utils.cpp" line="109" column="6" bodyfile="src/file_utils.cpp" bodystart="109" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_abd92d8c7e45ea750bfff687a9af85327_1abd92d8c7e45ea750bfff687a9af85327" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void util::searchFile</definition>
        <argsstring>(const fs::path &amp;directory, const fs::path &amp;filename)</argsstring>
        <name>searchFile</name>
        <qualifiedname>util::searchFile</qualifiedname>
        <param>
          <type>const fs::path &amp;</type>
          <declname>directory</declname>
        </param>
        <param>
          <type>const fs::path &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/file_utils.cpp" line="139" column="6" bodyfile="src/file_utils.cpp" bodystart="139" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a000b03e47bad2d40c84acb439e4100fc_1a000b03e47bad2d40c84acb439e4100fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void util::setFilePermissions</definition>
        <argsstring>(const std::string &amp;path, fs::perms permsToSet, fs::perm_options permsAction)</argsstring>
        <name>setFilePermissions</name>
        <qualifiedname>util::setFilePermissions</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>fs::perms</type>
          <declname>permsToSet</declname>
        </param>
        <param>
          <type>fs::perm_options</type>
          <declname>permsAction</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/file_utils.cpp" line="162" column="6" bodyfile="src/file_utils.cpp" bodystart="162" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="namespaceutil_a833373d99efbf126ccbb44456500085f_1a833373d99efbf126ccbb44456500085f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void util::suspendAllThreads</definition>
        <argsstring>()</argsstring>
        <name>suspendAllThreads</name>
        <qualifiedname>util::suspendAllThreads</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/os_utils.cpp" line="192" column="13" bodyfile="src/os_utils.cpp" bodystart="192" bodyend="219"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="inc/d3d_utils.h" line="17" column="1"/>
  </compounddef>
</doxygen>
