<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="imgui__visitors_8cpp" kind="file" language="C++">
    <compoundname>imgui_visitors.cpp</compoundname>
    <includes refid="imgui__visitors_8h" local="yes">imgui_visitors.h</includes>
    <includes local="no">DirectXMath.h</includes>
    <includes local="no">variant</includes>
    <includes refid="model_8h" local="yes">model.h</includes>
    <includes refid="mesh_8h" local="yes">mesh.h</includes>
    <includes refid="node_8h" local="yes">node.h</includes>
    <includes refid="blend__state_8h" local="yes">blend_state.h</includes>
    <includes refid="d3d__utils_8h" local="yes">d3d_utils.h</includes>
    <includes refid="assertions__console_8h" local="yes">assertions_console.h</includes>
    <includes refid="dynamic__constant__buffer_8h" local="yes">dynamic_constant_buffer.h</includes>
    <includes refid="material_8h" local="yes">material.h</includes>
    <includes refid="utils_8h" local="yes">utils.h</includes>
    <includes refid="math__utils_8h" local="yes">math_utils.h</includes>
    <includes local="yes">imgui/imgui.h</includes>
    <incdepgraph>
      <node id="19">
        <label>assertions_console.h</label>
        <link refid="assertions__console_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>bindable.h</label>
        <link refid="bindable_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>blend_state.h</label>
        <link refid="blend__state_8h"/>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>console.h</label>
        <link refid="console_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>d3d_utils.h</label>
        <link refid="d3d__utils_8h"/>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>dynamic_constant_buffer.h</label>
        <link refid="dynamic__constant__buffer_8h"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>graphics_friend.h</label>
        <link refid="graphics__friend_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>imgui_visitors.h</label>
        <link refid="imgui__visitors_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>key_type_traits.h</label>
        <link refid="key__type__traits_8h"/>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>key_wrl.h</label>
        <link refid="key__wrl_8h"/>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>material.h</label>
        <link refid="material_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>math_utils.h</label>
        <link refid="math__utils_8h"/>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>mesh.h</label>
        <link refid="mesh_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>model.h</label>
        <link refid="model_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>node.h</label>
        <link refid="node_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>non_copyable.h</label>
        <link refid="non__copyable_8h"/>
      </node>
      <node id="50">
        <label>os_utils.h</label>
        <link refid="os__utils_8h"/>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>rendering_channel.h</label>
        <link refid="rendering__channel_8h"/>
      </node>
      <node id="21">
        <label>transform_vscb.h</label>
        <link refid="transform__vscb_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>utils.h</label>
        <link refid="utils_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>utils_global.h</label>
        <link refid="utils__global_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>winner.h</label>
        <link refid="winner_8h"/>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/imgui_visitors.cpp</label>
        <link refid="imgui__visitors_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>DirectXMath.h</label>
      </node>
      <node id="57">
        <label>ShlObj.h</label>
      </node>
      <node id="47">
        <label>Windows.h</label>
      </node>
      <node id="31">
        <label>algorithm</label>
      </node>
      <node id="41">
        <label>array</label>
      </node>
      <node id="27">
        <label>bitset</label>
      </node>
      <node id="23">
        <label>cassert</label>
      </node>
      <node id="29">
        <label>cinttypes</label>
      </node>
      <node id="60">
        <label>cmath</label>
      </node>
      <node id="52">
        <label>comdef.h</label>
      </node>
      <node id="28">
        <label>cstddef</label>
      </node>
      <node id="61">
        <label>cstdint</label>
      </node>
      <node id="18">
        <label>d3d11.h</label>
      </node>
      <node id="49">
        <label>d3dcompiler.h</label>
      </node>
      <node id="35">
        <label>execution</label>
      </node>
      <node id="10">
        <label>filesystem</label>
      </node>
      <node id="56">
        <label>functional</label>
      </node>
      <node id="30">
        <label>future</label>
      </node>
      <node id="63">
        <label>imgui/imgui.h</label>
      </node>
      <node id="62">
        <label>iomanip</label>
      </node>
      <node id="20">
        <label>iostream</label>
      </node>
      <node id="33">
        <label>iterator</label>
      </node>
      <node id="5">
        <label>limits</label>
      </node>
      <node id="9">
        <label>memory</label>
      </node>
      <node id="32">
        <label>numeric</label>
      </node>
      <node id="13">
        <label>optional</label>
      </node>
      <node id="34">
        <label>regex</label>
      </node>
      <node id="46">
        <label>sdkddkver.h</label>
      </node>
      <node id="26">
        <label>set</label>
      </node>
      <node id="25">
        <label>sstream</label>
      </node>
      <node id="3">
        <label>string</label>
      </node>
      <node id="53">
        <label>tlhelp32.h</label>
      </node>
      <node id="48">
        <label>tuple</label>
      </node>
      <node id="37">
        <label>type_traits</label>
      </node>
      <node id="4">
        <label>unordered_map</label>
      </node>
      <node id="7">
        <label>variant</label>
      </node>
      <node id="15">
        <label>vector</label>
      </node>
      <node id="58">
        <label>wincred.h</label>
      </node>
      <node id="51">
        <label>winternl.h</label>
      </node>
      <node id="43">
        <label>wrl.h</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="imgui__visitors_8h" kindref="compound">imgui_visitors.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;DirectXMath.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;variant&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="model_8h" kindref="compound">model.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="mesh_8h" kindref="compound">mesh.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="node_8h" kindref="compound">node.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="blend__state_8h" kindref="compound">blend_state.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d3d__utils_8h" kindref="compound">d3d_utils.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="assertions__console_8h" kindref="compound">assertions_console.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="dynamic__constant__buffer_8h" kindref="compound">dynamic_constant_buffer.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="material_8h" kindref="compound">material.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="utils_8h" kindref="compound">utils.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="math__utils_8h" kindref="compound">math_utils.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FINAL_RELEASE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>include<sp/>&quot;imgui/imgui.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceDirectX" kindref="compound">dx</ref><sp/>=<sp/><ref refid="namespaceDirectX" kindref="compound">DirectX</ref>;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="classIImguiNodeVisitor_a3ffe58aedb22d53f18611cd112b25bbd_1a3ffe58aedb22d53f18611cd112b25bbd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classIImguiNodeVisitor_a3ffe58aedb22d53f18611cd112b25bbd_1a3ffe58aedb22d53f18611cd112b25bbd" kindref="member">IImguiNodeVisitor::visit</ref>(<sp/><ref refid="classNode" kindref="compound">Node</ref><sp/>&amp;node<sp/>)</highlight></codeline>
<codeline lineno="22"><highlight class="normal">{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>there<sp/>is<sp/>no<sp/>selected<sp/>node,<sp/>set<sp/>selectedNodeId<sp/>to<sp/>an<sp/>impossible<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>selectedNodeId<sp/>=<sp/>(<sp/><ref refid="classIImguiNodeVisitor_afdf913a5e0086ef6f44a9bf46d1e7ffa_1afdf913a5e0086ef6f44a9bf46d1e7ffa" kindref="member">m_pSelectedNode</ref><sp/>==<sp/>nullptr<sp/>)<sp/>?<sp/>-1<sp/>:<sp/><ref refid="classIImguiNodeVisitor_afdf913a5e0086ef6f44a9bf46d1e7ffa_1afdf913a5e0086ef6f44a9bf46d1e7ffa" kindref="member">m_pSelectedNode</ref>-&gt;<ref refid="classNode_a0374f189312791b63f5a85a5b6dc2b04_1a0374f189312791b63f5a85a5b6dc2b04" kindref="member">getImguiId</ref>();</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nodeFlags<sp/>=<sp/>ImGuiTreeNodeFlags_OpenOnArrow</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>(<sp/>(<sp/>node.<ref refid="classNode_a0374f189312791b63f5a85a5b6dc2b04_1a0374f189312791b63f5a85a5b6dc2b04" kindref="member">getImguiId</ref>()<sp/>==<sp/>selectedNodeId<sp/>)<sp/>?<sp/>ImGuiTreeNodeFlags_Selected<sp/>:<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>(<sp/>node.<ref refid="classNode_a2378c8d52ee672fdd22a480fa6cc83e5_1a2378c8d52ee672fdd22a480fa6cc83e5" kindref="member">hasChildren</ref>()<sp/>?<sp/>0<sp/>:<sp/>ImGuiTreeNodeFlags_Leaf<sp/>);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>render<sp/>this<sp/>node&apos;s<sp/>imgui</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bNodeOpen<sp/>=<sp/>ImGui::TreeNodeEx(<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)(intptr_t)node.<ref refid="classNode_a0374f189312791b63f5a85a5b6dc2b04_1a0374f189312791b63f5a85a5b6dc2b04" kindref="member">getImguiId</ref>(),<sp/>nodeFlags,<sp/>node.<ref refid="classNode_a7c70be855427bd60746b450074640816_1a7c70be855427bd60746b450074640816" kindref="member">getName</ref>().c_str()<sp/>);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ImGui::IsItemClicked()<sp/>)</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classIImguiNodeVisitor_afdf913a5e0086ef6f44a9bf46d1e7ffa_1afdf913a5e0086ef6f44a9bf46d1e7ffa" kindref="member">m_pSelectedNode</ref><sp/>=<sp/>&amp;node;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>bNodeOpen<sp/>is<sp/>true<sp/>then<sp/>that&apos;s<sp/>the<sp/>go-signal<sp/>for<sp/>children<sp/>Nodes<sp/>to<sp/>also<sp/>be<sp/>recursed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bNodeOpen;</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="classImguiPerModelNodeVisitor_af2839cac298d4faafa5401b027be7826_1af2839cac298d4faafa5401b027be7826" refkind="member"><highlight class="normal"><ref refid="classImguiPerModelNodeVisitor_a19cfd2a6096fbef06e548e4b9592c7d2_1a19cfd2a6096fbef06e548e4b9592c7d2" kindref="member">ImguiPerModelNodeVisitor::ImguiPerModelNodeVisitor</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;name<sp/>)</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>:</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>m_name{name}</highlight></codeline>
<codeline lineno="45"><highlight class="normal">{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal">}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="classImguiPerModelNodeVisitor_a05eb0479acfea8f99900419c4c496faa_1a05eb0479acfea8f99900419c4c496faa" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classImguiPerModelNodeVisitor_a05eb0479acfea8f99900419c4c496faa_1a05eb0479acfea8f99900419c4c496faa" kindref="member">ImguiPerModelNodeVisitor::onVisit</ref>(<sp/><ref refid="classNode" kindref="compound">Node</ref><sp/>&amp;node<sp/>)</highlight></codeline>
<codeline lineno="50"><highlight class="normal">{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui::TreePop();</highlight></codeline>
<codeline lineno="52"><highlight class="normal">}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="classImguiPerModelNodeVisitor_a720016f02e40ac6be1351265fda6ebd0_1a720016f02e40ac6be1351265fda6ebd0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classImguiPerModelNodeVisitor_a720016f02e40ac6be1351265fda6ebd0_1a720016f02e40ac6be1351265fda6ebd0" kindref="member">ImguiPerModelNodeVisitor::displayImguiWidgets</ref>(<sp/><ref refid="classModel" kindref="compound">Model</ref><sp/>&amp;model<sp/>)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal">{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui::Begin(<sp/>m_name.c_str()<sp/>);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui::Columns(<sp/>2,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>model.accept(<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui::NextColumn();</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>m_pSelectedNode<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bDirtyRot<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dirtyCheckRot<sp/>=<sp/>[](<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bChanged,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>&amp;bDirtyRot<sp/>)</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bDirtyRot<sp/>=<sp/>bDirtyRot<sp/>||<sp/>bChanged;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>transforming<sp/>the<sp/>Node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;tf<sp/>=<sp/>getNodeTransform();</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>#WARNING:<sp/>ImGui::SliderAngle<sp/>&amp;<sp/>similar<sp/>Rotation<sp/>functions<sp/>take<sp/>their<sp/>arguments<sp/>in<sp/>radians<sp/>convert<sp/>it<sp/>in<sp/>degrees<sp/>and<sp/>return<sp/>it<sp/>back<sp/>in<sp/>radians</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImGui::TextColored(<sp/>{0.4f,<sp/>1.0f,<sp/>0.6f,<sp/>1.0f},<sp/></highlight><highlight class="stringliteral">&quot;Rotation&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dirtyCheckRot(<sp/>ImGui::SliderAngle(<sp/></highlight><highlight class="stringliteral">&quot;Pitch&quot;</highlight><highlight class="normal">,<sp/>&amp;tf.pitch,<sp/>-0.995f<sp/>*<sp/>90.0f,<sp/>0.995f<sp/>*<sp/>90.0f<sp/>),<sp/>bDirtyRot<sp/>);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dirtyCheckRot(<sp/>ImGui::SliderAngle(<sp/></highlight><highlight class="stringliteral">&quot;Yaw&quot;</highlight><highlight class="normal">,<sp/>&amp;tf.yaw,<sp/>-180.0f,<sp/>180.0f<sp/>),<sp/>bDirtyRot<sp/>);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dirtyCheckRot(<sp/>ImGui::SliderAngle(<sp/></highlight><highlight class="stringliteral">&quot;Roll&quot;</highlight><highlight class="normal">,<sp/>&amp;tf.roll,<sp/>-180.0f,<sp/>180.0f<sp/>),<sp/>bDirtyRot<sp/>);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>bDirtyRot<sp/>)</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_pSelectedNode-&gt;setRotation(<sp/>{tf.pitch,<sp/>tf.yaw,<sp/>tf.roll}<sp/>);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bDirtyPos<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dirtyCheckPos<sp/>=<sp/>[](<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bChanged,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>&amp;bDirtyPos<sp/>)</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bDirtyPos<sp/>=<sp/>bDirtyPos<sp/>||<sp/>bChanged;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImGui::TextColored(<sp/>{0.4f,<sp/>1.0f,<sp/>0.6f,<sp/>1.0f},<sp/></highlight><highlight class="stringliteral">&quot;Translation&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dirtyCheckPos(<sp/>ImGui::SliderFloat(<sp/></highlight><highlight class="stringliteral">&quot;X&quot;</highlight><highlight class="normal">,<sp/>&amp;tf.x,<sp/>-60.f,<sp/>60.f<sp/>),<sp/>bDirtyPos<sp/>);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dirtyCheckPos(<sp/>ImGui::SliderFloat(<sp/></highlight><highlight class="stringliteral">&quot;Y&quot;</highlight><highlight class="normal">,<sp/>&amp;tf.y,<sp/>-60.f,<sp/>60.f<sp/>),<sp/>bDirtyPos<sp/>);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dirtyCheckPos(<sp/>ImGui::SliderFloat(<sp/></highlight><highlight class="stringliteral">&quot;Z&quot;</highlight><highlight class="normal">,<sp/>&amp;tf.z,<sp/>-60.f,<sp/>60.f<sp/>),<sp/>bDirtyPos<sp/>);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>bDirtyPos<sp/>)</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_pSelectedNode-&gt;setTranslation(<sp/>{tf.x,<sp/>tf.y,<sp/>tf.z}<sp/>);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="101"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>bDirty<sp/>=<sp/>false;</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>auto<sp/>dirtyCheck<sp/>=<sp/>[&amp;bDirty](<sp/>const<sp/>bool<sp/>bChanged<sp/>)</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bDirty<sp/>=<sp/>bDirty<sp/>||<sp/>bChanged;</highlight></codeline>
<codeline lineno="105"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="106"><highlight class="comment"></highlight></codeline>
<codeline lineno="107"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>for<sp/>transforming<sp/>the<sp/>model</highlight></codeline>
<codeline lineno="108"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>auto<sp/>&amp;tf<sp/>=<sp/>getNodeTransform();</highlight></codeline>
<codeline lineno="109"><highlight class="comment"></highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImGui::TextColored(<sp/>{0.4f,<sp/>1.0f,<sp/>0.6f,<sp/>1.0f},<sp/>&quot;Rotation&quot;<sp/>);</highlight></codeline>
<codeline lineno="111"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dirtyCheck(<sp/>ImGui::SliderAngle(<sp/>&quot;Pitch&quot;,<sp/>&amp;tf.pitch,<sp/>0.995f<sp/>*<sp/>-90.0f,<sp/>0.995f<sp/>*<sp/>90.0f<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="112"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dirtyCheck(<sp/>ImGui::SliderAngle(<sp/>&quot;Yaw&quot;,<sp/>&amp;tf.yaw,<sp/>-180.0f,<sp/>180.0f<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="113"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dirtyCheck(<sp/>ImGui::SliderAngle(<sp/>&quot;Roll&quot;,<sp/>&amp;tf.roll,<sp/>-180.0f,<sp/>180.0f<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="114"><highlight class="comment"></highlight></codeline>
<codeline lineno="115"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImGui::TextColored(<sp/>{0.4f,<sp/>1.0f,<sp/>0.6f,<sp/>1.0f},<sp/>&quot;Translation&quot;<sp/>);</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dirtyCheck(<sp/>ImGui::SliderFloat(<sp/>&quot;X&quot;,<sp/>&amp;tf.x,<sp/>-60.f,<sp/>60.f<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dirtyCheck(<sp/>ImGui::SliderFloat(<sp/>&quot;Y&quot;,<sp/>&amp;tf.y,<sp/>-60.f,<sp/>60.f<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dirtyCheck(<sp/>ImGui::SliderFloat(<sp/>&quot;Z&quot;,<sp/>&amp;tf.z,<sp/>-60.f,<sp/>60.f<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="119"><highlight class="comment"></highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(<sp/>bDirty<sp/>)</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_pSelectedNode-&gt;setTransform(<sp/>dx::XMMatrixScaling(<sp/>1.0f,<sp/>1.0f,<sp/>1.0f<sp/>)<sp/>*<sp/>dx::XMMatrixRotationX(<sp/>tf.pitch<sp/>)<sp/>*<sp/>dx::XMMatrixRotationY(<sp/>tf.yaw<sp/>)<sp/>*<sp/>dx::XMMatrixRotationZ(<sp/>tf.roll<sp/>)<sp/>*<sp/>dx::XMMatrixTranslation(<sp/>tf.x,<sp/>tf.y,<sp/>tf.z<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pBlendState<sp/>=<sp/>model.getMesh()<sp/>?<sp/>model.getMesh()-&gt;findBindable&lt;<ref refid="classBlendState" kindref="compound">BlendState</ref>&gt;()<sp/>:<sp/>std::nullopt;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>pBlendState<sp/>)</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bDirtyBlend<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dirtyCheckBlend<sp/>=<sp/>[](<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bChanged,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>&amp;bDirtyBlend<sp/>)</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bDirtyBlend<sp/>=<sp/>bDirtyBlend<sp/>||<sp/>bChanged;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ImGui::Text(<sp/></highlight><highlight class="stringliteral">&quot;Blending&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>factor<sp/>=<sp/>(*pBlendState)-&gt;getBlendFactorAlpha();</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dirtyCheckBlend(<sp/>ImGui::SliderFloat(<sp/></highlight><highlight class="stringliteral">&quot;Transparency&quot;</highlight><highlight class="normal">,<sp/>&amp;factor,<sp/>0.0f,<sp/>1.0f<sp/>),<sp/>bDirtyBlend);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>bDirtyBlend<sp/>)</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*pBlendState)-&gt;fillBlendFactors(<sp/>factor<sp/>);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classImguiConstantBufferVisitorShowcase" kindref="compound">ImguiConstantBufferVisitorShowcase</ref><sp/>ev;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m_pSelectedNode-&gt;accept(<sp/>ev<sp/>);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui::End();</highlight></codeline>
<codeline lineno="149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151" refid="classImguiPerModelNodeVisitor_afa4104c926e409f0dbdd385aa4db5d7c_1afa4104c926e409f0dbdd385aa4db5d7c" refkind="member"><highlight class="normal"><ref refid="structImguiPerModelNodeVisitor_1_1TransformData" kindref="compound">ImguiPerModelNodeVisitor::TransformData</ref>&amp;<sp/><ref refid="classImguiPerModelNodeVisitor_afa4104c926e409f0dbdd385aa4db5d7c_1afa4104c926e409f0dbdd385aa4db5d7c" kindref="member">ImguiPerModelNodeVisitor::getNodeTransform</ref>()<sp/>noexcept</highlight></codeline>
<codeline lineno="152"><highlight class="normal">{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>imguiNodeId<sp/>=<sp/><ref refid="classIImguiNodeVisitor_afdf913a5e0086ef6f44a9bf46d1e7ffa_1afdf913a5e0086ef6f44a9bf46d1e7ffa" kindref="member">m_pSelectedNode</ref>-&gt;<ref refid="classNode_a0374f189312791b63f5a85a5b6dc2b04_1a0374f189312791b63f5a85a5b6dc2b04" kindref="member">getImguiId</ref>();</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/><ref refid="classImguiPerModelNodeVisitor_ab13f445a001207d663c550d05af25a28_1ab13f445a001207d663c550d05af25a28" kindref="member">m_nodeMapTransforms</ref>.find(<sp/>imguiNodeId<sp/>);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>it<sp/>==<sp/><ref refid="classImguiPerModelNodeVisitor_ab13f445a001207d663c550d05af25a28_1ab13f445a001207d663c550d05af25a28" kindref="member">m_nodeMapTransforms</ref>.end()<sp/>)</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>angles<sp/>=<sp/><ref refid="classIImguiNodeVisitor_afdf913a5e0086ef6f44a9bf46d1e7ffa_1afdf913a5e0086ef6f44a9bf46d1e7ffa" kindref="member">m_pSelectedNode</ref>-&gt;<ref refid="classNode_ab61123bd9fcbad0b02f8363e7df24e7d_1ab61123bd9fcbad0b02f8363e7df24e7d" kindref="member">getRotation</ref>();</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>translation<sp/>=<sp/><ref refid="classIImguiNodeVisitor_afdf913a5e0086ef6f44a9bf46d1e7ffa_1afdf913a5e0086ef6f44a9bf46d1e7ffa" kindref="member">m_pSelectedNode</ref>-&gt;<ref refid="classNode_aa38921aea0a3a3473512631daf05ebd8_1aa38921aea0a3a3473512631daf05ebd8" kindref="member">getPosition</ref>();</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structImguiPerModelNodeVisitor_1_1TransformData" kindref="compound">TransformData</ref><sp/>td;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>td.<ref refid="structImguiPerModelNodeVisitor_1_1TransformData_a443f0cf12d6c7f2fbd847134b0526461_1a443f0cf12d6c7f2fbd847134b0526461" kindref="member">pitch</ref><sp/>=<sp/>angles.x;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>td.<ref refid="structImguiPerModelNodeVisitor_1_1TransformData_ad5fbaffa67e7ec10bc91b94474512478_1ad5fbaffa67e7ec10bc91b94474512478" kindref="member">yaw</ref><sp/>=<sp/>angles.y;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>td.<ref refid="structImguiPerModelNodeVisitor_1_1TransformData_aa51d93b9abff5bb8c9b94f6325efebfa_1aa51d93b9abff5bb8c9b94f6325efebfa" kindref="member">roll</ref><sp/>=<sp/>angles.z;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>td.<ref refid="structImguiPerModelNodeVisitor_1_1TransformData_aa34741396cc9d9031e99f60df39b8f61_1aa34741396cc9d9031e99f60df39b8f61" kindref="member">x</ref><sp/>=<sp/>translation.x;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>td.<ref refid="structImguiPerModelNodeVisitor_1_1TransformData_af7122cce4b801f121032b6d713e4eee3_1af7122cce4b801f121032b6d713e4eee3" kindref="member">y</ref><sp/>=<sp/>translation.y;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>td.<ref refid="structImguiPerModelNodeVisitor_1_1TransformData_a19b8e5f17e94749cbb739359e418e695_1a19b8e5f17e94749cbb739359e418e695" kindref="member">z</ref><sp/>=<sp/>translation.z;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bInserted<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::tie(<sp/>it,<sp/>bInserted<sp/>)<sp/>=<sp/><ref refid="classImguiPerModelNodeVisitor_ab13f445a001207d663c550d05af25a28_1ab13f445a001207d663c550d05af25a28" kindref="member">m_nodeMapTransforms</ref>.insert(<sp/>{imguiNodeId,<sp/>{td}}<sp/>);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions__console_8h_af3e11288cb5021b91949be5058816137_1af3e11288cb5021b91949be5058816137" kindref="member">ASSERT</ref>(<sp/>bInserted,<sp/></highlight><highlight class="stringliteral">&quot;Transform<sp/>not<sp/>inserted<sp/>or<sp/>value<sp/>already<sp/>in<sp/>the<sp/>unordered_map!&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="173"><highlight class="normal">}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="176" refid="classIImGuiConstantBufferVisitor_a7bdc512111781579a0d0701c6a040fac_1a7bdc512111781579a0d0701c6a040fac" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classIImGuiConstantBufferVisitor_a7bdc512111781579a0d0701c6a040fac_1a7bdc512111781579a0d0701c6a040fac" kindref="member">IImGuiConstantBufferVisitor::setMaterial</ref>(<sp/><ref refid="classMaterial" kindref="compound">Material</ref><sp/>*pMaterial<sp/>)</highlight></codeline>
<codeline lineno="177"><highlight class="normal">{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classIImGuiConstantBufferVisitor_a4fee37fe08c11418ceca1a6bdb367788_1a4fee37fe08c11418ceca1a6bdb367788" kindref="member">m_pMaterial</ref><sp/>=<sp/>pMaterial;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>++<ref refid="classIImGuiConstantBufferVisitor_acc45e30237d340dfe1b62041233efdc9_1acc45e30237d340dfe1b62041233efdc9" kindref="member">m_materialId</ref>;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classIImGuiConstantBufferVisitor_a806f42448e8052c41dd58b44670da987_1a806f42448e8052c41dd58b44670da987" kindref="member">onSetMaterial</ref>();</highlight></codeline>
<codeline lineno="181"><highlight class="normal">}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183" refid="classIImGuiConstantBufferVisitor_ab4925bd7f0cadefc621eb971cfa0d2b2_1ab4925bd7f0cadefc621eb971cfa0d2b2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classIImGuiConstantBufferVisitor_ab4925bd7f0cadefc621eb971cfa0d2b2_1ab4925bd7f0cadefc621eb971cfa0d2b2" kindref="member">IImGuiConstantBufferVisitor::visit</ref>(<sp/><ref refid="classcon_1_1CBuffer" kindref="compound">con::CBuffer</ref><sp/>&amp;cb<sp/>)</highlight></codeline>
<codeline lineno="184"><highlight class="normal">{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>++<ref refid="classIImGuiConstantBufferVisitor_a9ce95c32cd3c9715383315d393c12edd_1a9ce95c32cd3c9715383315d393c12edd" kindref="member">m_imguiId</ref>;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classIImGuiConstantBufferVisitor_a8efe889764e6bfd605b37d27581dc35a_1a8efe889764e6bfd605b37d27581dc35a" kindref="member">onVisit</ref>(<sp/>cb<sp/>);</highlight></codeline>
<codeline lineno="187"><highlight class="normal">}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="190" refid="classImguiConstantBufferVisitorShowcase_abeb49147681d12eb12a7559f144c3177_1abeb49147681d12eb12a7559f144c3177" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classImguiConstantBufferVisitorShowcase_abeb49147681d12eb12a7559f144c3177_1abeb49147681d12eb12a7559f144c3177" kindref="member">ImguiConstantBufferVisitorShowcase::onVisit</ref>(<sp/><ref refid="classcon_1_1CBuffer" kindref="compound">con::CBuffer</ref><sp/>&amp;cb<sp/>)</highlight></codeline>
<codeline lineno="191"><highlight class="normal">{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bDirty<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>dirtyCheck<sp/>=<sp/>[&amp;bDirty](<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bChanged<sp/>)</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bDirty<sp/>=<sp/>bDirty<sp/>||<sp/>bChanged;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>tagImGuiWidget<sp/>=<sp/>[imguiNodeLabel<sp/>=<sp/>std::string{},</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strImguiId<sp/>=<sp/></highlight><highlight class="charliteral">&apos;#&apos;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(<sp/><ref refid="classIImGuiConstantBufferVisitor_a9ce95c32cd3c9715383315d393c12edd_1a9ce95c32cd3c9715383315d393c12edd" kindref="member">m_imguiId</ref><sp/>)]</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*label<sp/>)<sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imguiNodeLabel<sp/>=<sp/>label<sp/>+<sp/>strImguiId;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>imguiNodeLabel.c_str();</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>query<sp/>the<sp/>Mesh&apos;s<sp/>Constant<sp/>Buffer<sp/>for<sp/>available<sp/>CB<sp/>Elements<sp/>and<sp/>display<sp/>ImGui<sp/>controls<sp/>for<sp/>those<sp/>available</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;el<sp/>=<sp/>cb[</highlight><highlight class="stringliteral">&quot;scale&quot;</highlight><highlight class="normal">];<sp/>el.isValid()<sp/>)</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dirtyCheck(<sp/>ImGui::SliderFloat(<sp/>tagImGuiWidget(<sp/></highlight><highlight class="stringliteral">&quot;Scale&quot;</highlight><highlight class="normal"><sp/>),<sp/>&amp;el,<sp/>1.0f,<sp/>2.0f,<sp/></highlight><highlight class="stringliteral">&quot;%.3f&quot;</highlight><highlight class="normal">,<sp/>3.5f<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;el<sp/>=<sp/>cb[</highlight><highlight class="stringliteral">&quot;offset&quot;</highlight><highlight class="normal">];<sp/>el.isValid()<sp/>)</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dirtyCheck(<sp/>ImGui::SliderFloat(<sp/>tagImGuiWidget(<sp/></highlight><highlight class="stringliteral">&quot;offset&quot;</highlight><highlight class="normal"><sp/>),<sp/>&amp;el,<sp/>0.0f,<sp/>1.0f,<sp/></highlight><highlight class="stringliteral">&quot;%.3f&quot;</highlight><highlight class="normal">,<sp/>2.5f<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;el<sp/>=<sp/>cb[</highlight><highlight class="stringliteral">&quot;materialColor&quot;</highlight><highlight class="normal">];<sp/>el.isValid()<sp/>)</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dirtyCheck(<sp/>ImGui::ColorPicker4(<sp/>tagImGuiWidget(<sp/></highlight><highlight class="stringliteral">&quot;Diff.<sp/>Color&quot;</highlight><highlight class="normal"><sp/>),<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>&amp;</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">dx::XMFLOAT4&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>el<sp/>)<sp/>)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;el<sp/>=<sp/>cb[</highlight><highlight class="stringliteral">&quot;modelSpecularColor&quot;</highlight><highlight class="normal">];<sp/>el.isValid()<sp/>)</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dirtyCheck(<sp/>ImGui::ColorPicker3(<sp/>tagImGuiWidget(<sp/></highlight><highlight class="stringliteral">&quot;Spec.<sp/>Color&quot;</highlight><highlight class="normal"><sp/>),<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>&amp;</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">dx::XMFLOAT3&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>el<sp/>)<sp/>)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;el<sp/>=<sp/>cb[</highlight><highlight class="stringliteral">&quot;modelSpecularGloss&quot;</highlight><highlight class="normal">];<sp/>el.isValid()<sp/>)</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dirtyCheck(<sp/>ImGui::SliderFloat(<sp/>tagImGuiWidget(<sp/></highlight><highlight class="stringliteral">&quot;Gloss&quot;</highlight><highlight class="normal"><sp/>),<sp/>&amp;el,<sp/>1.0f,<sp/>100.0f,<sp/></highlight><highlight class="stringliteral">&quot;%.1f&quot;</highlight><highlight class="normal">,<sp/>1.5f<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;el<sp/>=<sp/>cb[</highlight><highlight class="stringliteral">&quot;useSpecularMap&quot;</highlight><highlight class="normal">];<sp/>el.isValid()<sp/>)</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dirtyCheck(<sp/>ImGui::Checkbox(<sp/>tagImGuiWidget(<sp/></highlight><highlight class="stringliteral">&quot;Enable<sp/>Specular<sp/>Map&quot;</highlight><highlight class="normal"><sp/>),<sp/>&amp;el<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;el<sp/>=<sp/>cb[</highlight><highlight class="stringliteral">&quot;useNormalMap&quot;</highlight><highlight class="normal">];<sp/>el.isValid()<sp/>)</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dirtyCheck(<sp/>ImGui::Checkbox(<sp/>tagImGuiWidget(<sp/></highlight><highlight class="stringliteral">&quot;Enable<sp/>Normal<sp/>Map&quot;</highlight><highlight class="normal"><sp/>),<sp/>&amp;el<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;el<sp/>=<sp/>cb[</highlight><highlight class="stringliteral">&quot;normalMapWeight&quot;</highlight><highlight class="normal">];<sp/>el.isValid()<sp/>)</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dirtyCheck(<sp/>ImGui::SliderFloat(<sp/>tagImGuiWidget(<sp/></highlight><highlight class="stringliteral">&quot;Normal<sp/>Map<sp/>Weight&quot;</highlight><highlight class="normal"><sp/>),<sp/>&amp;el,<sp/>0.0f,<sp/>2.0f<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bDirty;</highlight></codeline>
<codeline lineno="248"><highlight class="normal">}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250" refid="classImguiConstantBufferVisitorShowcase_a5527d99456f1106040fdfdd737953e12_1a5527d99456f1106040fdfdd737953e12" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classImguiConstantBufferVisitorShowcase_a5527d99456f1106040fdfdd737953e12_1a5527d99456f1106040fdfdd737953e12" kindref="member">ImguiConstantBufferVisitorShowcase::onSetMaterial</ref>()</highlight></codeline>
<codeline lineno="251"><highlight class="normal">{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui::TextColored(<sp/>{0.4f,<sp/>1.0f,<sp/>0.6f,<sp/>1.0f},<sp/><ref refid="namespaceutil_a8ea22a55ee940e9d5aab2b939875ba4a_1a8ea22a55ee940e9d5aab2b939875ba4a" kindref="member">util::capitalizeFirstLetter</ref>(<sp/><ref refid="classIImGuiConstantBufferVisitor_a4fee37fe08c11418ceca1a6bdb367788_1a4fee37fe08c11418ceca1a6bdb367788" kindref="member">m_pMaterial</ref>-&gt;<ref refid="classMaterial_a671a93cd2a001254d233f5749f8a06e9_1a671a93cd2a001254d233f5749f8a06e9" kindref="member">getTargetPassName</ref>()<sp/>).c_str()<sp/>);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bActive<sp/>=<sp/><ref refid="classIImGuiConstantBufferVisitor_a4fee37fe08c11418ceca1a6bdb367788_1a4fee37fe08c11418ceca1a6bdb367788" kindref="member">m_pMaterial</ref>-&gt;<ref refid="classMaterial_a59ff37d29a111a4f2759e500cd70984f_1a59ff37d29a111a4f2759e500cd70984f" kindref="member">isEnabled</ref>();</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std::string_literals;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>ImGui::Checkbox(<sp/>(<sp/></highlight><highlight class="stringliteral">&quot;Material<sp/>Active#&quot;</highlight><highlight class="normal">s<sp/>+<sp/>std::to_string(<sp/><ref refid="classIImGuiConstantBufferVisitor_acc45e30237d340dfe1b62041233efdc9_1acc45e30237d340dfe1b62041233efdc9" kindref="member">m_materialId</ref><sp/>)<sp/>).c_str(),<sp/>&amp;bActive<sp/>);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classIImGuiConstantBufferVisitor_a4fee37fe08c11418ceca1a6bdb367788_1a4fee37fe08c11418ceca1a6bdb367788" kindref="member">m_pMaterial</ref>-&gt;<ref refid="classMaterial_ad1024f913a5eb06a9c15f6fd341dcc6f_1ad1024f913a5eb06a9c15f6fd341dcc6f" kindref="member">setEnabled</ref>(<sp/>bActive<sp/>);</highlight></codeline>
<codeline lineno="258"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/imgui_visitors.cpp"/>
  </compounddef>
</doxygen>
