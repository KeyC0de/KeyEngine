<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="classcon_1_1CBElementConstView" kind="class" language="C++" prot="public" final="yes">
    <compoundname>con::CBElementConstView</compoundname>
    <includes refid="dynamic__constant__buffer_8h" local="no">dynamic_constant_buffer.h</includes>
    <innerclass refid="classcon_1_1CBElementConstView_1_1Ptr" prot="public">con::CBElementConstView::Ptr</innerclass>
    <sectiondef kind="friend">
      <memberdef kind="friend" id="classcon_1_1CBElementConstView_a7c5d2ec80c60f2e00fb000cbb6889351_1a7c5d2ec80c60f2e00fb000cbb6889351" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class CBuffer</definition>
        <argsstring></argsstring>
        <name>CBuffer</name>
        <qualifiedname>con::CBElementConstView::CBuffer</qualifiedname>
        <param>
          <type><ref refid="classcon_1_1CBuffer" kindref="compound">CBuffer</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/dynamic_constant_buffer.h" line="346" column="14" bodyfile="inc/dynamic_constant_buffer.h" bodystart="346" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classcon_1_1CBElementConstView_a83e370b5ab0016fc84e62fa0b5553261_1a83e370b5ab0016fc84e62fa0b5553261" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>class</type>
        <definition>friend class CBElementView</definition>
        <argsstring></argsstring>
        <name>CBElementView</name>
        <qualifiedname>con::CBElementConstView::CBElementView</qualifiedname>
        <param>
          <type><ref refid="classcon_1_1CBElementView" kindref="compound">CBElementView</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/dynamic_constant_buffer.h" line="347" column="14" bodyfile="inc/dynamic_constant_buffer.h" bodystart="347" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classcon_1_1CBElementConstView_a1e0952b5880027af67784d3e179e361f_1a1e0952b5880027af67784d3e179e361f" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t con::CBElementConstView::m_arrayOffset</definition>
        <argsstring></argsstring>
        <name>m_arrayOffset</name>
        <qualifiedname>con::CBElementConstView::m_arrayOffset</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/dynamic_constant_buffer.h" line="349" column="8" bodyfile="inc/dynamic_constant_buffer.h" bodystart="349" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classcon_1_1CBElementConstView_a6da4bed7fd7719d277e8bad9b8951268_1a6da4bed7fd7719d277e8bad9b8951268" prot="private" static="no" mutable="no">
        <type>const <ref refid="classcon_1_1CBElement" kindref="compound">CBElement</ref> *</type>
        <definition>const CBElement* con::CBElementConstView::pLayout</definition>
        <argsstring></argsstring>
        <name>pLayout</name>
        <qualifiedname>con::CBElementConstView::pLayout</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/dynamic_constant_buffer.h" line="350" column="17" bodyfile="inc/dynamic_constant_buffer.h" bodystart="350" bodyend="-1"/>
        <referencedby refid="classcon_1_1CBElementConstView_a6ec6cf0ae7f6da181f4ccf2a58d0357a_1a6ec6cf0ae7f6da181f4ccf2a58d0357a" compoundref="dynamic__constant__buffer_8cpp" startline="339" endline="342">isValid</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classcon_1_1CBElementConstView_adb1503bdb941d7b733d1d3a6c2617540_1adb1503bdb941d7b733d1d3a6c2617540" prot="private" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* con::CBElementConstView::m_p</definition>
        <argsstring></argsstring>
        <name>m_p</name>
        <qualifiedname>con::CBElementConstView::m_p</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/dynamic_constant_buffer.h" line="351" column="12" bodyfile="inc/dynamic_constant_buffer.h" bodystart="351" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classcon_1_1CBElementConstView_a16746e814709c72b7f9c1038f912dc2c_1a16746e814709c72b7f9c1038f912dc2c" prot="private" static="no" const="no" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>con::CBElementConstView::CBElementConstView</definition>
        <argsstring>(const CBElement *pLayout, const char *pBytes, size_t offset) noexcept</argsstring>
        <name>CBElementConstView</name>
        <qualifiedname>con::CBElementConstView::CBElementConstView</qualifiedname>
        <param>
          <type>const <ref refid="classcon_1_1CBElement" kindref="compound">CBElement</ref> *</type>
          <declname>pLayout</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>pBytes</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/dynamic_constant_buffer.h" line="354" column="1" bodyfile="src/dynamic_constant_buffer.cpp" bodystart="360" bodyend="369"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classcon_1_1CBElementConstView_a6ec6cf0ae7f6da181f4ccf2a58d0357a_1a6ec6cf0ae7f6da181f4ccf2a58d0357a" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool con::CBElementConstView::isValid</definition>
        <argsstring>() const noexcept</argsstring>
        <name>isValid</name>
        <qualifiedname>con::CBElementConstView::isValid</qualifiedname>
        <briefdescription>
<para>check if the indexed element actually exists </para>
        </briefdescription>
        <detaileddescription>
<para>this is possible because if you key into a Struct with a nonexistent key</para>
<para>it will still return an Empty <ref refid="classcon_1_1CBElement" kindref="compound">CBElement</ref> that will enable this test, but will not enable any other kind of access </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/dynamic_constant_buffer.h" line="378" column="6" bodyfile="src/dynamic_constant_buffer.cpp" bodystart="339" bodyend="342"/>
      </memberdef>
      <memberdef kind="function" id="classcon_1_1CBElementConstView_a844290d59280911760030eaa2cfec0e1_1a844290d59280911760030eaa2cfec0e1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcon_1_1CBElementConstView" kindref="compound">CBElementConstView</ref></type>
        <definition>CBElementConstView con::CBElementConstView::operator[]</definition>
        <argsstring>(const std::string &amp;key) const cond_noex</argsstring>
        <name>operator[]</name>
        <qualifiedname>con::CBElementConstView::operator[]</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>key into the current element as a struct </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/dynamic_constant_buffer.h" line="380" column="20" bodyfile="src/dynamic_constant_buffer.cpp" bodystart="344" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="classcon_1_1CBElementConstView_a912de1ed3762cb7953a0e8e8a89efd4d_1a912de1ed3762cb7953a0e8e8a89efd4d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcon_1_1CBElementConstView" kindref="compound">CBElementConstView</ref></type>
        <definition>CBElementConstView con::CBElementConstView::operator[]</definition>
        <argsstring>(size_t index) const cond_noex</argsstring>
        <name>operator[]</name>
        <qualifiedname>con::CBElementConstView::operator[]</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/dynamic_constant_buffer.h" line="382" column="20" bodyfile="src/dynamic_constant_buffer.cpp" bodystart="349" bodyend="353"/>
      </memberdef>
      <memberdef kind="function" id="classcon_1_1CBElementConstView_aab1438cf73e4b125b7102b84ffad2655_1aab1438cf73e4b125b7102b84ffad2655" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classcon_1_1CBElementConstView_1_1Ptr" kindref="compound">Ptr</ref></type>
        <definition>CBElementConstView::Ptr con::CBElementConstView::operator&amp;</definition>
        <argsstring>() const cond_noex</argsstring>
        <name>operator&amp;</name>
        <qualifiedname>con::CBElementConstView::operator&amp;</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/dynamic_constant_buffer.h" line="384" column="5" bodyfile="src/dynamic_constant_buffer.cpp" bodystart="355" bodyend="358"/>
      </memberdef>
      <memberdef kind="function" id="classcon_1_1CBElementConstView_a6f91bfd0a80d8bab26f29ed77d24a5e4_1a6f91bfd0a80d8bab26f29ed77d24a5e4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>con::CBElementConstView::operator const T &amp;</definition>
        <argsstring>() const cond_noex</argsstring>
        <name>operator const T &amp;</name>
        <qualifiedname>con::CBElementConstView::operator const T &amp;</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/dynamic_constant_buffer.h" line="387" column="1" bodyfile="inc/dynamic_constant_buffer.h" bodystart="387" bodyend="391"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>proxy class that is emitted when keying/indexing into a Buffer </para>
    </briefdescription>
    <detaileddescription>
<para>=============================================================</para>
<para><simplesect kind="author"><para>KeyC0de </para>
</simplesect>
<simplesect kind="date"><para>2022/08/21 19:51</para>
</simplesect>
implement conversions/assignment that allows manipulation of the raw bytes of the Buffer.</para>
<para>This version is const, only supports reading</para>
<para>Refs can be further keyed/indexed to traverse the layout structure <heading level="1">m_arrayOffset is the offset that is built up by indexing into arrays; it accumulates as you nest inside arrays deeper into the structure - give it another name </heading>
</para>
    </detaileddescription>
    <collaborationgraph>
      <node id="2">
        <label>con::CBElement</label>
        <link refid="classcon_1_1CBElement"/>
      </node>
      <node id="1">
        <label>con::CBElementConstView</label>
        <link refid="classcon_1_1CBElementConstView"/>
        <childnode refid="2" relation="usage">
          <edgelabel>pLayout</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="inc/dynamic_constant_buffer.h" line="344" column="1" bodyfile="inc/dynamic_constant_buffer.h" bodystart="345" bodyend="392"/>
    <listofallmembers>
      <member refid="classcon_1_1CBElementConstView_a16746e814709c72b7f9c1038f912dc2c_1a16746e814709c72b7f9c1038f912dc2c" prot="private" virt="non-virtual"><scope>con::CBElementConstView</scope><name>CBElementConstView</name></member>
      <member refid="classcon_1_1CBElementConstView_a83e370b5ab0016fc84e62fa0b5553261_1a83e370b5ab0016fc84e62fa0b5553261" prot="private" virt="non-virtual"><scope>con::CBElementConstView</scope><name>CBElementView</name></member>
      <member refid="classcon_1_1CBElementConstView_a7c5d2ec80c60f2e00fb000cbb6889351_1a7c5d2ec80c60f2e00fb000cbb6889351" prot="private" virt="non-virtual"><scope>con::CBElementConstView</scope><name>CBuffer</name></member>
      <member refid="classcon_1_1CBElementConstView_a6ec6cf0ae7f6da181f4ccf2a58d0357a_1a6ec6cf0ae7f6da181f4ccf2a58d0357a" prot="public" virt="non-virtual"><scope>con::CBElementConstView</scope><name>isValid</name></member>
      <member refid="classcon_1_1CBElementConstView_a1e0952b5880027af67784d3e179e361f_1a1e0952b5880027af67784d3e179e361f" prot="private" virt="non-virtual"><scope>con::CBElementConstView</scope><name>m_arrayOffset</name></member>
      <member refid="classcon_1_1CBElementConstView_adb1503bdb941d7b733d1d3a6c2617540_1adb1503bdb941d7b733d1d3a6c2617540" prot="private" virt="non-virtual"><scope>con::CBElementConstView</scope><name>m_p</name></member>
      <member refid="classcon_1_1CBElementConstView_a6f91bfd0a80d8bab26f29ed77d24a5e4_1a6f91bfd0a80d8bab26f29ed77d24a5e4" prot="public" virt="non-virtual"><scope>con::CBElementConstView</scope><name>operator const T &amp;</name></member>
      <member refid="classcon_1_1CBElementConstView_aab1438cf73e4b125b7102b84ffad2655_1aab1438cf73e4b125b7102b84ffad2655" prot="public" virt="non-virtual"><scope>con::CBElementConstView</scope><name>operator&amp;</name></member>
      <member refid="classcon_1_1CBElementConstView_a844290d59280911760030eaa2cfec0e1_1a844290d59280911760030eaa2cfec0e1" prot="public" virt="non-virtual"><scope>con::CBElementConstView</scope><name>operator[]</name></member>
      <member refid="classcon_1_1CBElementConstView_a912de1ed3762cb7953a0e8e8a89efd4d_1a912de1ed3762cb7953a0e8e8a89efd4d" prot="public" virt="non-virtual"><scope>con::CBElementConstView</scope><name>operator[]</name></member>
      <member refid="classcon_1_1CBElementConstView_a6da4bed7fd7719d277e8bad9b8951268_1a6da4bed7fd7719d277e8bad9b8951268" prot="private" virt="non-virtual"><scope>con::CBElementConstView</scope><name>pLayout</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
