<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="bmp__loader_8cpp" kind="file" language="C++">
    <compoundname>bmp_loader.cpp</compoundname>
    <includes refid="bmp__loader_8h" local="yes">bmp_loader.h</includes>
    <includes refid="utils_8h" local="yes">utils.h</includes>
    <includes refid="math__utils_8h" local="yes">math_utils.h</includes>
    <includes refid="key__random_8h" local="yes">key_random.h</includes>
    <includes refid="perlin__noise_8h" local="yes">perlin_noise.h</includes>
    <includes refid="dynamic__vertex__buffer_8h" local="yes">dynamic_vertex_buffer.h</includes>
    <includes refid="assertions__console_8h" local="yes">assertions_console.h</includes>
    <incdepgraph>
      <node id="24">
        <label>assertions_console.h</label>
        <link refid="assertions__console_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>bmp_loader.h</label>
        <link refid="bmp__loader_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>color.h</label>
        <link refid="color_8h"/>
      </node>
      <node id="36">
        <label>dynamic_vertex_buffer.h</label>
        <link refid="dynamic__vertex__buffer_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>key_random.h</label>
        <link refid="key__random_8h"/>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>key_type_traits.h</label>
        <link refid="key__type__traits_8h"/>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>math_utils.h</label>
        <link refid="math__utils_8h"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>perlin_noise.h</label>
        <link refid="perlin__noise_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>utils.h</label>
        <link refid="utils_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>utils_global.h</label>
        <link refid="utils__global_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>winner.h</label>
        <link refid="winner_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/bmp_loader.cpp</label>
        <link refid="bmp__loader_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>DirectXMath.h</label>
      </node>
      <node id="9">
        <label>Windows.h</label>
      </node>
      <node id="19">
        <label>algorithm</label>
      </node>
      <node id="40">
        <label>assimp/scene.h</label>
      </node>
      <node id="15">
        <label>bitset</label>
      </node>
      <node id="17">
        <label>cinttypes</label>
      </node>
      <node id="29">
        <label>cmath</label>
      </node>
      <node id="16">
        <label>cstddef</label>
      </node>
      <node id="30">
        <label>cstdint</label>
      </node>
      <node id="38">
        <label>d3d11.h</label>
      </node>
      <node id="23">
        <label>execution</label>
      </node>
      <node id="4">
        <label>fstream</label>
      </node>
      <node id="5">
        <label>functional</label>
      </node>
      <node id="18">
        <label>future</label>
      </node>
      <node id="31">
        <label>iomanip</label>
      </node>
      <node id="13">
        <label>iostream</label>
      </node>
      <node id="21">
        <label>iterator</label>
      </node>
      <node id="32">
        <label>limits</label>
      </node>
      <node id="20">
        <label>numeric</label>
      </node>
      <node id="34">
        <label>random</label>
      </node>
      <node id="22">
        <label>regex</label>
      </node>
      <node id="8">
        <label>sdkddkver.h</label>
      </node>
      <node id="14">
        <label>set</label>
      </node>
      <node id="12">
        <label>sstream</label>
      </node>
      <node id="3">
        <label>string</label>
      </node>
      <node id="26">
        <label>type_traits</label>
      </node>
      <node id="39">
        <label>utility</label>
      </node>
      <node id="6">
        <label>vector</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="bmp__loader_8h" kindref="compound">bmp_loader.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="utils_8h" kindref="compound">utils.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="math__utils_8h" kindref="compound">math_utils.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="key__random_8h" kindref="compound">key_random.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="perlin__noise_8h" kindref="compound">perlin_noise.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="dynamic__vertex__buffer_8h" kindref="compound">dynamic_vertex_buffer.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="assertions__console_8h" kindref="compound">assertions_console.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10" refid="classBmpLoader_af42406771e5c8b53ed9bc7ae4f65ff8c_1af42406771e5c8b53ed9bc7ae4f65ff8c" refkind="member"><highlight class="normal"><ref refid="classBmpLoader_a4f49f7c797d93e19683423364696259a_1a4f49f7c797d93e19683423364696259a" kindref="member">BmpLoader::BmpLoader</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>filename<sp/>)</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>:</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>m_filename{filename},</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>m_file{filename,<sp/>std::ios::out<sp/>|<sp/>std::ios::in<sp/>|<sp/>std::ios::binary}</highlight></codeline>
<codeline lineno="14"><highlight class="normal">{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assertions__console_8h_af3e11288cb5021b91949be5058816137_1af3e11288cb5021b91949be5058816137" kindref="member">ASSERT</ref>(<sp/><ref refid="classBmpLoader_a511a88cbef035802afe02a3d837749f2_1a511a88cbef035802afe02a3d837749f2" kindref="member">m_file</ref>,<sp/></highlight><highlight class="stringliteral">&quot;File<sp/>is<sp/>missing!&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>.bmp<sp/>file<sp/>Implementation<sp/>details:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>3<sp/>bytes<sp/>are:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>42<sp/>4D<sp/>sizeOfFile<sp/>=<sp/>B<sp/>M<sp/>14<sp/>+<sp/>40<sp/>+<sp/>bytesOfColorDataIncludingPaddingSinceEachRowOfColorDataNeedsToBeAMultipleOf4Bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stored<sp/>in<sp/>low<sp/>endian<sp/>format<sp/>like<sp/>so:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>RGB(A)<sp/>per<sp/>pixel:<sp/>BB<sp/>GG<sp/>RR<sp/>(AA)<sp/>-&gt;<sp/>towards<sp/>greater<sp/>offsets/larger<sp/>addresses</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>padding<sp/>required<sp/>per<sp/>row:<sp/>[4<sp/>-<sp/>(widthInPixels<sp/>*<sp/>3<sp/>(or<sp/>4<sp/>if<sp/>using<sp/>Alpha)<sp/>%<sp/>4)]<sp/>%<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>[4<sp/>-<sp/>(w*3<sp/>%<sp/>4)]<sp/>%<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>padding<sp/>required<sp/>for<sp/>all<sp/>rows,<sp/>ie<sp/>the<sp/>entire<sp/>image:<sp/>padding<sp/>required<sp/>per<sp/>row<sp/>*<sp/>heighthInPixels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>example:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>size<sp/>of<sp/>the<sp/>row<sp/>in<sp/>bytes<sp/>for<sp/>a<sp/>14x12<sp/>pixel<sp/>image<sp/>is<sp/>14<sp/>*<sp/>3<sp/>=<sp/>42,<sp/>which<sp/>isn&apos;t<sp/>a<sp/>multiple<sp/>of<sp/>14</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>so<sp/>we<sp/>need<sp/>2<sp/>more<sp/>bytes<sp/>for<sp/>it<sp/>to<sp/>become<sp/>44<sp/>which<sp/>is<sp/>a<sp/>multiple<sp/>of<sp/>4.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>Thus<sp/>for<sp/>each<sp/>row<sp/>of<sp/>data<sp/>we<sp/>need<sp/>an<sp/>additional<sp/>2<sp/>Bytes<sp/>of<sp/>padding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>Total<sp/>size<sp/>=<sp/>(14<sp/>+<sp/>40)<sp/>+<sp/>(14<sp/>*<sp/>12)<sp/>*<sp/>3<sp/>+<sp/>(12<sp/>*<sp/>2)<sp/>=<sp/>582<sp/>B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(12<sp/>*<sp/>2)<sp/>=<sp/>24<sp/>B<sp/>is<sp/>the<sp/>size<sp/>of<sp/>the<sp/>padding<sp/>required<sp/>(there<sp/>are<sp/>heightInPixels<sp/>rows)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>example<sp/>2:<sp/>3x3<sp/>bmp<sp/>image<sp/>size<sp/>would<sp/>be<sp/>=<sp/>(14<sp/>+<sp/>40)<sp/>+<sp/>(3<sp/>*<sp/>3)<sp/>*<sp/>3<sp/>+<sp/>(3<sp/>*<sp/>3)<sp/>=<sp/>90<sp/>=<sp/>5A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row<sp/>size<sp/>is<sp/>9<sp/>so<sp/>we<sp/>need<sp/>3<sp/>more<sp/>B<sp/>to<sp/>be<sp/>a<sp/>multiple<sp/>of<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>after<sp/>the<sp/>first<sp/>3<sp/>bytes<sp/>the<sp/>next<sp/>bytes<sp/>up<sp/>to<sp/>and<sp/>including<sp/>the<sp/>tenth<sp/>byte<sp/>(09)<sp/>are<sp/>filled<sp/>with<sp/>0s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>next<sp/>byte<sp/>(0A)<sp/>contains<sp/>the<sp/>offset<sp/>to<sp/>the<sp/>starting<sp/>address<sp/>of<sp/>the<sp/>bitmap<sp/>image<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>which<sp/>for<sp/>the<sp/>2nd<sp/>example<sp/>above<sp/>should<sp/>be:<sp/>54<sp/>=<sp/>36H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>next<sp/>bytes<sp/>up<sp/>to<sp/>the<sp/>14th<sp/>are<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>starting<sp/>with<sp/>the<sp/>next<sp/>byte<sp/>0E<sp/>we<sp/>have<sp/>40<sp/>Bytes<sp/>of<sp/>the<sp/>DIB<sp/>header,<sp/>which<sp/>go<sp/>like<sp/>this:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>28<sp/>(hex<sp/>for<sp/>40)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>00<sp/>00<sp/>00<sp/>(4<sp/>B<sp/>for<sp/>the<sp/>header<sp/>of<sp/>the<sp/>&apos;DIB<sp/>header&apos;<sp/>just<sp/>like<sp/>the<sp/>header<sp/>of<sp/>the<sp/>entire<sp/>bmp<sp/>file)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>next<sp/>goes<sp/>the<sp/>width<sp/>of<sp/>the<sp/>image<sp/>in<sp/>pixels<sp/>occupying<sp/>4<sp/>Bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>always<sp/>following<sp/>the<sp/>2nd<sp/>example<sp/>above<sp/>would<sp/>be<sp/>like<sp/>this:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>03<sp/>00<sp/>00<sp/>00</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>next<sp/>goes<sp/>the<sp/>height<sp/>of<sp/>the<sp/>image:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>03<sp/>00<sp/>00<sp/>00</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>next<sp/>two<sp/>bytes<sp/>is<sp/>the<sp/>size<sp/>of<sp/>the<sp/>color<sp/>planes<sp/>which<sp/>has<sp/>to<sp/>be<sp/>01<sp/>00</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>next<sp/>two<sp/>bytes<sp/>are<sp/>the<sp/>bit<sp/>depth<sp/>which<sp/>is<sp/>24bbp<sp/>here<sp/>=<sp/>18<sp/>00</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>next<sp/>four<sp/>bytes<sp/>occupy<sp/>the<sp/>compression<sp/>method</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>00<sp/>00<sp/>00<sp/>00<sp/>(no<sp/>compression<sp/>method<sp/>here)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>next<sp/>(offset<sp/>22Hex)<sp/>goes<sp/>the<sp/>size<sp/>of<sp/>the<sp/>image<sp/>data<sp/>=<sp/>(3<sp/>*<sp/>3)<sp/>*<sp/>3<sp/>+<sp/>(3<sp/>*<sp/>3)<sp/>=<sp/>36<sp/>B<sp/>=<sp/>24<sp/>Hex,<sp/>so:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>24<sp/>00<sp/>00<sp/>00<sp/>(occupying<sp/>4<sp/>bytes)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>next<sp/>goes<sp/>the<sp/>horizontal<sp/>and<sp/>the<sp/>vertical<sp/>resolution<sp/>of<sp/>the<sp/>image<sp/>(occupying<sp/>4<sp/>bytes<sp/>each),<sp/>so:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>03<sp/>00<sp/>00<sp/>00<sp/>03<sp/>00<sp/>00<sp/>00</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>next<sp/>up<sp/>goes<sp/>the<sp/>number<sp/>of<sp/>colors<sp/>in<sp/>the<sp/>color<sp/>pallet<sp/>(set<sp/>to<sp/>0<sp/>to<sp/>get<sp/>the<sp/>default)<sp/>-<sp/>occupying<sp/>4<sp/>bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>00<sp/>00<sp/>00<sp/>00</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>last<sp/>4<sp/>bytes<sp/>of<sp/>the<sp/>dib<sp/>header<sp/>are<sp/>zeros</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>00<sp/>00<sp/>00<sp/>00</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>we<sp/>start<sp/>with<sp/>the<sp/>actual<sp/>image<sp/>content<sp/>(starting<sp/>at<sp/>offset<sp/>36Hex),<sp/>which<sp/>contain<sp/>3Bpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>pixels<sp/>set<sp/>start<sp/>from<sp/>the<sp/>bottom<sp/>left<sp/>corner<sp/>(first<sp/>row<sp/>is<sp/>bottom<sp/>row)<sp/>and<sp/>ending<sp/>with<sp/>the<sp/>top<sp/>right<sp/>pixel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>a<sp/>zig-zag<sp/>pattern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Also<sp/>note<sp/>that<sp/>if<sp/>the<sp/>image<sp/>height<sp/>is<sp/>negative<sp/>the<sp/>order<sp/>is<sp/>reversed<sp/>(ie<sp/>the<sp/>bytes<sp/>we<sp/>start<sp/>reading<sp/>from<sp/>belong<sp/>to<sp/>the<sp/>top<sp/>left<sp/>pixel,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>could<sp/>examine<sp/>this<sp/>by<sp/>checking<sp/>the<sp/>height<sp/>value<sp/>of<sp/>the<sp/>file<sp/>first<sp/>and<sp/>the<sp/>code<sp/>here<sp/>doesn&apos;t<sp/>account<sp/>for<sp/>this.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bitmap<sp/>data<sp/>is<sp/>read/written<sp/>from<sp/>bottom<sp/>line<sp/>to<sp/>the<sp/>top<sp/>by<sp/>default</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>example<sp/>completed:<sp/>&quot;my_first_image.bmp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assertions__console_8h_af3e11288cb5021b91949be5058816137_1af3e11288cb5021b91949be5058816137" kindref="member">ASSERT</ref>(<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>BITMAPFILEHEADER<sp/>==<sp/>14,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>BITMAPFILEHEADER!&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classBmpLoader_a511a88cbef035802afe02a3d837749f2_1a511a88cbef035802afe02a3d837749f2" kindref="member">m_file</ref>.read(<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>&amp;<ref refid="classBmpLoader_afb1c02f31a2cce78d8270dfea476eab5_1afb1c02f31a2cce78d8270dfea476eab5" kindref="member">m_bmpFileHeader</ref><sp/>),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/><ref refid="classBmpLoader_afb1c02f31a2cce78d8270dfea476eab5_1afb1c02f31a2cce78d8270dfea476eab5" kindref="member">m_bmpFileHeader</ref><sp/>);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_bmpFileHeader.bfType<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>the<sp/>file<sp/>type;<sp/>must<sp/>be<sp/>&quot;BM&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_bmpFileHeader.bfSize<sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/>size<sp/>of<sp/>the<sp/>bitmap<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classBmpLoader_a511a88cbef035802afe02a3d837749f2_1a511a88cbef035802afe02a3d837749f2" kindref="member">m_file</ref>.read(<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>&amp;<ref refid="classBmpLoader_a5ba3892b7debe81a24937a0b3492f997_1a5ba3892b7debe81a24937a0b3492f997" kindref="member">m_bmpInfoHeader</ref><sp/>),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/><ref refid="classBmpLoader_a5ba3892b7debe81a24937a0b3492f997_1a5ba3892b7debe81a24937a0b3492f997" kindref="member">m_bmpInfoHeader</ref><sp/>);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assertions__console_8h_af3e11288cb5021b91949be5058816137_1af3e11288cb5021b91949be5058816137" kindref="member">ASSERT</ref>(<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>BITMAPINFOHEADER<sp/>==<sp/>40,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>BITMAPFILEHEADER&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>m_bmpInfoHeader.biBitCount<sp/><sp/><sp/>//<sp/>bits<sp/>per<sp/>pixel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>biWidth<sp/>=<sp/>width<sp/>of<sp/>the<sp/>bitmap,<sp/>in<sp/>pixels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>biHeight<sp/>=<sp/>height<sp/>of<sp/>the<sp/>bitmap,<sp/>in<sp/>pixels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classBmpLoader_a7a815ea0daafb1cf78b9bd26c0d72fd5_1a7a815ea0daafb1cf78b9bd26c0d72fd5" kindref="member">m_bitCount</ref><sp/>=<sp/><ref refid="classBmpLoader_a5ba3892b7debe81a24937a0b3492f997_1a5ba3892b7debe81a24937a0b3492f997" kindref="member">m_bmpInfoHeader</ref>.biBitCount;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assertions__console_8h_af3e11288cb5021b91949be5058816137_1af3e11288cb5021b91949be5058816137" kindref="member">ASSERT</ref>(<sp/><ref refid="classBmpLoader_a7a815ea0daafb1cf78b9bd26c0d72fd5_1a7a815ea0daafb1cf78b9bd26c0d72fd5" kindref="member">m_bitCount</ref><sp/>==<sp/>24<sp/>||<sp/><ref refid="classBmpLoader_a7a815ea0daafb1cf78b9bd26c0d72fd5_1a7a815ea0daafb1cf78b9bd26c0d72fd5" kindref="member">m_bitCount</ref><sp/>==<sp/>32,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>bits/pixel!&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assertions__console_8h_af3e11288cb5021b91949be5058816137_1af3e11288cb5021b91949be5058816137" kindref="member">ASSERT</ref>(<sp/><ref refid="classBmpLoader_a5ba3892b7debe81a24937a0b3492f997_1a5ba3892b7debe81a24937a0b3492f997" kindref="member">m_bmpInfoHeader</ref>.biCompression<sp/>==<sp/>BI_RGB,<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>RGB<sp/>compression!&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classBmpLoader_a7e35757a22047e5c9a49e56cdde46923_1a7e35757a22047e5c9a49e56cdde46923" kindref="member">m_width</ref><sp/>=<sp/><ref refid="classBmpLoader_a5ba3892b7debe81a24937a0b3492f997_1a5ba3892b7debe81a24937a0b3492f997" kindref="member">m_bmpInfoHeader</ref>.biWidth;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classBmpLoader_af2275302ca1b1cb5827e884e553e931e_1af2275302ca1b1cb5827e884e553e931e" kindref="member">m_height</ref><sp/>=<sp/><ref refid="classBmpLoader_a5ba3892b7debe81a24937a0b3492f997_1a5ba3892b7debe81a24937a0b3492f997" kindref="member">m_bmpInfoHeader</ref>.biHeight;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classBmpLoader_aaaca1f056800ab156ae35e10aebe3eb5_1aaaca1f056800ab156ae35e10aebe3eb5" kindref="member">flush</ref>();</highlight></codeline>
<codeline lineno="92"><highlight class="normal">}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94" refid="classBmpLoader_a9cbba122836cb183499d1b5bf390da9d_1a9cbba122836cb183499d1b5bf390da9d" refkind="member"><highlight class="normal"><ref refid="classBmpLoader_a4f49f7c797d93e19683423364696259a_1a4f49f7c797d93e19683423364696259a" kindref="member">BmpLoader::BmpLoader</ref>(<sp/><ref refid="classBmpLoader" kindref="compound">BmpLoader</ref><sp/>&amp;&amp;rhs<sp/>)<sp/>noexcept</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>:</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>m_width{rhs.m_width},</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>m_height{rhs.m_height},</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>m_filename{rhs.m_filename},</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>m_bitCount{rhs.m_bitCount},</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>m_bmpFileHeader{rhs.m_bmpFileHeader},</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>m_bmpInfoHeader{rhs.m_bmpInfoHeader},</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>m_file{std::move(<sp/>rhs.m_file<sp/>)<sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal">{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>rhs.m_width<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>rhs.m_height<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108" refid="classBmpLoader_a31a45b54c585cebb13f99190226d479e_1a31a45b54c585cebb13f99190226d479e" refkind="member"><highlight class="normal"><ref refid="classBmpLoader" kindref="compound">BmpLoader</ref>&amp;<sp/><ref refid="classBmpLoader_a67d0ea1111e24756493283f95587ec1e_1a67d0ea1111e24756493283f95587ec1e" kindref="member">BmpLoader::operator=</ref>(<sp/><ref refid="classBmpLoader" kindref="compound">BmpLoader</ref><sp/>&amp;&amp;rhs<sp/>)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal">{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classBmpLoader" kindref="compound">BmpLoader</ref><sp/>tmp{std::move(<sp/>rhs<sp/>)};</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>std::swap(<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>tmp<sp/>);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="113"><highlight class="normal">}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115" refid="classBmpLoader_a707ac0783cfaff0f2d20ccb08adae5c4_1a707ac0783cfaff0f2d20ccb08adae5c4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classBmpLoader_a707ac0783cfaff0f2d20ccb08adae5c4_1a707ac0783cfaff0f2d20ccb08adae5c4" kindref="member">BmpLoader::getWidth</ref>()<sp/>const<sp/>noexcept</highlight></codeline>
<codeline lineno="116"><highlight class="normal">{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classBmpLoader_a7e35757a22047e5c9a49e56cdde46923_1a7e35757a22047e5c9a49e56cdde46923" kindref="member">m_width</ref>;</highlight></codeline>
<codeline lineno="118"><highlight class="normal">}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120" refid="classBmpLoader_a992bee22fc9d7a7d6baf6e50e052d9af_1a992bee22fc9d7a7d6baf6e50e052d9af" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classBmpLoader_a992bee22fc9d7a7d6baf6e50e052d9af_1a992bee22fc9d7a7d6baf6e50e052d9af" kindref="member">BmpLoader::getHeight</ref>()<sp/>const<sp/>noexcept</highlight></codeline>
<codeline lineno="121"><highlight class="normal">{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classBmpLoader_af2275302ca1b1cb5827e884e553e931e_1af2275302ca1b1cb5827e884e553e931e" kindref="member">m_height</ref>;</highlight></codeline>
<codeline lineno="123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125" refid="classBmpLoader_ab1a8509180849db8df178210044e6517_1ab1a8509180849db8df178210044e6517" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><ref refid="classBmpLoader_ab1a8509180849db8df178210044e6517_1ab1a8509180849db8df178210044e6517" kindref="member">BmpLoader::getBitCount</ref>()<sp/>const<sp/>noexcept</highlight></codeline>
<codeline lineno="126"><highlight class="normal">{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classBmpLoader_a7a815ea0daafb1cf78b9bd26c0d72fd5_1a7a815ea0daafb1cf78b9bd26c0d72fd5" kindref="member">m_bitCount</ref>;</highlight></codeline>
<codeline lineno="128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130" refid="classBmpLoader_aaaca1f056800ab156ae35e10aebe3eb5_1aaaca1f056800ab156ae35e10aebe3eb5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classBmpLoader_aaaca1f056800ab156ae35e10aebe3eb5_1aaaca1f056800ab156ae35e10aebe3eb5" kindref="member">BmpLoader::flush</ref>()<sp/>noexcept</highlight></codeline>
<codeline lineno="131"><highlight class="normal">{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classBmpLoader_a511a88cbef035802afe02a3d837749f2_1a511a88cbef035802afe02a3d837749f2" kindref="member">m_file</ref>.<ref refid="classBmpLoader_aaaca1f056800ab156ae35e10aebe3eb5_1aaaca1f056800ab156ae35e10aebe3eb5" kindref="member">flush</ref>();</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classBmpLoader_a511a88cbef035802afe02a3d837749f2_1a511a88cbef035802afe02a3d837749f2" kindref="member">m_file</ref>.close();</highlight></codeline>
<codeline lineno="134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136" refid="classBmpLoader_a6fdcb726696c80848ef8e69219e8dd16_1a6fdcb726696c80848ef8e69219e8dd16" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classBmpLoader_a6fdcb726696c80848ef8e69219e8dd16_1a6fdcb726696c80848ef8e69219e8dd16" kindref="member">BmpLoader::applyPerlinNoise</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;filename<sp/></highlight><highlight class="comment">/*=<sp/>&quot;&quot;*/</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="137"><highlight class="normal">{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classBmpLoader_a7a815ea0daafb1cf78b9bd26c0d72fd5_1a7a815ea0daafb1cf78b9bd26c0d72fd5" kindref="member">m_bitCount</ref><sp/>==<sp/>32<sp/>)</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="assertions__console_8h_af3e11288cb5021b91949be5058816137_1af3e11288cb5021b91949be5058816137" kindref="member">ASSERT</ref>(<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;BmpLoader<sp/>not<sp/>ready<sp/>for<sp/>32<sp/>bit<sp/>depth<sp/>BGRA<sp/>file<sp/>loading!&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>numImageElements<sp/>=<sp/><ref refid="classBmpLoader_a7e35757a22047e5c9a49e56cdde46923_1a7e35757a22047e5c9a49e56cdde46923" kindref="member">m_width</ref><sp/>*<sp/><ref refid="classBmpLoader_af2275302ca1b1cb5827e884e553e931e_1af2275302ca1b1cb5827e884e553e931e" kindref="member">m_height</ref>;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionBmpLoader_1_1ImageData" kindref="compound">ImageData</ref><sp/>*img<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="unionBmpLoader_1_1ImageData" kindref="compound">ImageData</ref>[numImageElements];</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>perlin<sp/>=<sp/>[]<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y<sp/>)<sp/>-&gt;<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classPerlinNoise" kindref="compound">PerlinNoise</ref><sp/>perlin;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classKeyRandom" kindref="compound">KeyRandom</ref><sp/>r;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>moreRandom<sp/>=<sp/>r.<ref refid="classKeyRandom_a18445a55faeecb68c06335b7df36b4f7_1a18445a55faeecb68c06335b7df36b4f7" kindref="member">getRandomIntInRange</ref>(<sp/>64,<sp/>256<sp/>);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lessRandom<sp/>=<sp/>r.<ref refid="classKeyRandom_a18445a55faeecb68c06335b7df36b4f7_1a18445a55faeecb68c06335b7df36b4f7" kindref="member">getRandomIntInRange</ref>(<sp/>8,<sp/>32<sp/>);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>wood<sp/>like<sp/>structure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>lessRandom<sp/>*<sp/>perlin.<ref refid="classPerlinNoise_afdfbe32029dca3ef7f16e80e5cc29c48_1afdfbe32029dca3ef7f16e80e5cc29c48" kindref="member">noise</ref>(<sp/>x,<sp/>y,<sp/>moreRandom<sp/>);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>n<sp/>-<sp/>floor(<sp/>n<sp/>)<sp/>)<sp/>*<sp/>255.0;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>std::function&lt;double(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)&gt;<sp/>perlinNoiseFilter<sp/>=<sp/>std::bind(<sp/>perlin,<sp/>std::placeholders::_1,<sp/>std::placeholders::_2<sp/>);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//auto<sp/>exponent<sp/>=<sp/>[]<sp/>(<sp/>const<sp/>double<sp/>x,<sp/>const<sp/>double<sp/>y<sp/>)<sp/>-&gt;<sp/>double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//const<sp/>int<sp/>power<sp/>=<sp/>2;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//return<sp/>val<sp/>*<sp/>val;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::function&lt;double(double,<sp/>double)&gt;<sp/>gaussianFilter<sp/>=<sp/>std::bind(<sp/>util::gaussian2d&lt;double&gt;,<sp/>std::placeholders::_1,<sp/>std::placeholders::_2,<sp/>1.0<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::function&lt;double(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)&gt;&gt;<sp/>imageFilters;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>imageFilters.reserve(<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>imageFilters.emplace_back(<sp/>std::move(<sp/>perlinNoiseFilter<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//imageFilters.emplace_back(<sp/>std::move(<sp/>gaussianFilter<sp/>)<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classBmpLoader_aeef90c16086d9134cb1724f28688dce7_1aeef90c16086d9134cb1724f28688dce7" kindref="member">generateData</ref>(<sp/>img,<sp/>imageFilters,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>filename<sp/>);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classBmpLoader_ab846077b54999db0ecc1f19ecec9b9c2_1ab846077b54999db0ecc1f19ecec9b9c2" kindref="member">writeData</ref>(<sp/>img,<sp/>filename<sp/>);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>img;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182" refid="classBmpLoader_a9294d410ab0ada7721273ccefcde68e3_1a9294d410ab0ada7721273ccefcde68e3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classBmpLoader_a9294d410ab0ada7721273ccefcde68e3_1a9294d410ab0ada7721273ccefcde68e3" kindref="member">BmpLoader::readData</ref>(<sp/>_Inout_<sp/><ref refid="unionBmpLoader_1_1ImageData" kindref="compound">ImageData</ref><sp/>*img,</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;filename<sp/></highlight><highlight class="comment">/*=<sp/>&quot;&quot;*/</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="184"><highlight class="normal">{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classBmpLoader_a511a88cbef035802afe02a3d837749f2_1a511a88cbef035802afe02a3d837749f2" kindref="member">m_file</ref>.open(<sp/>filename<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>?<sp/><ref refid="classBmpLoader_ad992b5b9fefe9e21e48efa269bbffee6_1ad992b5b9fefe9e21e48efa269bbffee6" kindref="member">m_filename</ref><sp/>:<sp/>filename,<sp/>std::ios::in<sp/>|<sp/>std::ios::binary<sp/>);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>for<sp/>reverse<sp/>row<sp/>order<sp/>and<sp/>control</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>y<sp/>loop<sp/>accordingly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>yStart;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>yEnd;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dy;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classBmpLoader_a5ba3892b7debe81a24937a0b3492f997_1a5ba3892b7debe81a24937a0b3492f997" kindref="member">m_bmpInfoHeader</ref>.biHeight<sp/>&lt;<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classBmpLoader_af2275302ca1b1cb5827e884e553e931e_1af2275302ca1b1cb5827e884e553e931e" kindref="member">m_height</ref><sp/>=<sp/>-<ref refid="classBmpLoader_a5ba3892b7debe81a24937a0b3492f997_1a5ba3892b7debe81a24937a0b3492f997" kindref="member">m_bmpInfoHeader</ref>.biHeight;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yStart<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yEnd<sp/>=<sp/><ref refid="classBmpLoader_af2275302ca1b1cb5827e884e553e931e_1af2275302ca1b1cb5827e884e553e931e" kindref="member">m_height</ref>;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dy<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classBmpLoader_af2275302ca1b1cb5827e884e553e931e_1af2275302ca1b1cb5827e884e553e931e" kindref="member">m_height</ref><sp/>=<sp/><ref refid="classBmpLoader_a5ba3892b7debe81a24937a0b3492f997_1a5ba3892b7debe81a24937a0b3492f997" kindref="member">m_bmpInfoHeader</ref>.biHeight;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yStart<sp/>=<sp/><ref refid="classBmpLoader_af2275302ca1b1cb5827e884e553e931e_1af2275302ca1b1cb5827e884e553e931e" kindref="member">m_height</ref><sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yEnd<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dy<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classBmpLoader_a511a88cbef035802afe02a3d837749f2_1a511a88cbef035802afe02a3d837749f2" kindref="member">m_file</ref>.seekg(<sp/><ref refid="classBmpLoader_afb1c02f31a2cce78d8270dfea476eab5_1afb1c02f31a2cce78d8270dfea476eab5" kindref="member">m_bmpFileHeader</ref>.bfOffBits<sp/>);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>padding<sp/>=<sp/>(<sp/>4<sp/>-<sp/>(<sp/><ref refid="classBmpLoader_a7e35757a22047e5c9a49e56cdde46923_1a7e35757a22047e5c9a49e56cdde46923" kindref="member">m_width</ref><sp/>*<sp/>3<sp/>)<sp/>%<sp/>4<sp/>)<sp/>%<sp/>4;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>b32Bits<sp/>=<sp/><ref refid="classBmpLoader_a7a815ea0daafb1cf78b9bd26c0d72fd5_1a7a815ea0daafb1cf78b9bd26c0d72fd5" kindref="member">m_bitCount</ref><sp/>==<sp/>32ui16;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>visit<sp/>every<sp/>pixel<sp/>of<sp/>the<sp/>image<sp/>and<sp/>assign<sp/>a<sp/>color<sp/>generated<sp/>with<sp/>Perlin<sp/>noise</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>yStart;<sp/>y<sp/>!=<sp/>yEnd;<sp/>y<sp/>+=<sp/>dy<sp/>)</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/><ref refid="classBmpLoader_a7e35757a22047e5c9a49e56cdde46923_1a7e35757a22047e5c9a49e56cdde46923" kindref="member">m_width</ref>;<sp/>++x<sp/>)</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>blue<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)<sp/><ref refid="classBmpLoader_a511a88cbef035802afe02a3d837749f2_1a511a88cbef035802afe02a3d837749f2" kindref="member">m_file</ref>.get();</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>green<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)<sp/><ref refid="classBmpLoader_a511a88cbef035802afe02a3d837749f2_1a511a88cbef035802afe02a3d837749f2" kindref="member">m_file</ref>.get();</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>red<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)<sp/><ref refid="classBmpLoader_a511a88cbef035802afe02a3d837749f2_1a511a88cbef035802afe02a3d837749f2" kindref="member">m_file</ref>.get();</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;ar<sp/>=<sp/>img[y<sp/>*<sp/><ref refid="classBmpLoader_a7e35757a22047e5c9a49e56cdde46923_1a7e35757a22047e5c9a49e56cdde46923" kindref="member">m_width</ref><sp/>+<sp/>x];</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!b32Bits<sp/>)</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ar._24bit.b<sp/>=<sp/>blue;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ar._24bit.g<sp/>=<sp/>green;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ar._24bit.r<sp/>=<sp/>red;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>alpha<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)<sp/><ref refid="classBmpLoader_a511a88cbef035802afe02a3d837749f2_1a511a88cbef035802afe02a3d837749f2" kindref="member">m_file</ref>.get();</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ar._32bit<sp/>=<sp/><ref refid="structColorBGRA" kindref="compound">ColorBGRA</ref>{red,<sp/>green,<sp/>blue,<sp/>alpha};</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>b32Bits<sp/>)</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classBmpLoader_a511a88cbef035802afe02a3d837749f2_1a511a88cbef035802afe02a3d837749f2" kindref="member">m_file</ref>.seekg(<sp/>1,<sp/>std::ios::cur<sp/>);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!b32Bits<sp/>)</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classBmpLoader_a511a88cbef035802afe02a3d837749f2_1a511a88cbef035802afe02a3d837749f2" kindref="member">m_file</ref>.seekg(<sp/>padding,<sp/>std::ios::cur<sp/>);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classBmpLoader_aaaca1f056800ab156ae35e10aebe3eb5_1aaaca1f056800ab156ae35e10aebe3eb5" kindref="member">flush</ref>();</highlight></codeline>
<codeline lineno="246"><highlight class="normal">}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248" refid="classBmpLoader_aeef90c16086d9134cb1724f28688dce7_1aeef90c16086d9134cb1724f28688dce7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classBmpLoader_aeef90c16086d9134cb1724f28688dce7_1aeef90c16086d9134cb1724f28688dce7" kindref="member">BmpLoader::generateData</ref>(<sp/>_Inout_<sp/><ref refid="unionBmpLoader_1_1ImageData" kindref="compound">ImageData</ref><sp/>*img,</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::function&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)&gt;&gt;<sp/>&amp;imageFilters,</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bTransform,</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;filename<sp/></highlight><highlight class="comment">/*=<sp/>&quot;&quot;*/</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="252"><highlight class="normal">{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>bTransform<sp/>)</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classBmpLoader_a511a88cbef035802afe02a3d837749f2_1a511a88cbef035802afe02a3d837749f2" kindref="member">m_file</ref>.open(<sp/>filename<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>?<sp/><ref refid="classBmpLoader_ad992b5b9fefe9e21e48efa269bbffee6_1ad992b5b9fefe9e21e48efa269bbffee6" kindref="member">m_filename</ref><sp/>:<sp/>filename,<sp/>std::ios::in<sp/>|<sp/>std::ios::binary<sp/>);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>trick&quot;<sp/>open<sp/>file<sp/>for<sp/>writing<sp/>but<sp/>don&apos;t<sp/>write<sp/>anything,<sp/>just<sp/>read<sp/>from<sp/>it<sp/>-<sp/>all<sp/>reads<sp/>(like<sp/>`file.get()`)<sp/>will<sp/>read<sp/>nada<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classBmpLoader_a511a88cbef035802afe02a3d837749f2_1a511a88cbef035802afe02a3d837749f2" kindref="member">m_file</ref>.open(<sp/>filename<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>?<sp/><ref refid="classBmpLoader_ad992b5b9fefe9e21e48efa269bbffee6_1ad992b5b9fefe9e21e48efa269bbffee6" kindref="member">m_filename</ref><sp/>:<sp/>filename,<sp/>std::ios::out<sp/>|<sp/>std::ios::binary<sp/>);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>for<sp/>reverse<sp/>row<sp/>order<sp/>and<sp/>control</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>y<sp/>loop<sp/>accordingly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>yStart;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>yEnd;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dy;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classBmpLoader_a5ba3892b7debe81a24937a0b3492f997_1a5ba3892b7debe81a24937a0b3492f997" kindref="member">m_bmpInfoHeader</ref>.biHeight<sp/>&lt;<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classBmpLoader_af2275302ca1b1cb5827e884e553e931e_1af2275302ca1b1cb5827e884e553e931e" kindref="member">m_height</ref><sp/>=<sp/>-<ref refid="classBmpLoader_a5ba3892b7debe81a24937a0b3492f997_1a5ba3892b7debe81a24937a0b3492f997" kindref="member">m_bmpInfoHeader</ref>.biHeight;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yStart<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yEnd<sp/>=<sp/><ref refid="classBmpLoader_af2275302ca1b1cb5827e884e553e931e_1af2275302ca1b1cb5827e884e553e931e" kindref="member">m_height</ref>;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dy<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classBmpLoader_af2275302ca1b1cb5827e884e553e931e_1af2275302ca1b1cb5827e884e553e931e" kindref="member">m_height</ref><sp/>=<sp/><ref refid="classBmpLoader_a5ba3892b7debe81a24937a0b3492f997_1a5ba3892b7debe81a24937a0b3492f997" kindref="member">m_bmpInfoHeader</ref>.biHeight;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yStart<sp/>=<sp/><ref refid="classBmpLoader_af2275302ca1b1cb5827e884e553e931e_1af2275302ca1b1cb5827e884e553e931e" kindref="member">m_height</ref><sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>yEnd<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dy<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classBmpLoader_a511a88cbef035802afe02a3d837749f2_1a511a88cbef035802afe02a3d837749f2" kindref="member">m_file</ref>.seekg(<sp/><ref refid="classBmpLoader_afb1c02f31a2cce78d8270dfea476eab5_1afb1c02f31a2cce78d8270dfea476eab5" kindref="member">m_bmpFileHeader</ref>.bfOffBits<sp/>);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>padding<sp/>=<sp/>(<sp/>4<sp/>-<sp/>(<sp/><ref refid="classBmpLoader_a7e35757a22047e5c9a49e56cdde46923_1a7e35757a22047e5c9a49e56cdde46923" kindref="member">m_width</ref><sp/>*<sp/>3<sp/>)<sp/>%<sp/>4<sp/>)<sp/>%<sp/>4;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>b32Bits<sp/>=<sp/><ref refid="classBmpLoader_a7a815ea0daafb1cf78b9bd26c0d72fd5_1a7a815ea0daafb1cf78b9bd26c0d72fd5" kindref="member">m_bitCount</ref><sp/>==<sp/>32ui16;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>visit<sp/>every<sp/>pixel<sp/>of<sp/>the<sp/>image<sp/>and<sp/>assign<sp/>a<sp/>color<sp/>generated<sp/>with<sp/>Perlin<sp/>noise</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>yStart;<sp/>i<sp/>!=<sp/>yEnd;<sp/>i<sp/>+=<sp/>dy<sp/>)</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/><ref refid="classBmpLoader_a7e35757a22047e5c9a49e56cdde46923_1a7e35757a22047e5c9a49e56cdde46923" kindref="member">m_width</ref>;<sp/>++j<sp/>)</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>(double)<sp/>j<sp/>/<sp/>(<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/><ref refid="classBmpLoader_a7e35757a22047e5c9a49e56cdde46923_1a7e35757a22047e5c9a49e56cdde46923" kindref="member">m_width</ref><sp/>);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>(double)<sp/>i<sp/>/<sp/>(<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)<sp/><ref refid="classBmpLoader_af2275302ca1b1cb5827e884e553e931e_1af2275302ca1b1cb5827e884e553e931e" kindref="member">m_height</ref><sp/>);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>apply<sp/>the<sp/>image<sp/>filters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;filter<sp/>:<sp/>imageFilters<sp/>)</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>*=<sp/>filter(<sp/>x,<sp/>y<sp/>);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>blue<sp/>=<sp/><ref refid="namespaceutil_a231ff37a555718ffa5cbaa39694b0025_1a231ff37a555718ffa5cbaa39694b0025" kindref="member">util::mapToByte</ref>(<sp/><ref refid="classBmpLoader_a511a88cbef035802afe02a3d837749f2_1a511a88cbef035802afe02a3d837749f2" kindref="member">m_file</ref>.get()<sp/>*<sp/>val<sp/>);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>green<sp/>=<sp/><ref refid="namespaceutil_a231ff37a555718ffa5cbaa39694b0025_1a231ff37a555718ffa5cbaa39694b0025" kindref="member">util::mapToByte</ref>(<sp/><ref refid="classBmpLoader_a511a88cbef035802afe02a3d837749f2_1a511a88cbef035802afe02a3d837749f2" kindref="member">m_file</ref>.get()<sp/>*<sp/>val<sp/>);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>red<sp/>=<sp/><ref refid="namespaceutil_a231ff37a555718ffa5cbaa39694b0025_1a231ff37a555718ffa5cbaa39694b0025" kindref="member">util::mapToByte</ref>(<sp/><ref refid="classBmpLoader_a511a88cbef035802afe02a3d837749f2_1a511a88cbef035802afe02a3d837749f2" kindref="member">m_file</ref>.get()<sp/>*<sp/>val<sp/>);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;ar<sp/>=<sp/>img[i<sp/>*<sp/><ref refid="classBmpLoader_a7e35757a22047e5c9a49e56cdde46923_1a7e35757a22047e5c9a49e56cdde46923" kindref="member">m_width</ref><sp/>+<sp/>j];</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!b32Bits<sp/>)</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ar._24bit.b<sp/>=<sp/>blue;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ar._24bit.g<sp/>=<sp/>green;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ar._24bit.r<sp/>=<sp/>red;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>alpha<sp/>=<sp/><ref refid="namespaceutil_a231ff37a555718ffa5cbaa39694b0025_1a231ff37a555718ffa5cbaa39694b0025" kindref="member">util::mapToByte</ref>(<sp/><ref refid="classBmpLoader_a511a88cbef035802afe02a3d837749f2_1a511a88cbef035802afe02a3d837749f2" kindref="member">m_file</ref>.get()<sp/>*<sp/>val<sp/>);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ar._32bit<sp/>=<sp/><ref refid="structColorBGRA" kindref="compound">ColorBGRA</ref>{red,<sp/>green,<sp/>blue,<sp/>alpha};</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>b32Bits<sp/>)</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classBmpLoader_a511a88cbef035802afe02a3d837749f2_1a511a88cbef035802afe02a3d837749f2" kindref="member">m_file</ref>.seekg(<sp/>1,<sp/>std::ios::cur<sp/>);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!b32Bits<sp/>)</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classBmpLoader_a511a88cbef035802afe02a3d837749f2_1a511a88cbef035802afe02a3d837749f2" kindref="member">m_file</ref>.seekg(<sp/>padding,<sp/>std::ios::cur<sp/>);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classBmpLoader_aaaca1f056800ab156ae35e10aebe3eb5_1aaaca1f056800ab156ae35e10aebe3eb5" kindref="member">flush</ref>();</highlight></codeline>
<codeline lineno="331"><highlight class="normal">}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333" refid="classBmpLoader_a96916dc9f8cbffbc1bb10098ce844a14_1a96916dc9f8cbffbc1bb10098ce844a14" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classBmpLoader_a96916dc9f8cbffbc1bb10098ce844a14_1a96916dc9f8cbffbc1bb10098ce844a14" kindref="member">BmpLoader::transformData</ref>(<sp/>_Inout_<sp/><ref refid="unionBmpLoader_1_1ImageData" kindref="compound">ImageData</ref><sp/>*img,</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::function&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)&gt;&gt;<sp/>&amp;imageFilters,</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;filename<sp/></highlight><highlight class="comment">/*=<sp/>&quot;&quot;*/</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="336"><highlight class="normal">{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classBmpLoader_aeef90c16086d9134cb1724f28688dce7_1aeef90c16086d9134cb1724f28688dce7" kindref="member">generateData</ref>(<sp/>img,<sp/>imageFilters,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>filename<sp/>);</highlight></codeline>
<codeline lineno="338"><highlight class="normal">}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340" refid="classBmpLoader_ab846077b54999db0ecc1f19ecec9b9c2_1ab846077b54999db0ecc1f19ecec9b9c2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classBmpLoader_ab846077b54999db0ecc1f19ecec9b9c2_1ab846077b54999db0ecc1f19ecec9b9c2" kindref="member">BmpLoader::writeData</ref>(<sp/><ref refid="unionBmpLoader_1_1ImageData" kindref="compound">ImageData</ref><sp/>*img,</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;filename<sp/></highlight><highlight class="comment">/*=<sp/>&quot;&quot;*/</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="342"><highlight class="normal">{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classBmpLoader_a511a88cbef035802afe02a3d837749f2_1a511a88cbef035802afe02a3d837749f2" kindref="member">m_file</ref>.open(<sp/>filename<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>?<sp/><ref refid="classBmpLoader_ad992b5b9fefe9e21e48efa269bbffee6_1ad992b5b9fefe9e21e48efa269bbffee6" kindref="member">m_filename</ref><sp/>:<sp/>filename,<sp/>std::ios::out<sp/>|<sp/>std::ios::binary<sp/>);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>fileHeader[14]<sp/>=</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="charliteral">&apos;B&apos;</highlight><highlight class="normal">,</highlight><highlight class="charliteral">&apos;M&apos;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>magic</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,0,0,0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>size<sp/>in<sp/>bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>app<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>app<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>40<sp/>+<sp/>14,0,0,0<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>start<sp/>of<sp/>data<sp/>offset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>infoHeader[40]<sp/>=</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>40,0,0,0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>infoHeader<sp/>hd<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,0,0,0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>width</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,0,0,0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>heigth</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1,0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>number<sp/>color<sp/>planes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>24,0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bits<sp/>per<sp/>pixel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,0,0,0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compression<sp/>is<sp/>none</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,0,0,0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>image<sp/>bits<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x13,0x0B,0,0,<sp/><sp/></highlight><highlight class="comment">//<sp/>horz<sp/>resoluition<sp/>in<sp/>pixel<sp/>/<sp/>m</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x13,0x0B,0,0,<sp/><sp/></highlight><highlight class="comment">//<sp/>vert<sp/>resolutions<sp/>(0x03C3<sp/>=<sp/>96<sp/>dpi,<sp/>0x0B13<sp/>=<sp/>72<sp/>dpi)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,0,0,0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>colors<sp/>in<sp/>pallete</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,0,0,0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>important<sp/>colors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w<sp/>=<sp/><ref refid="classBmpLoader_a7e35757a22047e5c9a49e56cdde46923_1a7e35757a22047e5c9a49e56cdde46923" kindref="member">m_width</ref>;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h<sp/>=<sp/><ref refid="classBmpLoader_af2275302ca1b1cb5827e884e553e931e_1af2275302ca1b1cb5827e884e553e931e" kindref="member">m_height</ref>;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>padding<sp/>is<sp/>for<sp/>the<sp/>case<sp/>of<sp/>of<sp/>24<sp/>bit<sp/>depth<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>paddingSize<sp/><sp/>=<sp/>(<sp/>4<sp/>-<sp/>(<sp/>w<sp/>*<sp/>3<sp/>)<sp/>%<sp/>4<sp/>)<sp/>%<sp/>4;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sizeData<sp/>=<sp/>w<sp/>*<sp/>h<sp/>*3<sp/>+<sp/>h<sp/>*<sp/>paddingSize;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sizeAll<sp/><sp/>=<sp/>sizeData<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>fileHeader<sp/>)<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>infoHeader<sp/>);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>fileHeader[2]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)(<sp/>sizeAll<sp/>);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>fileHeader[3]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)(<sp/>sizeAll<sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>fileHeader[4]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)(<sp/>sizeAll<sp/>&gt;&gt;<sp/>16);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>fileHeader[5]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)(<sp/>sizeAll<sp/>&gt;&gt;<sp/>24);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>infoHeader[4]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)(<sp/>w<sp/>);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>infoHeader[5]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)(<sp/>w<sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>infoHeader[6]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)(<sp/>w<sp/>&gt;&gt;<sp/>16);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>infoHeader[7]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)(<sp/>w<sp/>&gt;&gt;<sp/>24);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>infoHeader[8]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)(<sp/>h<sp/>);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>infoHeader[9]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)(<sp/>h<sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>infoHeader[10]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)(<sp/>h<sp/>&gt;&gt;<sp/>16);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>infoHeader[11]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)(<sp/>h<sp/>&gt;&gt;<sp/>24);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>infoHeader[20]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)(<sp/>sizeData<sp/>);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>infoHeader[21]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)(<sp/>sizeData<sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>infoHeader[22]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)(<sp/>sizeData<sp/>&gt;&gt;<sp/>16);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>infoHeader[23]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)(<sp/>sizeData<sp/>&gt;&gt;<sp/>24);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classBmpLoader_a511a88cbef035802afe02a3d837749f2_1a511a88cbef035802afe02a3d837749f2" kindref="member">m_file</ref>.write(<sp/>fileHeader,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>fileHeader<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classBmpLoader_a511a88cbef035802afe02a3d837749f2_1a511a88cbef035802afe02a3d837749f2" kindref="member">m_file</ref>.write(<sp/>infoHeader,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>infoHeader<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>b32Bits<sp/>=<sp/><ref refid="classBmpLoader_a7a815ea0daafb1cf78b9bd26c0d72fd5_1a7a815ea0daafb1cf78b9bd26c0d72fd5" kindref="member">m_bitCount</ref><sp/>==<sp/>32ui16;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>padding[3]<sp/>=<sp/>{<sp/>0,<sp/>0,<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>0;<sp/>y<sp/>&lt;<sp/>h;<sp/>++y<sp/>)</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>w;<sp/>++x<sp/>)</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!b32Bits<sp/>)</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>element<sp/>=<sp/>img[y<sp/>*<sp/><ref refid="classBmpLoader_a7e35757a22047e5c9a49e56cdde46923_1a7e35757a22047e5c9a49e56cdde46923" kindref="member">m_width</ref><sp/>+<sp/>x].<ref refid="unionBmpLoader_1_1ImageData_a6193dfb0c277227e4d1f58ccac72ebb8_1a6193dfb0c277227e4d1f58ccac72ebb8" kindref="member">_24bit</ref>;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>texel[3]<sp/>=</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>element.b,</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>element.g,</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>element.r</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classBmpLoader_a511a88cbef035802afe02a3d837749f2_1a511a88cbef035802afe02a3d837749f2" kindref="member">m_file</ref>.write(<sp/>texel,<sp/>3<sp/>);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>element<sp/>=<sp/>img[y<sp/>*<sp/><ref refid="classBmpLoader_a7e35757a22047e5c9a49e56cdde46923_1a7e35757a22047e5c9a49e56cdde46923" kindref="member">m_width</ref><sp/>+<sp/>x].<ref refid="unionBmpLoader_1_1ImageData_af501e9333827c5e8f86950c9aaffbfbb_1af501e9333827c5e8f86950c9aaffbfbb" kindref="member">_32bit</ref>;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>texel[4]<sp/>=</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>element.getBlue(),</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>element.getRed(),</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>element.getRed(),</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>element.getAlpha()</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classBmpLoader_a511a88cbef035802afe02a3d837749f2_1a511a88cbef035802afe02a3d837749f2" kindref="member">m_file</ref>.write(<sp/>texel,<sp/>4<sp/>);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!b32Bits<sp/>)</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classBmpLoader_a511a88cbef035802afe02a3d837749f2_1a511a88cbef035802afe02a3d837749f2" kindref="member">m_file</ref>.write(<sp/>padding,<sp/>paddingSize<sp/>);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classBmpLoader_aaaca1f056800ab156ae35e10aebe3eb5_1aaaca1f056800ab156ae35e10aebe3eb5" kindref="member">flush</ref>();</highlight></codeline>
<codeline lineno="442"><highlight class="normal">}</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444" refid="classBmpLoader_a9c6b03620c9edafc6b6ded786b1b4aaa_1a9c6b03620c9edafc6b6ded786b1b4aaa" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classBmpLoader_a9c6b03620c9edafc6b6ded786b1b4aaa_1a9c6b03620c9edafc6b6ded786b1b4aaa" kindref="member">BmpLoader::normalizeHeightmap</ref>(<sp/>_Inout_<sp/><ref refid="unionBmpLoader_1_1ImageData" kindref="compound">ImageData</ref><sp/>*img,</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value<sp/>)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal">{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>b32Bits<sp/>=<sp/>m_bitCount<sp/>==<sp/>32ui16;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>0;<sp/>y<sp/>&lt;<sp/>m_height;<sp/>++y<sp/>)</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>m_width;<sp/>++x<sp/>)</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!b32Bits<sp/>)</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;element<sp/>=<sp/>img[y<sp/>*<sp/>m_width<sp/>+<sp/>x]._24bit;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>element.b<sp/>/=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)<sp/>value;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>element.g<sp/>/=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)<sp/>value;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>element.r<sp/>/=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)<sp/>value;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;element<sp/>=<sp/>img[y<sp/>*<sp/>m_width<sp/>+<sp/>x]._32bit;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>element.set(<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>element<sp/>)<sp/>/<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>value<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="467"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/bmp_loader.cpp"/>
  </compounddef>
</doxygen>
