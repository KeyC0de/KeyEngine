<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="utils_8h" kind="file" language="C++">
    <compoundname>utils.h</compoundname>
    <includes local="no">vector</includes>
    <includes local="no">string</includes>
    <includes local="no">sstream</includes>
    <includes local="no">iostream</includes>
    <includes local="no">set</includes>
    <includes local="no">bitset</includes>
    <includes local="no">cstddef</includes>
    <includes local="no">cinttypes</includes>
    <includes local="no">future</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">numeric</includes>
    <includes local="no">iterator</includes>
    <includes local="no">regex</includes>
    <includes local="no">execution</includes>
    <includes refid="assertions__console_8h" local="yes">assertions_console.h</includes>
    <includes refid="key__type__traits_8h" local="yes">key_type_traits.h</includes>
    <includes refid="utils__global_8h" local="yes">utils_global.h</includes>
    <includedby refid="d3d__utils_8h" local="yes">inc/d3d_utils.h</includedby>
    <includedby refid="dynamic__constant__buffer_8h" local="yes">inc/dynamic_constant_buffer.h</includedby>
    <includedby refid="math__utils_8h" local="yes">inc/math_utils.h</includedby>
    <includedby refid="binder_8cpp" local="yes">src/binder.cpp</includedby>
    <includedby refid="bitmap_8cpp" local="yes">src/bitmap.cpp</includedby>
    <includedby refid="bmp__loader_8cpp" local="yes">src/bmp_loader.cpp</includedby>
    <includedby refid="console_8cpp" local="yes">src/console.cpp</includedby>
    <includedby refid="cube_8cpp" local="yes">src/cube.cpp</includedby>
    <includedby refid="graphics_8cpp" local="yes">src/graphics.cpp</includedby>
    <includedby refid="imgui__visitors_8cpp" local="yes">src/imgui_visitors.cpp</includedby>
    <includedby refid="key__sound_8cpp" local="yes">src/key_sound.cpp</includedby>
    <includedby refid="line_8cpp" local="yes">src/line.cpp</includedby>
    <includedby refid="main_8cpp" local="yes">src/main.cpp</includedby>
    <includedby refid="mesh_8cpp" local="yes">src/mesh.cpp</includedby>
    <includedby refid="os__utils_8cpp" local="yes">src/os_utils.cpp</includedby>
    <includedby refid="pixel__shader_8cpp" local="yes">src/pixel_shader.cpp</includedby>
    <includedby refid="plane_8cpp" local="yes">src/plane.cpp</includedby>
    <includedby refid="render__target_8cpp" local="yes">src/render_target.cpp</includedby>
    <includedby refid="settings__manager_8cpp" local="yes">src/settings_manager.cpp</includedby>
    <includedby refid="terrain_8cpp" local="yes">src/terrain.cpp</includedby>
    <includedby refid="ui__component_8cpp" local="yes">src/ui_component.cpp</includedby>
    <includedby refid="ui__pass_8cpp" local="yes">src/ui_pass.cpp</includedby>
    <includedby refid="utils_8cpp" local="yes">src/utils.cpp</includedby>
    <includedby refid="vertex__shader_8cpp" local="yes">src/vertex_shader.cpp</includedby>
    <includedby refid="window_8cpp" local="yes">src/window.cpp</includedby>
    <incdepgraph>
      <node id="16">
        <label>assertions_console.h</label>
        <link refid="assertions__console_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>key_type_traits.h</label>
        <link refid="key__type__traits_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>inc/utils.h</label>
        <link refid="utils_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>utils_global.h</label>
        <link refid="utils__global_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>algorithm</label>
      </node>
      <node id="7">
        <label>bitset</label>
      </node>
      <node id="9">
        <label>cinttypes</label>
      </node>
      <node id="8">
        <label>cstddef</label>
      </node>
      <node id="15">
        <label>execution</label>
      </node>
      <node id="10">
        <label>future</label>
      </node>
      <node id="5">
        <label>iostream</label>
      </node>
      <node id="13">
        <label>iterator</label>
      </node>
      <node id="12">
        <label>numeric</label>
      </node>
      <node id="14">
        <label>regex</label>
      </node>
      <node id="6">
        <label>set</label>
      </node>
      <node id="4">
        <label>sstream</label>
      </node>
      <node id="3">
        <label>string</label>
      </node>
      <node id="18">
        <label>type_traits</label>
      </node>
      <node id="2">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="28">
        <label>inc/camera_frustum.h</label>
        <link refid="camera__frustum_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>inc/camera_widget.h</label>
        <link refid="camera__widget_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="47">
        <label>inc/constant_buffer.h</label>
        <link refid="constant__buffer_8h"/>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>inc/constant_buffer_ex.h</label>
        <link refid="constant__buffer__ex_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>inc/cube.h</label>
        <link refid="cube_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>inc/d3d_utils.h</label>
        <link refid="d3d__utils_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>inc/dynamic_constant_buffer.h</label>
        <link refid="dynamic__constant__buffer_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>inc/game.h</label>
        <link refid="game_8h"/>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>inc/graphics.h</label>
        <link refid="graphics_8h"/>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>inc/horizontal_blur_pass.h</label>
        <link refid="horizontal__blur__pass_8h"/>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>inc/key_timer.h</label>
        <link refid="key__timer_8h"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>inc/line.h</label>
        <link refid="line_8h"/>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="44">
        <label>inc/math_utils.h</label>
        <link refid="math__utils_8h"/>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>inc/mesh.h</label>
        <link refid="mesh_8h"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="77">
        <label>inc/performance_log.h</label>
        <link refid="performance__log_8h"/>
        <childnode refid="78" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>inc/plane.h</label>
        <link refid="plane_8h"/>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>inc/shadow_pass.h</label>
        <link refid="shadow__pass_8h"/>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>inc/sky_vscb.h</label>
        <link refid="sky__vscb_8h"/>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>inc/sphere.h</label>
        <link refid="sphere_8h"/>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>inc/terrain.h</label>
        <link refid="terrain_8h"/>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>inc/transform_vscb.h</label>
        <link refid="transform__vscb_8h"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>inc/utils.h</label>
        <link refid="utils_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>inc/vertical_blur_pass.h</label>
        <link refid="vertical__blur__pass_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>src/MODEL.CPP</label>
        <link refid="MODEL_8CPP"/>
      </node>
      <node id="49">
        <label>src/SHADOW_PASS.CPP</label>
        <link refid="SHADOW__PASS_8CPP"/>
      </node>
      <node id="86">
        <label>src/binder.cpp</label>
        <link refid="binder_8cpp"/>
      </node>
      <node id="87">
        <label>src/bitmap.cpp</label>
        <link refid="bitmap_8cpp"/>
      </node>
      <node id="53">
        <label>src/blend_state.cpp</label>
        <link refid="blend__state_8cpp"/>
      </node>
      <node id="54">
        <label>src/blur_outline_draw_pass.cpp</label>
        <link refid="blur__outline__draw__pass_8cpp"/>
      </node>
      <node id="81">
        <label>src/bmp_loader.cpp</label>
        <link refid="bmp__loader_8cpp"/>
      </node>
      <node id="4">
        <label>src/camera.cpp</label>
        <link refid="camera_8cpp"/>
      </node>
      <node id="29">
        <label>src/camera_frustum.cpp</label>
        <link refid="camera__frustum_8cpp"/>
      </node>
      <node id="55">
        <label>src/camera_manager.cpp</label>
        <link refid="camera__manager_8cpp"/>
      </node>
      <node id="31">
        <label>src/camera_widget.cpp</label>
        <link refid="camera__widget_8cpp"/>
      </node>
      <node id="79">
        <label>src/console.cpp</label>
        <link refid="console_8cpp"/>
      </node>
      <node id="20">
        <label>src/constant_buffer_ex.cpp</label>
        <link refid="constant__buffer__ex_8cpp"/>
      </node>
      <node id="21">
        <label>src/cube.cpp</label>
        <link refid="cube_8cpp"/>
      </node>
      <node id="56">
        <label>src/cube_texture.cpp</label>
        <link refid="cube__texture_8cpp"/>
      </node>
      <node id="5">
        <label>src/d3d_utils.cpp</label>
        <link refid="d3d__utils_8cpp"/>
      </node>
      <node id="57">
        <label>src/depth_stencil_state.cpp</label>
        <link refid="depth__stencil__state_8cpp"/>
      </node>
      <node id="58">
        <label>src/depth_stencil_view.cpp</label>
        <link refid="depth__stencil__view_8cpp"/>
      </node>
      <node id="43">
        <label>src/dynamic_constant_buffer.cpp</label>
        <link refid="dynamic__constant__buffer_8cpp"/>
      </node>
      <node id="59">
        <label>src/fullscreen_pass.cpp</label>
        <link refid="fullscreen__pass_8cpp"/>
      </node>
      <node id="33">
        <label>src/game.cpp</label>
        <link refid="game_8cpp"/>
      </node>
      <node id="82">
        <label>src/geometry.cpp</label>
        <link refid="geometry_8cpp"/>
      </node>
      <node id="60">
        <label>src/graphics.cpp</label>
        <link refid="graphics_8cpp"/>
      </node>
      <node id="61">
        <label>src/graphics_friend.cpp</label>
        <link refid="graphics__friend_8cpp"/>
      </node>
      <node id="16">
        <label>src/horizontal_blur_pass.cpp</label>
        <link refid="horizontal__blur__pass_8cpp"/>
      </node>
      <node id="6">
        <label>src/imgui_visitors.cpp</label>
        <link refid="imgui__visitors_8cpp"/>
      </node>
      <node id="62">
        <label>src/index_buffer.cpp</label>
        <link refid="index__buffer_8cpp"/>
      </node>
      <node id="63">
        <label>src/input_layout.cpp</label>
        <link refid="input__layout_8cpp"/>
      </node>
      <node id="40">
        <label>src/job.cpp</label>
        <link refid="job_8cpp"/>
      </node>
      <node id="80">
        <label>src/key_sound.cpp</label>
        <link refid="key__sound_8cpp"/>
      </node>
      <node id="7">
        <label>src/light_source.cpp</label>
        <link refid="light__source_8cpp"/>
      </node>
      <node id="22">
        <label>src/line.cpp</label>
        <link refid="line_8cpp"/>
      </node>
      <node id="39">
        <label>src/main.cpp</label>
        <link refid="main_8cpp"/>
      </node>
      <node id="41">
        <label>src/material.cpp</label>
        <link refid="material_8cpp"/>
      </node>
      <node id="23">
        <label>src/material_loader.cpp</label>
        <link refid="material__loader_8cpp"/>
      </node>
      <node id="83">
        <label>src/math_utils.cpp</label>
        <link refid="math__utils_8cpp"/>
      </node>
      <node id="8">
        <label>src/mesh.cpp</label>
        <link refid="mesh_8cpp"/>
      </node>
      <node id="64">
        <label>src/mouse_picker.cpp</label>
        <link refid="mouse__picker_8cpp"/>
      </node>
      <node id="9">
        <label>src/node.cpp</label>
        <link refid="node_8cpp"/>
      </node>
      <node id="88">
        <label>src/os_utils.cpp</label>
        <link refid="os__utils_8cpp"/>
      </node>
      <node id="65">
        <label>src/pass_2d.cpp</label>
        <link refid="pass__2d_8cpp"/>
      </node>
      <node id="78">
        <label>src/performance_log.cpp</label>
        <link refid="performance__log_8cpp"/>
      </node>
      <node id="84">
        <label>src/perlin_noise.cpp</label>
        <link refid="perlin__noise_8cpp"/>
      </node>
      <node id="66">
        <label>src/pixel_shader.cpp</label>
        <link refid="pixel__shader_8cpp"/>
      </node>
      <node id="24">
        <label>src/plane.cpp</label>
        <link refid="plane_8cpp"/>
      </node>
      <node id="67">
        <label>src/primitive_topology.cpp</label>
        <link refid="primitive__topology_8cpp"/>
      </node>
      <node id="68">
        <label>src/rasterizer_state.cpp</label>
        <link refid="rasterizer__state_8cpp"/>
      </node>
      <node id="69">
        <label>src/render_target.cpp</label>
        <link refid="render__target_8cpp"/>
      </node>
      <node id="17">
        <label>src/renderer.cpp</label>
        <link refid="renderer_8cpp"/>
      </node>
      <node id="85">
        <label>src/settings_manager.cpp</label>
        <link refid="settings__manager_8cpp"/>
      </node>
      <node id="51">
        <label>src/sky_pass.cpp</label>
        <link refid="sky__pass_8cpp"/>
      </node>
      <node id="52">
        <label>src/sky_vscb.cpp</label>
        <link refid="sky__vscb_8cpp"/>
      </node>
      <node id="25">
        <label>src/sphere.cpp</label>
        <link refid="sphere_8cpp"/>
      </node>
      <node id="10">
        <label>src/terrain.cpp</label>
        <link refid="terrain_8cpp"/>
      </node>
      <node id="11">
        <label>src/testing.cpp</label>
        <link refid="testing_8cpp"/>
      </node>
      <node id="70">
        <label>src/texture.cpp</label>
        <link refid="texture_8cpp"/>
      </node>
      <node id="71">
        <label>src/texture_sampler_state.cpp</label>
        <link refid="texture__sampler__state_8cpp"/>
      </node>
      <node id="42">
        <label>src/transform_vscb.cpp</label>
        <link refid="transform__vscb_8cpp"/>
      </node>
      <node id="12">
        <label>src/ui_component.cpp</label>
        <link refid="ui__component_8cpp"/>
      </node>
      <node id="72">
        <label>src/ui_pass.cpp</label>
        <link refid="ui__pass_8cpp"/>
      </node>
      <node id="89">
        <label>src/utils.cpp</label>
        <link refid="utils_8cpp"/>
      </node>
      <node id="73">
        <label>src/vertex_buffer.cpp</label>
        <link refid="vertex__buffer_8cpp"/>
      </node>
      <node id="74">
        <label>src/vertex_shader.cpp</label>
        <link refid="vertex__shader_8cpp"/>
      </node>
      <node id="19">
        <label>src/vertical_blur_pass.cpp</label>
        <link refid="vertical__blur__pass_8cpp"/>
      </node>
      <node id="75">
        <label>src/viewport.cpp</label>
        <link refid="viewport_8cpp"/>
      </node>
      <node id="76">
        <label>src/window.cpp</label>
        <link refid="window_8cpp"/>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespaceutil">util</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;bitset&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstddef&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cinttypes&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;future&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>algorithms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;numeric&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>algorithms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iterator&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>algorithms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;regex&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>algorithms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;execution&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>algorithms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="assertions__console_8h" kindref="compound">assertions_console.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="key__type__traits_8h" kindref="compound">key_type_traits.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="utils__global_8h" kindref="compound">utils_global.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceutil" kindref="compound">util</ref></highlight></codeline>
<codeline lineno="23"><highlight class="normal">{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal">uint64_t<sp/><ref refid="namespaceutil_a49d694f983612063981f0a3f27c9ab9b_1a49d694f983612063981f0a3f27c9ab9b" kindref="member">combineUnsignedInt32to64</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>high32Bit,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>low32Bit<sp/>);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="28" refid="namespaceutil_a16725a1ddd3cd0f473a0c915e9e7aa31_1a16725a1ddd3cd0f473a0c915e9e7aa31" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceutil_a16725a1ddd3cd0f473a0c915e9e7aa31_1a16725a1ddd3cd0f473a0c915e9e7aa31" kindref="member">safeDelete</ref>(<sp/>T*&amp;<sp/>p<sp/>)</highlight></codeline>
<codeline lineno="29"><highlight class="normal">{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>p<sp/>)</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="35"><highlight class="normal">}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/>std::enable_if_t&lt;is_po</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">er_wrapper_v&lt;T&gt;&gt;&gt;</highlight></codeline>
<codeline lineno="38" refid="namespaceutil_aa985df3270c6bf1cbd444decbc648d23_1aa985df3270c6bf1cbd444decbc648d23" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceutil_a16725a1ddd3cd0f473a0c915e9e7aa31_1a16725a1ddd3cd0f473a0c915e9e7aa31" kindref="member">safeDelete</ref>(<sp/>T<sp/>&amp;pSm<sp/>)</highlight></codeline>
<codeline lineno="39"><highlight class="normal">{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>pSm<sp/>)</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pSm<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="47" refid="namespaceutil_a109becba16ea1005edf128d5486b8608_1a109becba16ea1005edf128d5486b8608" refkind="member"><highlight class="normal">T<sp/><ref refid="namespaceutil_a109becba16ea1005edf128d5486b8608_1a109becba16ea1005edf128d5486b8608" kindref="member">sum</ref>(<sp/>std::initializer_list&lt;T&gt;<sp/>lst<sp/>)</highlight></codeline>
<codeline lineno="48"><highlight class="normal">{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>total<sp/>=<sp/>(T)0;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;i<sp/>:<sp/>lst<sp/>)</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total<sp/>+=<sp/>i;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>total;</highlight></codeline>
<codeline lineno="55"><highlight class="normal">}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="58" refid="namespaceutil_a8b28c4afe12b8516b7e88d2c0162ab58_1a8b28c4afe12b8516b7e88d2c0162ab58" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceutil_a8b28c4afe12b8516b7e88d2c0162ab58_1a8b28c4afe12b8516b7e88d2c0162ab58" kindref="member">isFutureReady</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::future&lt;T&gt;<sp/>&amp;fu<sp/>)</highlight></codeline>
<codeline lineno="59"><highlight class="normal">{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fu.wait_for(<sp/>std::chrono::seconds(<sp/>0<sp/>)<sp/>)<sp/>==<sp/>std::future_status::ready;</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal">std::vector&lt;std::string&gt;<sp/><ref refid="namespaceutil_ad5fc31a90c5660d5e200f2ced161da84_1ad5fc31a90c5660d5e200f2ced161da84" kindref="member">tokenizeQuotedString</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;input<sp/>);</highlight></codeline>
<codeline lineno="67"><highlight class="normal">std::wstring<sp/><ref refid="namespaceutil_a6f14f660ccbdb1435f227700fa1dfd94_1a6f14f660ccbdb1435f227700fa1dfd94" kindref="member">s2ws</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;narrow<sp/>);</highlight></codeline>
<codeline lineno="69"><highlight class="normal">std::string<sp/><ref refid="namespaceutil_a81e6fd9c125b3f26fb70d1847f6ff517_1a81e6fd9c125b3f26fb70d1847f6ff517" kindref="member">ws2s</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::wstring<sp/>&amp;wide<sp/>);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceutil_a25793b6d04ffa8c86a51f8f82338fba3_1a25793b6d04ffa8c86a51f8f82338fba3" kindref="member">removeSubstring</ref>(<sp/>std::string<sp/>&amp;str,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;substring<sp/>);</highlight></codeline>
<codeline lineno="73"><highlight class="normal">std::string<sp/><ref refid="namespaceutil_ad0a21d01322ceda52938b313f3cc6aaa_1ad0a21d01322ceda52938b313f3cc6aaa" kindref="member">trimStringFromStart</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;str,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nChars<sp/>);</highlight></codeline>
<codeline lineno="74"><highlight class="normal">std::string<sp/><ref refid="namespaceutil_a15cfe5cd27162872c90d985d87d7333d_1a15cfe5cd27162872c90d985d87d7333d" kindref="member">trimStringFromEnd</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;str,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nChars<sp/>);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceutil_a64cd915f6693db8debb42c8bb38448ad_1a64cd915f6693db8debb42c8bb38448ad" kindref="member">trimStringFromStartInPlace</ref>(<sp/>std<sp/>::string<sp/>&amp;str,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nChars<sp/>);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceutil_a3118ce20ff29552b5ac2926733ff4217_1a3118ce20ff29552b5ac2926733ff4217" kindref="member">trimStringFromEndInPlace</ref>(<sp/>std::string<sp/>&amp;str,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nChars<sp/>);</highlight></codeline>
<codeline lineno="78"><highlight class="normal">std::vector&lt;std::string&gt;<sp/><ref refid="namespaceutil_a348a3ef87044b01682ceed43343b68f9_1a348a3ef87044b01682ceed43343b68f9" kindref="member">splitDelimitedString</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>str,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>delimiter<sp/>);</highlight></codeline>
<codeline lineno="79"><highlight class="normal">std::string<sp/><ref refid="namespaceutil_a73e42b8129fee18fa3a3b5695fe73ea4_1a73e42b8129fee18fa3a3b5695fe73ea4" kindref="member">assembleDelimitedString</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;&amp;<sp/>delimitedString,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>delimiter<sp/>);</highlight></codeline>
<codeline lineno="81"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceutil_aa845e36a4114a586437cc5900b2c0025_1aa845e36a4114a586437cc5900b2c0025" kindref="member">removeFromDelimitedString</ref>(<sp/>std::vector&lt;std::string&gt;<sp/>&amp;delimitedString,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>delimiter,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>str<sp/>);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceutil_a0ab06e57f9acb28ffd209902e9226731_1a0ab06e57f9acb28ffd209902e9226731" kindref="member">stringContains</ref>(<sp/>std::string_view<sp/>haystack,<sp/>std::string_view<sp/>needle<sp/>);</highlight></codeline>
<codeline lineno="83"><highlight class="normal">std::string&amp;<sp/><ref refid="namespaceutil_a8ea22a55ee940e9d5aab2b939875ba4a_1a8ea22a55ee940e9d5aab2b939875ba4a" kindref="member">capitalizeFirstLetter</ref>(<sp/>std::string<sp/>&amp;str<sp/>);</highlight></codeline>
<codeline lineno="84"><highlight class="normal">std::string<sp/><ref refid="namespaceutil_a8ea22a55ee940e9d5aab2b939875ba4a_1a8ea22a55ee940e9d5aab2b939875ba4a" kindref="member">capitalizeFirstLetter</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;str<sp/>);</highlight></codeline>
<codeline lineno="85"><highlight class="normal">std::string<sp/><ref refid="namespaceutil_ac8acfdbbacd733b86b68949387ba8ad8_1ac8acfdbbacd733b86b68949387ba8ad8" kindref="member">intToStr</ref>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>integer<sp/>)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespaceutil_a77530f53a3b13566c5ac366f48ca3470_1a77530f53a3b13566c5ac366f48ca3470" kindref="member">stringToInt</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;str<sp/>)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceutil_ad8703794d925cf6667c7e524d2c0a1e1_1ad8703794d925cf6667c7e524d2c0a1e1" kindref="member">trimSpacesLeft</ref>(<sp/>std::string<sp/>&amp;s<sp/>);</highlight></codeline>
<codeline lineno="91"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceutil_aeb3e149c28bc70655000566622273613_1aeb3e149c28bc70655000566622273613" kindref="member">trimSpacesRight</ref>(<sp/>std::string<sp/>&amp;s<sp/>);</highlight></codeline>
<codeline lineno="93"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceutil_aa45ff2feb5b66709c315b058656cd53a_1aa45ff2feb5b66709c315b058656cd53a" kindref="member">trimSpaces</ref>(<sp/>std::string<sp/>&amp;s<sp/>);</highlight></codeline>
<codeline lineno="95"><highlight class="normal">std::string<sp/><ref refid="namespaceutil_a8d38081987502aa8d2c6fcd96ce808fe_1a8d38081987502aa8d2c6fcd96ce808fe" kindref="member">trimSpacesCopy</ref>(<sp/>std::string<sp/>s<sp/>);</highlight></codeline>
<codeline lineno="97"><highlight class="normal">std::string<sp/><ref refid="namespaceutil_a24e5bc723978ad1a06075f9544c2ca9a_1a24e5bc723978ad1a06075f9544c2ca9a" kindref="member">trimSpacesLCopy</ref>(<sp/>std::string<sp/>s<sp/>);</highlight></codeline>
<codeline lineno="99"><highlight class="normal">std::string<sp/><ref refid="namespaceutil_adab26c60ceda7aef0d2ed9c8a53ea024_1adab26c60ceda7aef0d2ed9c8a53ea024" kindref="member">trimSpacesRightCopy</ref>(<sp/>std::string<sp/>s<sp/>);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="102" refid="namespaceutil_acc9930a5ac52bb184d7605a05a9a2ba2_1acc9930a5ac52bb184d7605a05a9a2ba2" refkind="member"><highlight class="normal">std::string<sp/><ref refid="namespaceutil_acc9930a5ac52bb184d7605a05a9a2ba2_1acc9930a5ac52bb184d7605a05a9a2ba2" kindref="member">toString</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;t<sp/>)</highlight></codeline>
<codeline lineno="103"><highlight class="normal">{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>t;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ss.str();</highlight></codeline>
<codeline lineno="107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/>std::enable_if_t&lt;std::is_</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">egral_v&lt;T&gt;&gt;&gt;</highlight></codeline>
<codeline lineno="110" refid="namespaceutil_a9f5c13636a731d3784dd09cb9a4e5d36_1a9f5c13636a731d3784dd09cb9a4e5d36" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceutil_a9f5c13636a731d3784dd09cb9a4e5d36_1a9f5c13636a731d3784dd09cb9a4e5d36" kindref="member">printBinary</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>val<sp/>)</highlight></codeline>
<codeline lineno="111"><highlight class="normal">{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>std::bitset&lt;32&gt;<sp/>bin{val};</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>bin;</highlight></codeline>
<codeline lineno="114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal">std::tuple&lt;int,<sp/>int,<sp/>int&gt;<sp/><ref refid="namespaceutil_aa6b8fb4c8d30e5b2f82e8b2aaceaa541_1aa6b8fb4c8d30e5b2f82e8b2aaceaa541" kindref="member">timeToHms</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>time<sp/>);</highlight></codeline>
<codeline lineno="117"><highlight class="normal">std::tuple&lt;int,<sp/>int,<sp/>int&gt;<sp/><ref refid="namespaceutil_aa594e46f7f551ca6c16364ea1d1fda35_1aa594e46f7f551ca6c16364ea1d1fda35" kindref="member">secondsToHms</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>totalSecs<sp/>);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal">time_t<sp/><ref refid="namespaceutil_a5974fc1551b19ddb73b26a08a44d34c1_1a5974fc1551b19ddb73b26a08a44d34c1" kindref="member">secondsToTimeT</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s<sp/>);</highlight></codeline>
<codeline lineno="123"><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespaceutil_ab7bc28dff3d367e7cf9c472f42112628_1ab7bc28dff3d367e7cf9c472f42112628" kindref="member">timeTtoSeconds</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>time_t<sp/>t<sp/>);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal">std::uintptr_t<sp/><ref refid="namespaceutil_a3d18d29fbb21273515e6b38ff2b47109_1a3d18d29fbb21273515e6b38ff2b47109" kindref="member">pointerToInt</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p<sp/>);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="namespaceutil_a37236425a39502bc2364fe09e185d262_1a37236425a39502bc2364fe09e185d262" kindref="member">intToPointer</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uintptr_t<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="namespaceutil_af3e0fba53fdf2642e7e7b847f293c278_1af3e0fba53fdf2642e7e7b847f293c278" kindref="member">addPointers</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p2<sp/>);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal">std::string<sp/><ref refid="namespaceutil_a46c3e4ce9bbbdf7785ac019134080adb_1a46c3e4ce9bbbdf7785ac019134080adb" kindref="member">operator+</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string_view<sp/>&amp;sv1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string_view<sp/>&amp;sv2<sp/>);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/>std::enable_if_t&lt;std::is_arithmetic_v&lt;T&gt;&gt;&gt;</highlight></codeline>
<codeline lineno="133" refid="namespaceutil_a03db4e23a89578616a42638fcae43646_1a03db4e23a89578616a42638fcae43646" refkind="member"><highlight class="normal">std::string<sp/><ref refid="namespaceutil_a03db4e23a89578616a42638fcae43646_1a03db4e23a89578616a42638fcae43646" kindref="member">getNumberString</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>num<sp/>)</highlight></codeline>
<codeline lineno="134"><highlight class="normal">{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>ss.imbue(<sp/>std::locale{</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">}<sp/>);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>std::fixed</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>num;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ss.str();</highlight></codeline>
<codeline lineno="140"><highlight class="normal">}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal">std::string<sp/><ref refid="namespaceutil_aeb767cc44dedcd141e63a057cc250ca7_1aeb767cc44dedcd141e63a057cc250ca7" kindref="member">generateCaptcha</ref>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len<sp/>);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="namespaceutil_a231ff37a555718ffa5cbaa39694b0025_1a231ff37a555718ffa5cbaa39694b0025" kindref="member">mapToByte</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>value<sp/>);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="namespaceutil_a231ff37a555718ffa5cbaa39694b0025_1a231ff37a555718ffa5cbaa39694b0025" kindref="member">mapToByte</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value<sp/>);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceutil_a58bf66e63af566389408f9b12cdb066f_1a58bf66e63af566389408f9b12cdb066f" kindref="member">isAligned</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*p,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>alignment<sp/>)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceutil_a58bf66e63af566389408f9b12cdb066f_1a58bf66e63af566389408f9b12cdb066f" kindref="member">isAligned</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::uintptr_t<sp/>pi,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>alignment<sp/>)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespaceutil_a93f7209e8be0722fb528788aa9942b53_1a93f7209e8be0722fb528788aa9942b53" kindref="member">is4ByteAligned</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>intptr_t<sp/>*addr<sp/>);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="154" refid="namespaceutil_a9c9724666639b7f1c138eb0c4bddd75b_1a9c9724666639b7f1c138eb0c4bddd75b" refkind="member"><highlight class="normal">T*<sp/><ref refid="namespaceutil_a9c9724666639b7f1c138eb0c4bddd75b_1a9c9724666639b7f1c138eb0c4bddd75b" kindref="member">alignForward</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>*p,</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>alignment<sp/>)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal">{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>alignment<sp/>==<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::uintptr_t<sp/>ip<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">std::uintptr_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>p<sp/>);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ip<sp/>%<sp/>alignment<sp/>==<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">T*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>(<sp/>ip<sp/>+<sp/>(<sp/>alignment<sp/>-<sp/>1<sp/>)<sp/>)<sp/>&amp;<sp/>~(<sp/>alignment<sp/>-<sp/>1<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>or:<sp/>(ip<sp/>+<sp/>alignment<sp/>-<sp/>1)<sp/>/<sp/>alignment<sp/>*<sp/>alignment;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal">}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal">std::uintptr_t<sp/><ref refid="namespaceutil_a9c9724666639b7f1c138eb0c4bddd75b_1a9c9724666639b7f1c138eb0c4bddd75b" kindref="member">alignForward</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::uintptr_t<sp/>ip,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>alignment<sp/>)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="172"><highlight class="normal">std::size_t<sp/><ref refid="namespaceutil_ad035326969b82db340b760d38f06b68f_1ad035326969b82db340b760d38f06b68f" kindref="member">calcAlignedSize</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>alignment<sp/>);</highlight></codeline>
<codeline lineno="174"><highlight class="normal">std::size_t<sp/><ref refid="namespaceutil_a61142bea7d10f60b833c4380abeba43e_1a61142bea7d10f60b833c4380abeba43e" kindref="member">getForwardPadding</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>p,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>alignment<sp/>);</highlight></codeline>
<codeline lineno="175"><highlight class="normal">std::size_t<sp/><ref refid="namespaceutil_add2671cb84bf5dbb46e11970804b154b_1add2671cb84bf5dbb46e11970804b154b" kindref="member">getForwardPaddingWithHeader</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>p,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>alignment,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>headerSize<sp/>);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="178" refid="namespaceutil_aee781f7c6f96423d9c888e1b1cc0e8e4_1aee781f7c6f96423d9c888e1b1cc0e8e4" refkind="member"><highlight class="normal">T*<sp/><ref refid="namespaceutil_aee781f7c6f96423d9c888e1b1cc0e8e4_1aee781f7c6f96423d9c888e1b1cc0e8e4" kindref="member">alignPtr</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>*ptr,</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>alignment<sp/>)</highlight></codeline>
<codeline lineno="180"><highlight class="normal">{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::uintptr_t<sp/>uintPtr<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">std::uintptr_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>ptr<sp/>);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::uintptr_t<sp/>alignedUintPtr<sp/>=<sp/>(<sp/>uintPtr<sp/>+<sp/>(<sp/>alignment<sp/>-<sp/>1<sp/>)<sp/>)<sp/>&amp;<sp/>~(<sp/>alignment<sp/>-<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>*alignedPtr<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">T*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>alignedUintPtr<sp/>);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="assertions__console_8h_af3e11288cb5021b91949be5058816137_1af3e11288cb5021b91949be5058816137" kindref="member">ASSERT</ref>(<sp/><ref refid="namespaceutil_a58bf66e63af566389408f9b12cdb066f_1a58bf66e63af566389408f9b12cdb066f" kindref="member">isAligned</ref>(<sp/>alignedPtr,<sp/>alignment<sp/>),<sp/></highlight><highlight class="stringliteral">&quot;Not<sp/>aligned!&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>alignedPtr;</highlight></codeline>
<codeline lineno="186"><highlight class="normal">}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="comment">//<sp/>INTEL:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="comment">//void<sp/>*_mm_malloc(int<sp/>size,<sp/>int<sp/>align)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="comment">//void<sp/>_mm_free(void<sp/>*p)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning(<sp/>disable<sp/>:<sp/>4312<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193" refid="namespaceutil_a6564cc9d8da8d8b046599547c73abdb5_1a6564cc9d8da8d8b046599547c73abdb5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">&amp;<sp/><ref refid="namespaceutil_a6564cc9d8da8d8b046599547c73abdb5_1a6564cc9d8da8d8b046599547c73abdb5" kindref="member">readMEM</ref>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>memoryAddress<sp/>)</highlight></codeline>
<codeline lineno="194"><highlight class="normal">{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>volatile*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>memoryAddress<sp/>);</highlight></codeline>
<codeline lineno="196"><highlight class="normal">}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning(<sp/>default<sp/>:<sp/>4312<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning(<sp/>disable<sp/>:<sp/>4312<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200" refid="namespaceutil_aef4aca946c9ba9c6f9a90078e2318ce0_1aef4aca946c9ba9c6f9a90078e2318ce0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal">&amp;<sp/><ref refid="namespaceutil_a6564cc9d8da8d8b046599547c73abdb5_1a6564cc9d8da8d8b046599547c73abdb5" kindref="member">readMEM</ref>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>memoryAddress<sp/>)</highlight></codeline>
<codeline lineno="201"><highlight class="normal">{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>volatile*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>memoryAddress<sp/>);</highlight></codeline>
<codeline lineno="203"><highlight class="normal">}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning(<sp/>default<sp/>:<sp/>4312<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="207" refid="namespaceutil_ab67eedf6aa91b69039e0b9b670d83c6d_1ab67eedf6aa91b69039e0b9b670d83c6d" refkind="member"><highlight class="normal">[[nodiscard]]<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>restricted<sp/>noaliasing<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="namespaceutil_ab67eedf6aa91b69039e0b9b670d83c6d_1ab67eedf6aa91b69039e0b9b670d83c6d" kindref="member">getUniqueMemory</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::size_t<sp/>bytes<sp/>)</highlight></codeline>
<codeline lineno="208"><highlight class="normal">{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::malloc(bytes);</highlight></codeline>
<codeline lineno="210"><highlight class="normal">}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="213" refid="namespaceutil_ab305fd67d4668cd0e46468fe31accb20_1ab305fd67d4668cd0e46468fe31accb20" refkind="member"><highlight class="normal">T&amp;<sp/><ref refid="namespaceutil_ab305fd67d4668cd0e46468fe31accb20_1ab305fd67d4668cd0e46468fe31accb20" kindref="member">deconst</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;obj<sp/>)</highlight></codeline>
<codeline lineno="214"><highlight class="normal">{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">T&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>obj<sp/>);</highlight></codeline>
<codeline lineno="216"><highlight class="normal">}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="219" refid="namespaceutil_a3f2b31d531a438ac0a59071a4d2cab20_1a3f2b31d531a438ac0a59071a4d2cab20" refkind="member"><highlight class="normal">T*<sp/><ref refid="namespaceutil_ab305fd67d4668cd0e46468fe31accb20_1ab305fd67d4668cd0e46468fe31accb20" kindref="member">deconst</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>*obj<sp/>)</highlight></codeline>
<codeline lineno="220"><highlight class="normal">{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">T*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>obj<sp/>);</highlight></codeline>
<codeline lineno="222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="comment">//<sp/>ALGORITHMS</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TContainer,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TP&gt;</highlight></codeline>
<codeline lineno="231" refid="namespaceutil_af7a54da6af4a424b6d67d21d68ec09ec_1af7a54da6af4a424b6d67d21d68ec09ec" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">)<sp/><ref refid="namespaceutil_af7a54da6af4a424b6d67d21d68ec09ec_1af7a54da6af4a424b6d67d21d68ec09ec" kindref="member">pointerToIterator</ref>(<sp/>TContainer<sp/>&amp;c,</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>TP<sp/>pElem<sp/>)</highlight></codeline>
<codeline lineno="233"><highlight class="normal">{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::find_if(<sp/>c.begin(),<sp/>c.end(),<sp/>[&amp;pElem]<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TP<sp/>&amp;p<sp/>)</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>pElem<sp/>==<sp/>std::addressof(<sp/>*p<sp/>);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>);</highlight></codeline>
<codeline lineno="238"><highlight class="normal">}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TContainer&gt;</highlight></codeline>
<codeline lineno="241" refid="namespaceutil_a036a8b413dc66470ab317df5efe86e74_1a036a8b413dc66470ab317df5efe86e74" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceutil_a036a8b413dc66470ab317df5efe86e74_1a036a8b413dc66470ab317df5efe86e74" kindref="member">removeByBackSwap</ref>(<sp/>TContainer<sp/>&amp;container,</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TContainer::size_type<sp/>index<sp/>)</highlight></codeline>
<codeline lineno="243"><highlight class="normal">{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>container[index]<sp/>=<sp/>std::move(<sp/>container.back()<sp/>);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>container.pop_back();</highlight></codeline>
<codeline lineno="246"><highlight class="normal">}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TContainer&gt;</highlight></codeline>
<codeline lineno="249" refid="namespaceutil_a3ff21d733c678e940c5eb027bd98c06a_1a3ff21d733c678e940c5eb027bd98c06a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceutil_a036a8b413dc66470ab317df5efe86e74_1a036a8b413dc66470ab317df5efe86e74" kindref="member">removeByBackSwap</ref>(<sp/>TContainer<sp/>&amp;container,</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TContainer::iterator<sp/>iter<sp/>)</highlight></codeline>
<codeline lineno="251"><highlight class="normal">{</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>*iter<sp/>=<sp/>std::move(<sp/>container.back()<sp/>);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>container.pop_back();</highlight></codeline>
<codeline lineno="254"><highlight class="normal">}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Alloc<sp/>=<sp/>std::allocator&lt;T&gt;,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/>std::enable_if_t&lt;std::is_po</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">er_v&lt;T&gt;&gt;&gt;</highlight></codeline>
<codeline lineno="257" refid="namespaceutil_a9857a3a40e4aff93d01dcacf6a202224_1a9857a3a40e4aff93d01dcacf6a202224" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceutil_a036a8b413dc66470ab317df5efe86e74_1a036a8b413dc66470ab317df5efe86e74" kindref="member">removeByBackSwap</ref>(<sp/>std::vector&lt;T,<sp/>Alloc&gt;<sp/>&amp;v,</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>p<sp/>)</highlight></codeline>
<codeline lineno="259"><highlight class="normal">{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::vector&lt;T,<sp/>Alloc&gt;::iterator<sp/>iter<sp/>=<sp/><ref refid="namespaceutil_af7a54da6af4a424b6d67d21d68ec09ec_1af7a54da6af4a424b6d67d21d68ec09ec" kindref="member">pointerToIterator</ref>(<sp/>v,<sp/>p<sp/>);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>iter<sp/>==<sp/>v.end()<sp/>)</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>*iter<sp/>=<sp/>std::move(<sp/>v.back()<sp/>);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>v.pop_back();</highlight></codeline>
<codeline lineno="267"><highlight class="normal">}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TContainer,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Predicate,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/>std::enable_if_t&lt;std::is_function_v&lt;Predicate&gt;&gt;&gt;</highlight></codeline>
<codeline lineno="270" refid="namespaceutil_a5484eeb515a00225f06c63ddcdb789ed_1a5484eeb515a00225f06c63ddcdb789ed" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceutil_a036a8b413dc66470ab317df5efe86e74_1a036a8b413dc66470ab317df5efe86e74" kindref="member">removeByBackSwap</ref>(<sp/>TContainer<sp/>&amp;c,</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>Predicate<sp/>pred<sp/>)</highlight></codeline>
<codeline lineno="272"><highlight class="normal">{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>newEnd<sp/>=<sp/>std::remove_if(<sp/>c.begin(),<sp/>c.end(),<sp/>pred<sp/>);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>c.erase(<sp/>newEnd,<sp/>c.end()<sp/>);</highlight></codeline>
<codeline lineno="275"><highlight class="normal">}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Alloc<sp/>=<sp/>std::allocator&lt;T&gt;&gt;</highlight></codeline>
<codeline lineno="279" refid="namespaceutil_a67fe6fa3794ebffb16979bb6dee51796_1a67fe6fa3794ebffb16979bb6dee51796" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceutil_a67fe6fa3794ebffb16979bb6dee51796_1a67fe6fa3794ebffb16979bb6dee51796" kindref="member">shrinkCapacity</ref>(<sp/>std::vector&lt;T,<sp/>Alloc&gt;&amp;<sp/>v<sp/>)</highlight></codeline>
<codeline lineno="280"><highlight class="normal">{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;T,<sp/>Alloc&gt;(<sp/>v.begin(),<sp/>v.end()<sp/>).swap(<sp/>v<sp/>);</highlight></codeline>
<codeline lineno="282"><highlight class="normal">}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>InputIt,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>OutputIt,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TPredicate&gt;</highlight></codeline>
<codeline lineno="286" refid="namespaceutil_aed7f0709400954da58ff6957685bf016_1aed7f0709400954da58ff6957685bf016" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceutil_aed7f0709400954da58ff6957685bf016_1aed7f0709400954da58ff6957685bf016" kindref="member">moveIf</ref>(<sp/>InputIt<sp/>srcFirst,</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>InputIt<sp/>srcLast,</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>OutputIt<sp/>*destFirst,</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>TPredicate<sp/>predicate<sp/>)</highlight></codeline>
<codeline lineno="290"><highlight class="normal">{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>std::copy_if(<sp/>std::move_iterator(<sp/>srcFirst<sp/>),<sp/>std::move_iterator(<sp/>srcLast<sp/>),<sp/>std::back_inserter(<sp/>*destFirst<sp/>),<sp/>predicate<sp/>);</highlight></codeline>
<codeline lineno="292"><highlight class="normal">}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Container,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TPredicate&gt;</highlight></codeline>
<codeline lineno="296" refid="namespaceutil_a6b96830b7748a3066f44445b1924509e_1a6b96830b7748a3066f44445b1924509e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceutil_a6b96830b7748a3066f44445b1924509e_1a6b96830b7748a3066f44445b1924509e" kindref="member">splitMovePartition</ref>(<sp/>Container<sp/>&amp;src,</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>Container<sp/>&amp;dest,</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>TPredicate<sp/>p<sp/>)</highlight></codeline>
<codeline lineno="299"><highlight class="normal">{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>newEnd<sp/>=<sp/>std::partition_copy(<sp/>std::move_iterator(<sp/>src.begin()<sp/>),<sp/>std::move_iterator(<sp/>src.end()<sp/>),<sp/>src.begin(),<sp/>std::back_inserter(<sp/>dest<sp/>),<sp/>p<sp/>);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>src.erase(<sp/>newEnd.first,<sp/>src.end()<sp/>);</highlight></codeline>
<codeline lineno="302"><highlight class="normal">}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TContainer&gt;</highlight></codeline>
<codeline lineno="305" refid="namespaceutil_a58dd24c8b09761efb10fc993c89bc05e_1a58dd24c8b09761efb10fc993c89bc05e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceutil_a58dd24c8b09761efb10fc993c89bc05e_1a58dd24c8b09761efb10fc993c89bc05e" kindref="member">printContainer</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TContainer<sp/>&amp;cont,</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*delimiter<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="307"><highlight class="normal">{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>std::copy(<sp/>cont.begin(),<sp/>cont.end(),<sp/>std::ostream_iterator&lt;typename<sp/>TContainer::value_type&gt;(<sp/>std::cout,<sp/>delimiter<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="309"><highlight class="normal">}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceutil_ad3b133a1c662a66bf659eea11d75eb58_1ad3b133a1c662a66bf659eea11d75eb58" kindref="member">regexSearch</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::regex<sp/>&amp;pattern<sp/>);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TContainer,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func&gt;</highlight></codeline>
<codeline lineno="314" refid="namespaceutil_a877a49123c9b34454e4cc00bcf38656f_1a877a49123c9b34454e4cc00bcf38656f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">)<sp/><ref refid="namespaceutil_a877a49123c9b34454e4cc00bcf38656f_1a877a49123c9b34454e4cc00bcf38656f" kindref="member">doForAll</ref>(<sp/>TContainer<sp/>&amp;c,</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>Func<sp/>f<sp/>)</highlight></codeline>
<codeline lineno="316"><highlight class="normal">{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;i<sp/>:<sp/>c<sp/>)</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f(<sp/>i<sp/>);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="321"><highlight class="normal">}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Container,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>FilterFunction&gt;</highlight></codeline>
<codeline lineno="324" refid="namespaceutil_a6ac2760c082e6c54ba90f23a4eed04d0_1a6ac2760c082e6c54ba90f23a4eed04d0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">)<sp/><ref refid="namespaceutil_a6ac2760c082e6c54ba90f23a4eed04d0_1a6ac2760c082e6c54ba90f23a4eed04d0" kindref="member">filterContainer</ref>(<sp/>Container<sp/>&amp;c,</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FilterFunction&amp;&amp;<sp/>f<sp/>)</highlight></codeline>
<codeline lineno="326"><highlight class="normal">{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(<sp/><ref refid="key__type__traits_8h_afd5235ab6d17ce521e2312cc80a317f9_1afd5235ab6d17ce521e2312cc80a317f9" kindref="member">is_container_v&lt;Container&gt;</ref>,<sp/></highlight><highlight class="stringliteral">&quot;c<sp/>is<sp/>not<sp/>a<sp/>container<sp/>type!&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::transform(<sp/>std::execution::par,<sp/>c.begin(),<sp/>c.end(),<sp/>f<sp/>);</highlight></codeline>
<codeline lineno="330"><highlight class="normal">}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TContainer&gt;</highlight></codeline>
<codeline lineno="334" refid="namespaceutil_a2ef5892f48b68ba6b7bb511acb0f3d11_1a2ef5892f48b68ba6b7bb511acb0f3d11" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TContainer::iterator<sp/><ref refid="namespaceutil_a2ef5892f48b68ba6b7bb511acb0f3d11_1a2ef5892f48b68ba6b7bb511acb0f3d11" kindref="member">erase</ref>(<sp/>TContainer&amp;<sp/>container,</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TContainer::const_reference<sp/>element_to_erase<sp/>)</highlight></codeline>
<codeline lineno="336"><highlight class="normal">{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>container.erase(<sp/>std::remove(<sp/>std::begin(<sp/>container<sp/>),<sp/>std::end(<sp/>container<sp/>),<sp/>element_to_erase<sp/>),<sp/>std::end(<sp/>container<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="338"><highlight class="normal">}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TContainer,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TPredicate&gt;</highlight></codeline>
<codeline lineno="341" refid="namespaceutil_a5b404ca0691f2398dc871913e83889b0_1a5b404ca0691f2398dc871913e83889b0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TContainer::iterator<sp/><ref refid="namespaceutil_a5b404ca0691f2398dc871913e83889b0_1a5b404ca0691f2398dc871913e83889b0" kindref="member">eraseIf</ref>(<sp/>TContainer&amp;<sp/>container,</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>TPredicate&amp;&amp;<sp/>predicate<sp/>)</highlight></codeline>
<codeline lineno="343"><highlight class="normal">{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TContainer::iterator<sp/>old_end_itr<sp/>=<sp/>std::end(<sp/>container<sp/>);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TContainer::iterator<sp/>new_end_itr<sp/>=<sp/>std::remove_if(<sp/>std::begin(<sp/>container<sp/>),<sp/>old_end_itr,<sp/>std::forward&lt;TPredicate&gt;(<sp/>predicate<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>container.erase(<sp/>new_end_itr,<sp/>old_end_itr<sp/>);</highlight></codeline>
<codeline lineno="348"><highlight class="normal">}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TContainer,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="351" refid="namespaceutil_ac80bfe48c9a68a400561a202412881b7_1ac80bfe48c9a68a400561a202412881b7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceutil_ac80bfe48c9a68a400561a202412881b7_1ac80bfe48c9a68a400561a202412881b7" kindref="member">containerContains</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TContainer&amp;<sp/>container,</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>val<sp/>)</highlight></codeline>
<codeline lineno="353"><highlight class="normal">{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>cend<sp/>=<sp/>std::cend(<sp/>container<sp/>);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::find(<sp/>std::cbegin(<sp/>container<sp/>),<sp/>cend,<sp/>val<sp/>)<sp/>!=<sp/>cend;</highlight></codeline>
<codeline lineno="356"><highlight class="normal">}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TIt,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TPredicate&gt;</highlight></codeline>
<codeline lineno="361" refid="namespaceutil_a38fdd47f119e081602b54f1d0655495c_1a38fdd47f119e081602b54f1d0655495c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceutil_a38fdd47f119e081602b54f1d0655495c_1a38fdd47f119e081602b54f1d0655495c" kindref="member">atLeastNOfRange</ref>(<sp/>TIt<sp/>begin,</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>TIt<sp/>end,</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>TPredicate<sp/>&amp;&amp;predicate<sp/>)</highlight></codeline>
<codeline lineno="365"><highlight class="normal">{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">T<sp/>=<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(<sp/>*begin<sp/>);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n<sp/>==<sp/>0u<sp/>||<sp/>std::any_of(<sp/>begin,<sp/>end,<sp/>[&amp;n,<sp/>&amp;predicate]<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;element<sp/>)</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>-=<sp/>predicate(<sp/>element<sp/>)<sp/>?<sp/>1u<sp/>:<sp/>0u;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n<sp/>==<sp/>0u;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>);</highlight></codeline>
<codeline lineno="373"><highlight class="normal">}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TContainer,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TPredicate&gt;</highlight></codeline>
<codeline lineno="376" refid="namespaceutil_adb3cafa314ce4c8b575ec76fe6fe18b2_1adb3cafa314ce4c8b575ec76fe6fe18b2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceutil_a38fdd47f119e081602b54f1d0655495c_1a38fdd47f119e081602b54f1d0655495c" kindref="member">atLeastNOfRange</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TContainer<sp/>&amp;container,</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>TPredicate<sp/>&amp;&amp;predicate<sp/>)</highlight></codeline>
<codeline lineno="379"><highlight class="normal">{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceutil_a38fdd47f119e081602b54f1d0655495c_1a38fdd47f119e081602b54f1d0655495c" kindref="member">atLeastNOfRange</ref>(<sp/>std::cbegin(<sp/>container<sp/>),<sp/>std::cend(<sp/>container<sp/>),<sp/>n,<sp/>std::forward&lt;TPredicate&gt;(<sp/>predicate<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="381"><highlight class="normal">}</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TContainer,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="384" refid="namespaceutil_a960806e3d8cd482b70e3e05c86029298_1a960806e3d8cd482b70e3e05c86029298" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="namespaceutil_a960806e3d8cd482b70e3e05c86029298_1a960806e3d8cd482b70e3e05c86029298" kindref="member">indexOf</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TContainer<sp/>&amp;container,</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;val<sp/>)</highlight></codeline>
<codeline lineno="386"><highlight class="normal">{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>begin<sp/>=<sp/>std::begin(<sp/>container<sp/>);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>end<sp/>=<sp/>std::end(<sp/>container<sp/>);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::distance(<sp/>begin,<sp/>std::find(<sp/>begin,<sp/>end,<sp/>val<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="391"><highlight class="normal">}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TContainer,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TInserter&gt;</highlight></codeline>
<codeline lineno="394" refid="namespaceutil_acbc2b82ea3979bb100d92ece91f7f3db_1acbc2b82ea3979bb100d92ece91f7f3db" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceutil_acbc2b82ea3979bb100d92ece91f7f3db_1acbc2b82ea3979bb100d92ece91f7f3db" kindref="member">insertUnique</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TContainer<sp/>&amp;container,</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>&amp;&amp;val,</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>TInserter<sp/>&amp;&amp;inserter<sp/>)</highlight></codeline>
<codeline lineno="397"><highlight class="normal">{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!<ref refid="namespaceutil_ac80bfe48c9a68a400561a202412881b7_1ac80bfe48c9a68a400561a202412881b7" kindref="member">containerContains</ref>(<sp/>container,<sp/>val<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inserter(<sp/>std::forward&lt;T&gt;(<sp/>val<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="404"><highlight class="normal">}</highlight></codeline>
<codeline lineno="405" refid="namespaceutil_a5de5007ffb79d6aee3610259de1d9f85_1a5de5007ffb79d6aee3610259de1d9f85" refkind="member"><highlight class="normal"><ref refid="utils__global_8h_a7ca14f19bceddbf7f92d70e763f5e5b4_1a7ca14f19bceddbf7f92d70e763f5e5b4" kindref="member">ALIAS_FUNCTION</ref>(<sp/><ref refid="namespaceutil_acbc2b82ea3979bb100d92ece91f7f3db_1acbc2b82ea3979bb100d92ece91f7f3db" kindref="member">insertUnique</ref>,<sp/>emplaceBackUnique<sp/>);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TContainer,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TPredicate,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>TArgs&gt;</highlight></codeline>
<codeline lineno="408" refid="namespaceutil_af6c387c95398dd84b0b28bb6a249d8e1_1af6c387c95398dd84b0b28bb6a249d8e1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TContainer::iterator<sp/><ref refid="namespaceutil_af6c387c95398dd84b0b28bb6a249d8e1_1af6c387c95398dd84b0b28bb6a249d8e1" kindref="member">insertUniqueAndReturnIt</ref>(<sp/>TContainer<sp/>&amp;container,</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>TPredicate<sp/>&amp;&amp;predicate,</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>TArgs&amp;&amp;...<sp/>args<sp/>)</highlight></codeline>
<codeline lineno="411"><highlight class="normal">{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TContainer::value_type*<sp/>result<sp/>=<sp/>tryFindIf(<sp/>container,</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::forward&lt;TPredicate&gt;(<sp/>predicate<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>result<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;container.emplace_back(<sp/>std::forward&lt;TArgs&gt;(<sp/>args<sp/>)...<sp/>);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="420"><highlight class="normal">}</highlight></codeline>
<codeline lineno="421" refid="namespaceutil_a9ba383f0a8a3a1bc98251bc9779a9447_1a9ba383f0a8a3a1bc98251bc9779a9447" refkind="member"><highlight class="normal"><ref refid="utils__global_8h_a7ca14f19bceddbf7f92d70e763f5e5b4_1a7ca14f19bceddbf7f92d70e763f5e5b4" kindref="member">ALIAS_FUNCTION</ref>(<sp/><ref refid="namespaceutil_af6c387c95398dd84b0b28bb6a249d8e1_1af6c387c95398dd84b0b28bb6a249d8e1" kindref="member">insertUniqueAndReturnIt</ref>,<sp/>emplaceBackUniqueAndReturnIt<sp/>);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TContainer,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TComparator&gt;</highlight></codeline>
<codeline lineno="424" refid="namespaceutil_a03de7de71598df04ee509baa662ca4bb_1a03de7de71598df04ee509baa662ca4bb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceutil_a03de7de71598df04ee509baa662ca4bb_1a03de7de71598df04ee509baa662ca4bb" kindref="member">hasDuplicates</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TContainer<sp/>&amp;container,</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TComparator<sp/>&amp;comparator<sp/>)</highlight></codeline>
<codeline lineno="426"><highlight class="normal">{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">TIt<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TContainer::const_iterator;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">T<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TContainer::value_type;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_unique<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>TIt<sp/>end<sp/>=<sp/>std::end(<sp/>container<sp/>),<sp/>itr1<sp/>=<sp/>std::begin(<sp/>container<sp/>);<sp/>is_unique<sp/>&amp;&amp;<sp/>itr1<sp/>!=<sp/>end;<sp/>itr1<sp/>=<sp/>std::next(<sp/>itr1<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//If<sp/>the<sp/>type<sp/>contained<sp/>in<sp/>the<sp/>container<sp/>is<sp/>a<sp/>pointer<sp/>or<sp/>a<sp/>number<sp/>we<sp/>pass<sp/>everything<sp/>by<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(<sp/>std::is_pointer_v&lt;T&gt;<sp/>||<sp/>std::is_arithmetic_v&lt;T&gt;<sp/>)</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>uniqueness_predicate<sp/>=<sp/>[&amp;comparator,<sp/>lhs<sp/>=<sp/>*itr1](<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>rhs<sp/>)</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>comparator(<sp/>lhs,<sp/>rhs<sp/>);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_unique<sp/>=<sp/>std::none_of(<sp/>std::next(<sp/>itr1<sp/>),<sp/>end,<sp/>uniqueness_predicate<sp/>);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Otherwise<sp/>pass<sp/>everything<sp/>by<sp/>const<sp/>lval<sp/>ref</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>uniqueness_predicate<sp/>=<sp/>[&amp;comparator,<sp/>&amp;lhs<sp/>=<sp/>*itr1](<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TContainer::const_reference<sp/>rhs<sp/>)</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>comparator(<sp/>lhs,<sp/>rhs<sp/>);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_unique<sp/>=<sp/>std::none_of(<sp/>std::next(<sp/>itr1<sp/>),<sp/>end,<sp/>uniqueness_predicate<sp/>);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>is_unique<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="457"><highlight class="normal">}</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TContainer&gt;</highlight></codeline>
<codeline lineno="460" refid="namespaceutil_a789527bc816c768125c4a0a27d17ecc5_1a789527bc816c768125c4a0a27d17ecc5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceutil_a03de7de71598df04ee509baa662ca4bb_1a03de7de71598df04ee509baa662ca4bb" kindref="member">hasDuplicates</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TContainer<sp/>&amp;container<sp/>)</highlight></codeline>
<codeline lineno="461"><highlight class="normal">{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceutil_a03de7de71598df04ee509baa662ca4bb_1a03de7de71598df04ee509baa662ca4bb" kindref="member">hasDuplicates</ref>(<sp/>container,<sp/>std::equal_to()<sp/>);</highlight></codeline>
<codeline lineno="463"><highlight class="normal">}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TContainer&gt;</highlight></codeline>
<codeline lineno="466" refid="namespaceutil_ae4e48cd44f98e109329f1cf1a165bc56_1ae4e48cd44f98e109329f1cf1a165bc56" refkind="member"><highlight class="normal">std::set&lt;typename<sp/>TContainer::value_type&gt;<sp/><ref refid="namespaceutil_ae4e48cd44f98e109329f1cf1a165bc56_1ae4e48cd44f98e109329f1cf1a165bc56" kindref="member">uniquefy</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TContainer<sp/>&amp;container<sp/>)</highlight></codeline>
<codeline lineno="467"><highlight class="normal">{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>std::set&lt;typename<sp/>TContainer::value_type&gt;<sp/>seen;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TContainer::value_type<sp/>&amp;in<sp/>:<sp/>container<sp/>)</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>seen.insert(<sp/>in<sp/>);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>seen;</highlight></codeline>
<codeline lineno="474"><highlight class="normal">}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal">}</highlight><highlight class="comment">//namespace<sp/>util</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="inc/utils.h"/>
  </compounddef>
</doxygen>
