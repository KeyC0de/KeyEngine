<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.12.0" xml:lang="en-US">
  <compounddef id="key__timer_8h" kind="file" language="C++">
    <compoundname>key_timer.h</compoundname>
    <includes local="no">thread</includes>
    <includes local="no">chrono</includes>
    <includes refid="console_8h" local="yes">console.h</includes>
    <includes refid="non__copyable_8h" local="yes">non_copyable.h</includes>
    <includes refid="math__utils_8h" local="yes">math_utils.h</includes>
    <includedby refid="game_8h" local="yes">inc/game.h</includedby>
    <includedby refid="graphics_8h" local="yes">inc/graphics.h</includedby>
    <includedby refid="performance__log_8h" local="yes">inc/performance_log.h</includedby>
    <includedby refid="console_8cpp" local="yes">src/console.cpp</includedby>
    <includedby refid="key__sound_8cpp" local="yes">src/key_sound.cpp</includedby>
    <incdepgraph>
      <node id="17">
        <label>assertions_console.h</label>
        <link refid="assertions__console_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>console.h</label>
        <link refid="console_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>inc/key_timer.h</label>
        <link refid="key__timer_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>key_type_traits.h</label>
        <link refid="key__type__traits_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>math_utils.h</label>
        <link refid="math__utils_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>non_copyable.h</label>
        <link refid="non__copyable_8h"/>
      </node>
      <node id="19">
        <label>utils.h</label>
        <link refid="utils_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>utils_global.h</label>
        <link refid="utils__global_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>winner.h</label>
        <link refid="winner_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>Windows.h</label>
      </node>
      <node id="26">
        <label>algorithm</label>
      </node>
      <node id="22">
        <label>bitset</label>
      </node>
      <node id="3">
        <label>chrono</label>
      </node>
      <node id="24">
        <label>cinttypes</label>
      </node>
      <node id="11">
        <label>cmath</label>
      </node>
      <node id="23">
        <label>cstddef</label>
      </node>
      <node id="12">
        <label>cstdint</label>
      </node>
      <node id="30">
        <label>execution</label>
      </node>
      <node id="25">
        <label>future</label>
      </node>
      <node id="15">
        <label>iomanip</label>
      </node>
      <node id="18">
        <label>iostream</label>
      </node>
      <node id="28">
        <label>iterator</label>
      </node>
      <node id="16">
        <label>limits</label>
      </node>
      <node id="27">
        <label>numeric</label>
      </node>
      <node id="29">
        <label>regex</label>
      </node>
      <node id="7">
        <label>sdkddkver.h</label>
      </node>
      <node id="21">
        <label>set</label>
      </node>
      <node id="14">
        <label>sstream</label>
      </node>
      <node id="5">
        <label>string</label>
      </node>
      <node id="2">
        <label>thread</label>
      </node>
      <node id="13">
        <label>type_traits</label>
      </node>
      <node id="20">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="6">
        <label>inc/constant_buffer.h</label>
        <link refid="constant__buffer_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>inc/game.h</label>
        <link refid="game_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>inc/graphics.h</label>
        <link refid="graphics_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>inc/key_timer.h</label>
        <link refid="key__timer_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
      </node>
      <node id="54">
        <label>inc/performance_log.h</label>
        <link refid="performance__log_8h"/>
        <childnode refid="55" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>inc/shadow_pass.h</label>
        <link refid="shadow__pass_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>inc/sky_vscb.h</label>
        <link refid="sky__vscb_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>src/MODEL.CPP</label>
        <link refid="MODEL_8CPP"/>
      </node>
      <node id="8">
        <label>src/SHADOW_PASS.CPP</label>
        <link refid="SHADOW__PASS_8CPP"/>
      </node>
      <node id="19">
        <label>src/blend_state.cpp</label>
        <link refid="blend__state_8cpp"/>
      </node>
      <node id="20">
        <label>src/blur_outline_draw_pass.cpp</label>
        <link refid="blur__outline__draw__pass_8cpp"/>
      </node>
      <node id="21">
        <label>src/camera.cpp</label>
        <link refid="camera_8cpp"/>
      </node>
      <node id="14">
        <label>src/camera_frustum.cpp</label>
        <link refid="camera__frustum_8cpp"/>
      </node>
      <node id="22">
        <label>src/camera_manager.cpp</label>
        <link refid="camera__manager_8cpp"/>
      </node>
      <node id="15">
        <label>src/camera_widget.cpp</label>
        <link refid="camera__widget_8cpp"/>
      </node>
      <node id="56">
        <label>src/console.cpp</label>
        <link refid="console_8cpp"/>
      </node>
      <node id="23">
        <label>src/constant_buffer_ex.cpp</label>
        <link refid="constant__buffer__ex_8cpp"/>
      </node>
      <node id="24">
        <label>src/cube.cpp</label>
        <link refid="cube_8cpp"/>
      </node>
      <node id="25">
        <label>src/cube_texture.cpp</label>
        <link refid="cube__texture_8cpp"/>
      </node>
      <node id="26">
        <label>src/depth_stencil_state.cpp</label>
        <link refid="depth__stencil__state_8cpp"/>
      </node>
      <node id="27">
        <label>src/depth_stencil_view.cpp</label>
        <link refid="depth__stencil__view_8cpp"/>
      </node>
      <node id="28">
        <label>src/fullscreen_pass.cpp</label>
        <link refid="fullscreen__pass_8cpp"/>
      </node>
      <node id="3">
        <label>src/game.cpp</label>
        <link refid="game_8cpp"/>
      </node>
      <node id="29">
        <label>src/graphics.cpp</label>
        <link refid="graphics_8cpp"/>
      </node>
      <node id="30">
        <label>src/graphics_friend.cpp</label>
        <link refid="graphics__friend_8cpp"/>
      </node>
      <node id="31">
        <label>src/horizontal_blur_pass.cpp</label>
        <link refid="horizontal__blur__pass_8cpp"/>
      </node>
      <node id="32">
        <label>src/index_buffer.cpp</label>
        <link refid="index__buffer_8cpp"/>
      </node>
      <node id="33">
        <label>src/input_layout.cpp</label>
        <link refid="input__layout_8cpp"/>
      </node>
      <node id="34">
        <label>src/job.cpp</label>
        <link refid="job_8cpp"/>
      </node>
      <node id="57">
        <label>src/key_sound.cpp</label>
        <link refid="key__sound_8cpp"/>
      </node>
      <node id="9">
        <label>src/light_source.cpp</label>
        <link refid="light__source_8cpp"/>
      </node>
      <node id="35">
        <label>src/line.cpp</label>
        <link refid="line_8cpp"/>
      </node>
      <node id="4">
        <label>src/main.cpp</label>
        <link refid="main_8cpp"/>
      </node>
      <node id="36">
        <label>src/material_loader.cpp</label>
        <link refid="material__loader_8cpp"/>
      </node>
      <node id="37">
        <label>src/mouse_picker.cpp</label>
        <link refid="mouse__picker_8cpp"/>
      </node>
      <node id="38">
        <label>src/pass_2d.cpp</label>
        <link refid="pass__2d_8cpp"/>
      </node>
      <node id="55">
        <label>src/performance_log.cpp</label>
        <link refid="performance__log_8cpp"/>
      </node>
      <node id="39">
        <label>src/pixel_shader.cpp</label>
        <link refid="pixel__shader_8cpp"/>
      </node>
      <node id="40">
        <label>src/plane.cpp</label>
        <link refid="plane_8cpp"/>
      </node>
      <node id="41">
        <label>src/primitive_topology.cpp</label>
        <link refid="primitive__topology_8cpp"/>
      </node>
      <node id="42">
        <label>src/rasterizer_state.cpp</label>
        <link refid="rasterizer__state_8cpp"/>
      </node>
      <node id="43">
        <label>src/render_target.cpp</label>
        <link refid="render__target_8cpp"/>
      </node>
      <node id="10">
        <label>src/renderer.cpp</label>
        <link refid="renderer_8cpp"/>
      </node>
      <node id="12">
        <label>src/sky_pass.cpp</label>
        <link refid="sky__pass_8cpp"/>
      </node>
      <node id="13">
        <label>src/sky_vscb.cpp</label>
        <link refid="sky__vscb_8cpp"/>
      </node>
      <node id="44">
        <label>src/sphere.cpp</label>
        <link refid="sphere_8cpp"/>
      </node>
      <node id="16">
        <label>src/terrain.cpp</label>
        <link refid="terrain_8cpp"/>
      </node>
      <node id="45">
        <label>src/testing.cpp</label>
        <link refid="testing_8cpp"/>
      </node>
      <node id="46">
        <label>src/texture.cpp</label>
        <link refid="texture_8cpp"/>
      </node>
      <node id="47">
        <label>src/texture_sampler_state.cpp</label>
        <link refid="texture__sampler__state_8cpp"/>
      </node>
      <node id="17">
        <label>src/transform_vscb.cpp</label>
        <link refid="transform__vscb_8cpp"/>
      </node>
      <node id="48">
        <label>src/ui_component.cpp</label>
        <link refid="ui__component_8cpp"/>
      </node>
      <node id="49">
        <label>src/ui_pass.cpp</label>
        <link refid="ui__pass_8cpp"/>
      </node>
      <node id="50">
        <label>src/vertex_buffer.cpp</label>
        <link refid="vertex__buffer_8cpp"/>
      </node>
      <node id="51">
        <label>src/vertex_shader.cpp</label>
        <link refid="vertex__shader_8cpp"/>
      </node>
      <node id="52">
        <label>src/viewport.cpp</label>
        <link refid="viewport_8cpp"/>
      </node>
      <node id="53">
        <label>src/window.cpp</label>
        <link refid="window_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classKeyTimer" prot="public">KeyTimer</innerclass>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="key__timer_8h_a341fe9c93163c49df3e8b1f837812fc6_1a341fe9c93163c49df3e8b1f837812fc6" prot="public" static="no">
        <type><ref refid="classKeyTimer" kindref="compound">KeyTimer</ref>&lt; std::chrono::milliseconds &gt;</type>
        <definition>using SleepTimer =  KeyTimer&lt;std::chrono::milliseconds&gt;</definition>
        <argsstring></argsstring>
        <name>SleepTimer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="inc/key_timer.h" line="208" column="1" bodyfile="inc/key_timer.h" bodystart="208" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;thread&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;chrono&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="console_8h" kindref="compound">console.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="non__copyable_8h" kindref="compound">non_copyable.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="math__utils_8h" kindref="compound">math_utils.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Resolution<sp/>=<sp/>std::chrono::milliseconds&gt;</highlight></codeline>
<codeline lineno="20" refid="classKeyTimer" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classKeyTimer" kindref="compound">KeyTimer</ref><sp/>final</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="classNonCopyableAndNonMovable" kindref="compound">NonCopyableAndNonMovable</ref></highlight></codeline>
<codeline lineno="22"><highlight class="normal">{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="24" refid="classKeyTimer_a354b5d5a956267a691bf92e8954e41b5_1a354b5d5a956267a691bf92e8954e41b5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classKeyTimer_a354b5d5a956267a691bf92e8954e41b5_1a354b5d5a956267a691bf92e8954e41b5" kindref="member">TClock</ref><sp/>=<sp/>std::conditional_t&lt;std::chrono::high_resolution_clock::is_steady,</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::chrono::high_resolution_clock,</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::chrono::steady_clock&gt;;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="28" refid="classKeyTimer_acae5e24195e3e4a060ef9fdb5fda0a84_1acae5e24195e3e4a060ef9fdb5fda0a84" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>TClock::time_point<sp/><ref refid="classKeyTimer_acae5e24195e3e4a060ef9fdb5fda0a84_1acae5e24195e3e4a060ef9fdb5fda0a84" kindref="member">m_start</ref>{};<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>records<sp/>starting<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29" refid="classKeyTimer_a14125899e463ee1c0ab55bc60070aee9_1a14125899e463ee1c0ab55bc60070aee9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>TClock::time_point<sp/><ref refid="classKeyTimer_a14125899e463ee1c0ab55bc60070aee9_1a14125899e463ee1c0ab55bc60070aee9" kindref="member">m_last</ref>{};<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>counts<sp/>duration<sp/>between<sp/>successive<sp/>calls<sp/>of<sp/>getTime</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="classKeyTimer_a60db4cc912ab30b862ec3fd08e42bfd5_1a60db4cc912ab30b862ec3fd08e42bfd5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classKeyTimer_a60db4cc912ab30b862ec3fd08e42bfd5_1a60db4cc912ab30b862ec3fd08e42bfd5" kindref="member">m_duration</ref>{};<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>counts<sp/>duration<sp/>from<sp/>starting<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="32" refid="classKeyTimer_a2914a899d867c7310f37343b3a706456_1a2914a899d867c7310f37343b3a706456" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classKeyTimer_a2914a899d867c7310f37343b3a706456_1a2914a899d867c7310f37343b3a706456" kindref="member">KeyTimer</ref>(<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bStart<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>)<sp/>noexcept</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>bStart<sp/>)</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classKeyTimer_ab8ce8e8658a0ea7c9b5ab4028bc7b777_1ab8ce8e8658a0ea7c9b5ab4028bc7b777" kindref="member">start</ref>();</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="classKeyTimer_a2a8566ddc99413d5132e58ac268671d6_1a2a8566ddc99413d5132e58ac268671d6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classKeyTimer_a2a8566ddc99413d5132e58ac268671d6_1a2a8566ddc99413d5132e58ac268671d6" kindref="member">~KeyTimer</ref>()<sp/>noexcept</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dur<sp/>=<sp/><ref refid="classKeyTimer_ad70fae950b4e47856a2c9e774fc60410_1ad70fae950b4e47856a2c9e774fc60410" kindref="member">getMilliSecondsFromStart</ref>();</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>_DEBUG<sp/>&amp;&amp;<sp/>!defined<sp/>NDEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classKeyConsole" kindref="compound">KeyConsole</ref><sp/>&amp;console<sp/>=<sp/><ref refid="classKeyConsole_a31cfe6a77156baf79a0a74ea338c6e18_1a31cfe6a77156baf79a0a74ea338c6e18" kindref="member">KeyConsole::getInstance</ref>();</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std::string_literals;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>console.<ref refid="classKeyConsole_a453538c0c27b7fb4311391485e3c3788_1a453538c0c27b7fb4311391485e3c3788" kindref="member">log</ref>(<sp/>std::to_string(<sp/>dur<sp/>)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">s<sp/>);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="classKeyTimer_ab8ce8e8658a0ea7c9b5ab4028bc7b777_1ab8ce8e8658a0ea7c9b5ab4028bc7b777" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classKeyTimer_ab8ce8e8658a0ea7c9b5ab4028bc7b777_1ab8ce8e8658a0ea7c9b5ab4028bc7b777" kindref="member">start</ref>()<sp/>noexcept</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classKeyTimer_acae5e24195e3e4a060ef9fdb5fda0a84_1acae5e24195e3e4a060ef9fdb5fda0a84" kindref="member">m_start</ref><sp/>=<sp/>TClock::now();</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classKeyTimer_a14125899e463ee1c0ab55bc60070aee9_1a14125899e463ee1c0ab55bc60070aee9" kindref="member">m_last</ref><sp/>=<sp/>TClock::now();</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classKeyTimer_a60db4cc912ab30b862ec3fd08e42bfd5_1a60db4cc912ab30b862ec3fd08e42bfd5" kindref="member">m_duration</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="classKeyTimer_adc8d991f669445558eb8fbebd6d35d9e_1adc8d991f669445558eb8fbebd6d35d9e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classKeyTimer_adc8d991f669445558eb8fbebd6d35d9e_1adc8d991f669445558eb8fbebd6d35d9e" kindref="member">restart</ref>()<sp/>noexcept</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classKeyTimer_acae5e24195e3e4a060ef9fdb5fda0a84_1acae5e24195e3e4a060ef9fdb5fda0a84" kindref="member">m_start</ref><sp/>=<sp/>TClock::now();</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classKeyTimer_a60db4cc912ab30b862ec3fd08e42bfd5_1a60db4cc912ab30b862ec3fd08e42bfd5" kindref="member">m_duration</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="classKeyTimer_a8b1d7eb8755dd8c5512216c667183071_1a8b1d7eb8755dd8c5512216c667183071" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classKeyTimer_a8b1d7eb8755dd8c5512216c667183071_1a8b1d7eb8755dd8c5512216c667183071" kindref="member">reset</ref>()<sp/>noexcept</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>min</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>undef<sp/>min</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classKeyTimer_acae5e24195e3e4a060ef9fdb5fda0a84_1acae5e24195e3e4a060ef9fdb5fda0a84" kindref="member">m_start</ref><sp/>=<sp/>std::chrono::time_point_cast&lt;Resolution&gt;(<sp/>TClock::time_point::min()<sp/>);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="72" refid="classKeyTimer_ad70fae950b4e47856a2c9e774fc60410_1ad70fae950b4e47856a2c9e774fc60410" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classKeyTimer_ad70fae950b4e47856a2c9e774fc60410_1ad70fae950b4e47856a2c9e774fc60410" kindref="member">getMilliSecondsFromStart</ref>()<sp/>noexcept</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal">(<sp/>std::is_same_v&lt;Resolution,<sp/>std::chrono::nanoseconds&gt;<sp/>)</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classKeyTimer_a60db4cc912ab30b862ec3fd08e42bfd5_1a60db4cc912ab30b862ec3fd08e42bfd5" kindref="member">m_duration</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>std::chrono::duration_cast&lt;Resolution&gt;(<sp/>TClock::now()<sp/>-<sp/><ref refid="classKeyTimer_acae5e24195e3e4a060ef9fdb5fda0a84_1acae5e24195e3e4a060ef9fdb5fda0a84" kindref="member">m_start</ref><sp/>).count()<sp/>/<sp/>1000000<sp/>);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal">(<sp/>std::is_same_v&lt;Resolution,<sp/>std::chrono::microseconds&gt;<sp/>)</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classKeyTimer_a60db4cc912ab30b862ec3fd08e42bfd5_1a60db4cc912ab30b862ec3fd08e42bfd5" kindref="member">m_duration</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>std::chrono::duration_cast&lt;Resolution&gt;(<sp/>TClock::now()<sp/>-<sp/><ref refid="classKeyTimer_acae5e24195e3e4a060ef9fdb5fda0a84_1acae5e24195e3e4a060ef9fdb5fda0a84" kindref="member">m_start</ref><sp/>).count()<sp/>/<sp/>1000<sp/>);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal">(<sp/>std::is_same_v&lt;Resolution,<sp/>std::chrono::milliseconds&gt;<sp/>)</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classKeyTimer_a60db4cc912ab30b862ec3fd08e42bfd5_1a60db4cc912ab30b862ec3fd08e42bfd5" kindref="member">m_duration</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>std::chrono::duration_cast&lt;Resolution&gt;(<sp/>TClock::now()<sp/>-<sp/><ref refid="classKeyTimer_acae5e24195e3e4a060ef9fdb5fda0a84_1acae5e24195e3e4a060ef9fdb5fda0a84" kindref="member">m_start</ref><sp/>).count()<sp/>);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal">(<sp/>std::is_same_v&lt;Resolution,<sp/>std::chrono::seconds&gt;<sp/>)</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classKeyTimer_a60db4cc912ab30b862ec3fd08e42bfd5_1a60db4cc912ab30b862ec3fd08e42bfd5" kindref="member">m_duration</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>std::chrono::duration_cast&lt;Resolution&gt;(<sp/>TClock::now()<sp/>-<sp/><ref refid="classKeyTimer_acae5e24195e3e4a060ef9fdb5fda0a84_1acae5e24195e3e4a060ef9fdb5fda0a84" kindref="member">m_start</ref><sp/>).count()<sp/>*<sp/>1000<sp/>);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>_DEBUG<sp/>&amp;&amp;<sp/>!defined<sp/>NDEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classKeyConsole" kindref="compound">KeyConsole</ref><sp/>&amp;console<sp/>=<sp/><ref refid="classKeyConsole_a31cfe6a77156baf79a0a74ea338c6e18_1a31cfe6a77156baf79a0a74ea338c6e18" kindref="member">KeyConsole::getInstance</ref>();</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std::string_literals;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>console.<ref refid="classKeyConsole_a453538c0c27b7fb4311391485e3c3788_1a453538c0c27b7fb4311391485e3c3788" kindref="member">log</ref>(<sp/></highlight><highlight class="stringliteral">&quot;Duration<sp/>from<sp/>start<sp/>(ms):<sp/>&quot;</highlight><highlight class="normal">s<sp/>+<sp/>std::to_string(<sp/><ref refid="classKeyTimer_a60db4cc912ab30b862ec3fd08e42bfd5_1a60db4cc912ab30b862ec3fd08e42bfd5" kindref="member">m_duration</ref><sp/>)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;<ref refid="classKeyTimer_a60db4cc912ab30b862ec3fd08e42bfd5_1a60db4cc912ab30b862ec3fd08e42bfd5" kindref="member">m_duration</ref>;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="101" refid="classKeyTimer_a3ef6f86f264d4a46cacfb27f5632c3fa_1a3ef6f86f264d4a46cacfb27f5632c3fa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="classKeyTimer_a3ef6f86f264d4a46cacfb27f5632c3fa_1a3ef6f86f264d4a46cacfb27f5632c3fa" kindref="member">getSecondsFromStart</ref>()<sp/>noexcept</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal">(<sp/>std::is_same_v&lt;Resolution,<sp/>std::chrono::nanoseconds&gt;<sp/>)</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>std::chrono::duration_cast&lt;Resolution&gt;(<sp/>TClock::now()<sp/>-<sp/><ref refid="classKeyTimer_acae5e24195e3e4a060ef9fdb5fda0a84_1acae5e24195e3e4a060ef9fdb5fda0a84" kindref="member">m_start</ref><sp/>).count()<sp/>/<sp/>1000000000.0f<sp/>);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal">(<sp/>std::is_same_v&lt;Resolution,<sp/>std::chrono::microseconds&gt;<sp/>)</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>std::chrono::duration_cast&lt;Resolution&gt;(<sp/>TClock::now()<sp/>-<sp/><ref refid="classKeyTimer_acae5e24195e3e4a060ef9fdb5fda0a84_1acae5e24195e3e4a060ef9fdb5fda0a84" kindref="member">m_start</ref><sp/>).count()<sp/>/<sp/>1000000.0f<sp/>);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal">(<sp/>std::is_same_v&lt;Resolution,<sp/>std::chrono::milliseconds&gt;<sp/>)</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>std::chrono::duration_cast&lt;Resolution&gt;(<sp/>TClock::now()<sp/>-<sp/><ref refid="classKeyTimer_acae5e24195e3e4a060ef9fdb5fda0a84_1acae5e24195e3e4a060ef9fdb5fda0a84" kindref="member">m_start</ref><sp/>).count()<sp/>/<sp/>1000.0f<sp/>);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal">(<sp/>std::is_same_v&lt;Resolution,<sp/>std::chrono::seconds&gt;<sp/>)</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>std::chrono::duration_cast&lt;Resolution&gt;(<sp/>TClock::now()<sp/>-<sp/><ref refid="classKeyTimer_acae5e24195e3e4a060ef9fdb5fda0a84_1acae5e24195e3e4a060ef9fdb5fda0a84" kindref="member">m_start</ref><sp/>).count()<sp/>);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>_DEBUG<sp/>&amp;&amp;<sp/>!defined<sp/>NDEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classKeyConsole" kindref="compound">KeyConsole</ref><sp/>&amp;console<sp/>=<sp/><ref refid="classKeyConsole_a31cfe6a77156baf79a0a74ea338c6e18_1a31cfe6a77156baf79a0a74ea338c6e18" kindref="member">KeyConsole::getInstance</ref>();</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std::string_literals;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>console.<ref refid="classKeyConsole_a453538c0c27b7fb4311391485e3c3788_1a453538c0c27b7fb4311391485e3c3788" kindref="member">log</ref>(<sp/></highlight><highlight class="stringliteral">&quot;Duration<sp/>from<sp/>start<sp/>(sec):<sp/>&quot;</highlight><highlight class="normal">s<sp/>+<sp/>std::to_string(<sp/>ret<sp/>)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="132" refid="classKeyTimer_ae18173dcedbcc9715ba123d065a2cc4f_1ae18173dcedbcc9715ba123d065a2cc4f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="classKeyTimer_ae18173dcedbcc9715ba123d065a2cc4f_1ae18173dcedbcc9715ba123d065a2cc4f" kindref="member">getTimeElapsed</ref>()<sp/>noexcept</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>old<sp/>=<sp/><ref refid="classKeyTimer_a14125899e463ee1c0ab55bc60070aee9_1a14125899e463ee1c0ab55bc60070aee9" kindref="member">m_last</ref>;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classKeyTimer_a14125899e463ee1c0ab55bc60070aee9_1a14125899e463ee1c0ab55bc60070aee9" kindref="member">m_last</ref><sp/>=<sp/>TClock::now();</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>std::chrono::duration_cast&lt;Resolution&gt;(<sp/><ref refid="classKeyTimer_a14125899e463ee1c0ab55bc60070aee9_1a14125899e463ee1c0ab55bc60070aee9" kindref="member">m_last</ref><sp/>-<sp/>old<sp/>).count()<sp/>);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="141" refid="classKeyTimer_a8fb4f49cfe264bdc7f009cd04f47f2c3_1a8fb4f49cfe264bdc7f009cd04f47f2c3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="classKeyTimer_a8fb4f49cfe264bdc7f009cd04f47f2c3_1a8fb4f49cfe264bdc7f009cd04f47f2c3" kindref="member">getTimeElapsedSecs</ref>()<sp/>noexcept</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>old<sp/>=<sp/><ref refid="classKeyTimer_a14125899e463ee1c0ab55bc60070aee9_1a14125899e463ee1c0ab55bc60070aee9" kindref="member">m_last</ref>;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classKeyTimer_a14125899e463ee1c0ab55bc60070aee9_1a14125899e463ee1c0ab55bc60070aee9" kindref="member">m_last</ref><sp/>=<sp/>TClock::now();</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal">(<sp/>std::is_same_v&lt;Resolution,<sp/>std::chrono::nanoseconds&gt;<sp/>)</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>std::chrono::duration_cast&lt;Resolution&gt;(<sp/><ref refid="classKeyTimer_a14125899e463ee1c0ab55bc60070aee9_1a14125899e463ee1c0ab55bc60070aee9" kindref="member">m_last</ref><sp/>-<sp/>old<sp/>).count()<sp/>/<sp/>1000000000.0f<sp/>);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal">(<sp/>std::is_same_v&lt;Resolution,<sp/>std::chrono::microseconds&gt;<sp/>)</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>std::chrono::duration_cast&lt;Resolution&gt;(<sp/><ref refid="classKeyTimer_a14125899e463ee1c0ab55bc60070aee9_1a14125899e463ee1c0ab55bc60070aee9" kindref="member">m_last</ref><sp/>-<sp/>old<sp/>).count()<sp/>/<sp/>1000000.0f);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal">(<sp/>std::is_same_v&lt;Resolution,<sp/>std::chrono::milliseconds&gt;<sp/>)</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>std::chrono::duration_cast&lt;Resolution&gt;(<sp/><ref refid="classKeyTimer_a14125899e463ee1c0ab55bc60070aee9_1a14125899e463ee1c0ab55bc60070aee9" kindref="member">m_last</ref><sp/>-<sp/>old<sp/>).count()<sp/>/<sp/>1000.0f);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal">(<sp/>std::is_same_v&lt;Resolution,<sp/>std::chrono::seconds&gt;<sp/>)</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>std::chrono::duration_cast&lt;Resolution&gt;(<sp/><ref refid="classKeyTimer_a14125899e463ee1c0ab55bc60070aee9_1a14125899e463ee1c0ab55bc60070aee9" kindref="member">m_last</ref><sp/>-<sp/>old<sp/>).count()<sp/>);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="166" refid="classKeyTimer_a6d4a328eafcbc3e8964e4720ddfb01aa_1a6d4a328eafcbc3e8964e4720ddfb01aa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="classKeyTimer_a6d4a328eafcbc3e8964e4720ddfb01aa_1a6d4a328eafcbc3e8964e4720ddfb01aa" kindref="member">peekTimeElapsed</ref>()<sp/>const<sp/>noexcept</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>std::chrono::duration_cast&lt;Resolution&gt;(<sp/>TClock::now()<sp/>-<sp/><ref refid="classKeyTimer_a14125899e463ee1c0ab55bc60070aee9_1a14125899e463ee1c0ab55bc60070aee9" kindref="member">m_last</ref><sp/>).count()<sp/>);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="172" refid="classKeyTimer_a8b4f14a4f7aa852923450db4885eff3e_1a8b4f14a4f7aa852923450db4885eff3e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="classKeyTimer_a8b4f14a4f7aa852923450db4885eff3e_1a8b4f14a4f7aa852923450db4885eff3e" kindref="member">lap</ref>()<sp/>noexcept</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>old<sp/>=<sp/><ref refid="classKeyTimer_a14125899e463ee1c0ab55bc60070aee9_1a14125899e463ee1c0ab55bc60070aee9" kindref="member">m_last</ref>;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classKeyTimer_a14125899e463ee1c0ab55bc60070aee9_1a14125899e463ee1c0ab55bc60070aee9" kindref="member">m_last</ref><sp/>=<sp/>TClock::now();</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::chrono::duration&lt;float&gt;<sp/>dur<sp/>=<sp/><ref refid="classKeyTimer_a14125899e463ee1c0ab55bc60070aee9_1a14125899e463ee1c0ab55bc60070aee9" kindref="member">m_last</ref><sp/>-<sp/>old;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dur.count();</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>region<sp/>sleepFor</highlight></codeline>
<codeline lineno="182" refid="classKeyTimer_a36bdadbd57baf7541c0b7c01ed688599_1a36bdadbd57baf7541c0b7c01ed688599" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classKeyTimer_a36bdadbd57baf7541c0b7c01ed688599_1a36bdadbd57baf7541c0b7c01ed688599" kindref="member">sleepFor</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t<sp/>)</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ms<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::uint64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>t<sp/>);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classKeyTimer_a36bdadbd57baf7541c0b7c01ed688599_1a36bdadbd57baf7541c0b7c01ed688599" kindref="member">sleepFor</ref>(<sp/>std::chrono::milliseconds{ms}<sp/>);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//const<sp/>auto<sp/>us<sp/>=<sp/>util::getFractionalPartAsInt(<sp/>t,<sp/>3<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//sleepFor(<sp/>std::chrono::microseconds{us}<sp/>);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="189" refid="classKeyTimer_ac7d3d30e328d2beb9bf3adaf7709257b_1ac7d3d30e328d2beb9bf3adaf7709257b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classKeyTimer_ac7d3d30e328d2beb9bf3adaf7709257b_1ac7d3d30e328d2beb9bf3adaf7709257b" kindref="member">sleepFor</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t<sp/>)</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classKeyTimer_a36bdadbd57baf7541c0b7c01ed688599_1a36bdadbd57baf7541c0b7c01ed688599" kindref="member">sleepFor</ref>(<sp/>std::chrono::milliseconds{</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>t<sp/>)}<sp/>);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="193" refid="classKeyTimer_ad599ad25448f723e7ca60f1a27633fb8_1ad599ad25448f723e7ca60f1a27633fb8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classKeyTimer_ad599ad25448f723e7ca60f1a27633fb8_1ad599ad25448f723e7ca60f1a27633fb8" kindref="member">sleepFor</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>t<sp/>)</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classKeyTimer_a36bdadbd57baf7541c0b7c01ed688599_1a36bdadbd57baf7541c0b7c01ed688599" kindref="member">sleepFor</ref>(<sp/>std::chrono::milliseconds{t}<sp/>);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="197" refid="classKeyTimer_a4872b515a594cb40e044f73224a26dbb_1a4872b515a594cb40e044f73224a26dbb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classKeyTimer_a4872b515a594cb40e044f73224a26dbb_1a4872b515a594cb40e044f73224a26dbb" kindref="member">sleepFor</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::chrono::milliseconds<sp/>&amp;t<sp/>)</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::this_thread::sleep_for(<sp/>t<sp/>);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="201" refid="classKeyTimer_a44678e0ae6fde0998b509c41ccaa70df_1a44678e0ae6fde0998b509c41ccaa70df" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classKeyTimer_a44678e0ae6fde0998b509c41ccaa70df_1a44678e0ae6fde0998b509c41ccaa70df" kindref="member">sleepFor</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::chrono::microseconds<sp/>&amp;t<sp/>)</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::this_thread::sleep_for(<sp/>t<sp/>);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>endregion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal">};</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208" refid="key__timer_8h_a341fe9c93163c49df3e8b1f837812fc6_1a341fe9c93163c49df3e8b1f837812fc6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classKeyTimer" kindref="compound">SleepTimer</ref><sp/>=<sp/><ref refid="classKeyTimer" kindref="compound">KeyTimer&lt;std::chrono::milliseconds&gt;</ref>;</highlight></codeline>
    </programlisting>
    <location file="inc/key_timer.h"/>
  </compounddef>
</doxygen>
